Add support for Numonxy N25Q128 flash

diff --git a/drivers/mtd/spi/stmicro.c b/drivers/mtd/spi/stmicro.c
--- a/drivers/mtd/spi/stmicro.c
+++ b/drivers/mtd/spi/stmicro.c
@@ -46,8 +46,18 @@
 #define CMD_M25PXX_DP		0xb9	/* Deep Power-down */
 #define CMD_M25PXX_RES		0xab	/* Release from DP, and Read Signature */
 
+#define STM_ID_M25P10		0x2011
+#define STM_ID_M25P16		0x2015
+#define STM_ID_M25P20		0x2012
+#define STM_ID_M25P32		0x2016
+#define STM_ID_M25P40		0x2013
+#define STM_ID_M25P64		0x2017
+#define STM_ID_M25P80		0x2014
+#define STM_ID_M25P128		0x2018
+#define STM_ID_N25Q128		0xBA18
+
 struct stmicro_spi_flash_params {
-	u8 idcode1;
+	u16 idcode1;
 	u16 page_size;
 	u16 pages_per_sector;
 	u16 nr_sectors;
@@ -56,61 +66,68 @@ struct stmicro_spi_flash_params {
 
 static const struct stmicro_spi_flash_params stmicro_spi_flash_table[] = {
 	{
-		.idcode1 = 0x11,
+		.idcode1 = STM_ID_M25P10,
 		.page_size = 256,
 		.pages_per_sector = 128,
 		.nr_sectors = 4,
 		.name = "M25P10",
 	},
 	{
-		.idcode1 = 0x15,
+		.idcode1 = STM_ID_M25P16,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 32,
 		.name = "M25P16",
 	},
 	{
-		.idcode1 = 0x12,
+		.idcode1 = STM_ID_M25P20,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 4,
 		.name = "M25P20",
 	},
 	{
-		.idcode1 = 0x16,
+		.idcode1 = STM_ID_M25P32,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 64,
 		.name = "M25P32",
 	},
 	{
-		.idcode1 = 0x13,
+		.idcode1 = STM_ID_M25P40,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 8,
 		.name = "M25P40",
 	},
 	{
-		.idcode1 = 0x17,
+		.idcode1 = STM_ID_M25P64,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 128,
 		.name = "M25P64",
 	},
 	{
-		.idcode1 = 0x14,
+		.idcode1 = STM_ID_M25P80,
 		.page_size = 256,
 		.pages_per_sector = 256,
 		.nr_sectors = 16,
 		.name = "M25P80",
 	},
 	{
-		.idcode1 = 0x18,
+		.idcode1 = STM_ID_M25P128,
 		.page_size = 256,
 		.pages_per_sector = 1024,
 		.nr_sectors = 64,
 		.name = "M25P128",
 	},
+	{
+		.idcode1 = STM_ID_N25Q128,
+		.page_size = 256,
+		.pages_per_sector = 256,
+		.nr_sectors = 256,
+		.name = "N25Q128",
+	},
 };
 
 static int stmicro_erase(struct spi_flash *flash, u32 offset, size_t len)
@@ -123,6 +140,9 @@ struct spi_flash *spi_flash_probe_stmicr
 	const struct stmicro_spi_flash_params *params;
 	struct spi_flash *flash;
 	unsigned int i;
+	unsigned short dev_id;
+
+	dev_id = idcode[1] << 8 | idcode[2];
 
 	if (idcode[0] == 0xff) {
 		i = spi_flash_cmd(spi, CMD_M25PXX_RES,
@@ -139,13 +159,13 @@ struct spi_flash *spi_flash_probe_stmicr
 
 	for (i = 0; i < ARRAY_SIZE(stmicro_spi_flash_table); i++) {
 		params = &stmicro_spi_flash_table[i];
-		if (params->idcode1 == idcode[2]) {
+		if (params->idcode1 == dev_id) {
 			break;
 		}
 	}
 
 	if (i == ARRAY_SIZE(stmicro_spi_flash_table)) {
-		debug("SF: Unsupported STMicro ID %02x\n", idcode[1]);
+		debug("SF: Unsupported STMicro ID %04x\n", dev_id);
 		return NULL;
 	}
 
