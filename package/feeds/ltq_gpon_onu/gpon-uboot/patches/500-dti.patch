add Lantiq UDP DTI agent

diff --git a/common/cmd_net.c b/common/cmd_net.c
--- a/common/cmd_net.c
+++ b/common/cmd_net.c
@@ -53,6 +53,18 @@ U_BOOT_CMD(
 );
 #endif
 
+#if defined(CONFIG_CMD_DTI)
+int do_dti(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	return NetLoop(UDP_DTI);
+}
+
+U_BOOT_CMD(
+	dti,	1,	1,	do_dti,
+	"start UDP DTI agent", ""
+);
+#endif
+
 int do_tftpb (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 {
 	return netboot_common(TFTPGET, cmdtp, argc, argv);
diff --git a/include/dti.h b/include/dti.h
new file mode 100644
--- /dev/null
+++ b/include/dti.h
@@ -0,0 +1,259 @@
+#ifndef _DTI_H__
+#define _DTI_H__
+
+#ifndef __PACKED__
+/** Packed definition */
+#	define __PACKED__			__attribute__ ((packed))
+#endif
+
+/** DTI packet - magic key */
+#define DTI_MAGIC				0xdeadbeef
+
+/* Packet Group: 0x0000xxxx - Control Level Access */
+#define DTI_GROUP_CONTROL_ACCESS		0x00000000
+/** Packet Group: 0x0001xxxx - Low Level HW Access */
+#define DTI_GROUP_LOW_LEVEL_HW_ACCESS		0x00010000
+/* Packet Group: 0x0002xxxx - Control and Message Interface */
+#define DTI_GROUP_CNTRL_MSG_ACCESS		0x00020000
+/* Packet Group: 0x0003xxxx - Trace Buffer Access */
+#define DTI_GROUP_TRACE_BUFFER_ACCESS		0x00030000
+/* Packet Group: 0x0004xxxx - Debug Register Access */
+#define DTI_GROUP_DEBUG_REG_ACCESS		0x00040000
+/* Packet Group: 0x0005xxxx - Command Line Interface (CLI) */
+#define DTI_GROUP_CLI_ACCESS			0x00050000
+/* Packet Group: 0x0006xxxx -  */
+#define DTI_GROUP_WINEASY_ACCESS		0x00060000
+
+/** Packet Type: 0x0000xxxx - Control Level Access */
+typedef enum
+{
+	/** Error Packet Type */
+	DTI_PacketType_eError			= 0x00000001,
+	/** Loopback Packet */
+	DTI_PacketType_eLoopback		= 0x00000002,
+	/** System Information Retrieval */
+	DTI_PacketType_eSytemInfo		= 0x00000003,
+	/** Prepare Binary Load */
+	DTI_PacketType_eImageLoadStart		= 0x00000010,
+	/** Send Image Chunk */
+	DTI_PacketType_eImageLoadChunk		= 0x00000011
+} DTI_PacketType_t;
+
+/** Possible device packet types */
+typedef enum {
+	/* Packet Type: 0x0001xxxx - Low Level HW Access */
+	/** Device Reset */
+	DTI_PacketType_eDeviceReset		= 0x00010001,
+	/** Device Download */
+	DTI_PacketType_eDeviceDownload		= 0x00010002,
+
+	/** Device Open */
+	DTI_PacketType_eDeviceOpen		= 0x00010003,
+	/** Device Close */
+	DTI_PacketType_eDeviceClose		= 0x00010004,
+
+	/** Lock / Unlock Device */
+	DTI_PacketType_eRegisterLock		= 0x00010020,
+	/** Read Device Register */
+	DTI_PacketType_eRegisterGet		= 0x00010021,
+	/** Write Device Register */
+	DTI_PacketType_eRegisterSet		= 0x00010022,
+
+	/* Packet Type: 0x0002xxxx - Control and Message Interface */
+	/** Set Configuration Option */
+	DTI_PacketType_eConfigSet		= 0x00020001,
+	/** Get Configuration Option */
+	DTI_PacketType_eConfigGet		= 0x00020002,
+	/** Message Send / Message Receive  */
+	DTI_PacketType_eMessageSend		= 0x00020003,
+	/** Message Error */
+	DTI_PacketType_eMessageError		= 0x00020004,
+
+	/* Packet Type: 0x0003xxxx - Trace Buffer Access */
+	/** Configure Trace Buffer */
+	DTI_PacketType_eTraceBufferConfigSet	= 0x00030001,
+	/** Reset Trace Buffer */
+	DTI_PacketType_eTraceBufferReset	= 0x00030002,
+	/** Get Trace Buffer Status */
+	DTI_PacketType_eTraceBufferStatusGet	= 0x00030003,
+	/** Trace Buffer Read */
+	DTI_PacketType_eTraceBufferGet		= 0x00030004,
+	/** Trace Buffer Notification */
+	DTI_PacketType_eTraceBufferAvailable	= 0x00030005,
+
+	/* Packet Type: 0x0004xxxx - Debug Register Access */
+	/** Debug Read Access */
+	DTI_PacketType_eDebugGet		= 0x00040001,
+	/** Debug Write Access */
+	DTI_PacketType_eDebugSet		= 0x00040002,
+
+	/* Packet Type: 0x0006xxxx - WinEasy Access */
+	/** WinEasy C/I Access */
+	DTI_PacketType_eWinEasyCiAccess		= 0x00060001
+} DTI_PacketTypeDevice_t;
+
+/** Possible payload data types */
+typedef enum
+{
+	/** payload data is of mixed data*/
+	DTI_eMixed				= 0,
+	/** payload data is 8 bit type */
+	DTI_e8Bit				= 1,
+	/** payload data is 16 bit type */
+	DTI_e16Bit				= 2,
+	/** payload data is 32 bit type */
+	DTI_e32Bit				= 3
+} DTI_PayloadType_t;
+
+/** Possible packet error codes */
+typedef enum
+{
+	/* no error */
+	DTI_eNoError				= 0,
+	/** packet type is unknown or not supported */
+	DTI_eErrUnknown				= 1,
+	/** some non DTI API related network error */
+	DTI_eErrNetwork				= 2,
+	/** response was not seen within max pending time */
+	DTI_eErrTimeout				= 3,
+	/** unknown mailbox message */
+	DTI_eErrUnknownMsg			= 4,
+	/** Packet is in incorrect format */
+	DTI_eErrMalformedPacket,
+	/** Packet is in incorrect format */
+	DTI_eErrInvalidParameters,
+	/** Packet type is not known or supported */
+	DTI_eErrInvalidPacketType,
+	/** Payload size is not supported */
+	DTI_eErrInvalidPayloadSize,
+	/** invalid / inclomplete configuration */
+	DTI_eErrConfiguration,
+	/** port / device / interface num out of range */
+	DTI_eErrPortOutOfRange,
+	/** port / interface open error */
+	DTI_eErrPortOpen,
+	/** port / device / interface operation error */
+	DTI_eErrPortOperation,
+	/** Autonomous port / device / interface operation error */
+	DTI_eErrPortAutoOperation,
+	/** unknown / not configured device interface */
+	DTI_eErrDeviceTypeOutOfRange
+} DTI_PacketError_t;
+
+/** The DTI paket header structure.  */
+typedef struct {
+	/** A constant value of 0xdeadbeef used for resynchronization and
+	 * debugging */
+	uint32_t magic;
+	/** The protocol packet type. The upper 16 bits are used to select a
+	 * functional group (e.g. host interface, debug interface, host
+	 * controller).
+	 * The lower 16 bits are the command itself.(Definitions see
+	 * DTI_PacketType_t) */
+	uint32_t packetType;
+	/** The packet options. The upper 24 bits are currently reserved and
+	 * should be set to zero.
+	 * The lower 8 bits identify the payload type. The payload type is the
+	 * bit size of the payload items.
+	 * 0 = Mixed, 1 = 8 bit,  2 = 16bit, 3 = 32 bit. (Definitions see
+	 * DTI_PayloadType_t) */
+	uint32_t packetOptions;
+	/** The port / channel number. If a packet is channel independent this
+	 * value will be ignored. */
+	uint32_t port;
+	/** The transaction number.
+	 * This must be an auto-incrementing non zero number. The packet to
+	 * acknowledge the initiating message will use the same number. The
+	 * value 0 is reserved for autonomous / asynchronous messages.
+	 * On the device side the Tan is simply copied into the acknowledging
+	 * packet. No check for proper incrementing is performed. Even a Tan of
+	 * zero will just be mirrored, but no error condition is generated. */
+	uint32_t tan;
+	/** This field contains the error code. In case the packet
+	 * type/direction does not have an error code the field is reserved and
+	 * has to be set to zero. An error code of zero means success. */
+	uint32_t error;
+	/** The payload size in number of bytes. */
+	uint32_t payloadSize;
+} __PACKED__ DTI_PacketHeader_t;
+
+/** The DTI paket definition */
+typedef struct {
+	/** paket header */
+	DTI_PacketHeader_t header;
+	/** payload */
+	uint8_t  payload[1];
+} __PACKED__ DTI_Packet_t;
+
+
+/** Image load - transfer an binary form the host (PC) to the target system.
+ *
+ * The host informs the target about the file size and identifier. */
+typedef struct {
+	/** Identify the image for later use */
+	uint32_t imageNum;
+	/** Size of the image to download in number of bytes */
+	uint32_t imageSize;
+} __PACKED__ DTI_H2D_ImageLoadStart_t;
+
+/** Image load - transfer an binary form the host (PC) to the target system.
+ *
+ * The target response to a previous \ref  DTI_H2D_ImageLoadStart_t command
+ * with the max binary chunk size which can be processed. */
+typedef struct {
+	/** Maximum size in number of bytes for image chunks to send */
+	uint32_t maxChunkSize;
+} __PACKED__ DTI_D2H_ImageLoadStart_t;
+
+/** Image load - Data Chunk Download.
+ *
+ * Packet type: \ref  DTI_PacketType_eImageLoadChunk .
+ *
+ * With this packet the image is send in chunks to the board. This ensures a
+ * response in a certain amount of time even with a slow connection.
+ * The host side can suggest a maximum number of bytes which are transferred
+ * in one packet, the target should accept this size.
+ * But the PC side can even send less than that per packet.
+ *
+ * \remarks The implementation on the board has to check whether the written
+ * data fits to the allocated image size. A error indication should be
+ * generated otherwise. */
+typedef struct {
+	/** The byte offset into the image of this chunk. */
+	uint32_t offset;
+	/** Size in number of bytes for this chunk. */
+	uint32_t chunkSize;
+	/** Data chunk */
+	uint8_t  data[1];
+} __PACKED__ DTI_H2D_ImageLoadChunk_t;
+
+/** Device Download Command - performs a download on the selected devices with
+ * the selected and previous provided image.  */
+typedef struct {
+	/** Identify the image used for this download command */
+	uint32_t imageNum;
+	/** The download type. Could be eFirmware(=0), eCache(=1) */
+	uint32_t mode;
+
+	/** Bitmask to reset devices before the firmware is loaded.
+	*  Will be ignored if not supported by target device.
+	*  A one selects a device. The first device (0) is located in the LSB. */
+	uint32_t resetMask;
+
+	/** Bitmask to select devices for image load. A one selects a device.
+	*  The first device (0) is located in the LSB. */
+	uint32_t loadMask;
+} __PACKED__ DTI_H2D_DeviceDownload_t;
+
+/** Device Download Command - informs the host about a failed download operation
+ * per device.  */
+typedef struct {
+	/** Bitmask with a one for every device which failed in the download
+	* procedure.  The first device (=0) is located in the LSB. */
+	uint32_t errorMask;
+} __PACKED__ DTI_D2H_DeviceDownload_t;
+
+/** Start DTI handing */
+void DtiStart (void);
+
+#endif
diff --git a/include/net.h b/include/net.h
--- a/include/net.h
+++ b/include/net.h
@@ -368,7 +368,7 @@ extern int		NetRestartWrap;		/* Tried al
 
 enum proto_t {
 	BOOTP, RARP, ARP, TFTPGET, DHCP, PING, DNS, NFS, CDP, NETCONS, SNTP,
-	TFTPSRV, TFTPPUT
+	TFTPSRV, TFTPPUT, UDP_DTI
 };
 
 /* from net/net.c */
diff --git a/net/Makefile b/net/Makefile
--- a/net/Makefile
+++ b/net/Makefile
@@ -31,6 +31,7 @@ UIPDIR  = uip-0.9
 
 COBJS-$(CONFIG_CMD_NET)  += bootp.o
 COBJS-$(CONFIG_CMD_DNS)  += dns.o
+COBJS-$(CONFIG_CMD_DTI)  += dti.o
 COBJS-$(CONFIG_CMD_NET)  += eth.o
 COBJS-$(CONFIG_CMD_NET)  += net.o
 COBJS-$(CONFIG_CMD_NFS)  += nfs.o
diff --git a/net/dti.c b/net/dti.c
new file mode 100644
--- /dev/null
+++ b/net/dti.c
@@ -0,0 +1,321 @@
+/*
+ * Lantiq UDP DTI agent
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+#include <common.h>
+#include <watchdog.h>
+#include <command.h>
+#include <net.h>
+#include <dti.h>
+
+#include <version.h>
+
+#if defined(CONFIG_CMD_DTI)
+
+#if 1
+#	undef debug
+#	define debug(fmt, args...) printf(fmt, ##args)
+#else
+#	undef debug
+#	define debug(fmt, args...) do { } while (0)
+#endif
+
+/** Maximum DTI FW size in bytes */
+/** TODO define real maximum allowed FW size */
+#define DTI_FW_SIZE_MAX				(4096 * 1024)
+
+/** Used DTI port */
+static int dti_port = 9000;
+
+/** FW image */
+static uint8_t dti_fw[DTI_FW_SIZE_MAX];
+
+/** FW size */
+static uint32_t dti_fw_size;
+
+/** FW id */
+static uint32_t dti_fw_id;
+
+/** FW is valid (loaded with valid data) */
+static int dti_fw_valid = 0;
+
+/** Milliseconds to timeout for lost packet */
+#define TIMEOUT					1000
+
+/** DTI state */
+static enum {
+	/** Default state */
+	DTI_STATE_DEFAULT,
+	/** FW download state */
+	DTI_STATE_FW
+} dti_state = DTI_STATE_DEFAULT;
+
+/** Generate empty DTI packet with error
+ *
+ * \param[in] pkt Output packet
+ *
+ * \return Payload size of output packet (always 0)
+ */
+static inline unsigned int DtiErrorPacket(DTI_Packet_t *pkt)
+{
+	pkt->header.error = DTI_eErrUnknown;
+	pkt->header.payloadSize = 0;
+	return pkt->header.payloadSize;
+}
+
+/** Handle "CLI" DTI packet
+ *
+ * \param[in,out] Input & output packet
+ *
+ * \return Payload size of output packet
+ */
+static inline unsigned int DtiCli(DTI_Packet_t *in, DTI_Packet_t *out)
+{
+	dti_state = DTI_STATE_DEFAULT;
+
+	if (in->header.payloadSize < 4)
+		return DtiErrorPacket(out);
+
+	if (in->payload[0] == 'v'
+		&& in->payload[1] == 'i'
+		&& in->payload[2] == 'g') {
+		/* respond with version information */
+
+		strcpy((char *)out->payload,
+				"nReturn=0 version=\"DTI " U_BOOT_VERSION "\"");
+	} else if (in->payload[0] == 'l'
+		&& in->payload[1] == 's'
+		&& in->payload[2] == 'g') {
+		/* make empty lsg response (required by the SysMon) */
+
+		strcpy((char *)out->payload, "nReturn=0");
+	} else {
+		debug("Received unsupported CLI request\n");
+		return DtiErrorPacket(out);
+	}
+
+	out->header.error = DTI_eNoError;
+	out->header.payloadSize = strlen((char *)out->payload) + 1;
+	return out->header.payloadSize;
+}
+
+/** Handle "Firmware download start" DTI packet
+ *
+ * \param[in,out] Input & output packet
+ *
+ * \return Payload size of output packet
+ */
+static inline unsigned int DtiFwStart(DTI_Packet_t *in, DTI_Packet_t *out)
+{
+	DTI_H2D_ImageLoadStart_t *recv =
+		(DTI_H2D_ImageLoadStart_t *)in->payload;
+	DTI_D2H_ImageLoadStart_t *send =
+		(DTI_D2H_ImageLoadStart_t *)out->payload;
+
+	if (recv->imageSize > DTI_FW_SIZE_MAX) {
+		debug("Received load FW request with size %u, but maximum "
+			"allowed size is %u\n", recv->imageSize,
+			DTI_FW_SIZE_MAX);
+		return DtiErrorPacket(out);
+	}
+
+	dti_state = DTI_STATE_FW;
+
+	dti_fw_id = recv->imageNum;
+	dti_fw_size = recv->imageSize;
+	dti_fw_valid = 0;
+
+	/* TODO check maximum allowed chunk size */
+	send->maxChunkSize = 0xffff;
+
+	debug("Received FW download request; FW id=%u, FW size=%u FW max "
+			"chunk=%u\n", dti_fw_id, dti_fw_size, DTI_FW_SIZE_MAX);
+
+	out->header.error = DTI_eNoError;
+	out->header.payloadSize = sizeof(*send);
+	return out->header.payloadSize;
+}
+
+/** Handle "Firmware download chunk" DTI packet
+ *
+ * \param[in,out] Input & output packet
+ *
+ * \return Payload size of output packet
+ */
+static inline unsigned int DtiFwChunk(DTI_Packet_t *in, DTI_Packet_t *out)
+{
+	DTI_H2D_ImageLoadChunk_t *chunk =
+		(DTI_H2D_ImageLoadChunk_t *)in->payload;
+
+	if (dti_state != DTI_STATE_FW)
+		return DtiErrorPacket(out);
+
+	if (chunk->offset + chunk->chunkSize > dti_fw_size) {
+		debug("Received chunk with invalid offset=%u and/or size=%u\n",
+				chunk->offset, chunk->chunkSize);
+		return DtiErrorPacket(out);
+	}
+
+	memcpy(dti_fw + chunk->offset, chunk->data, chunk->chunkSize);
+
+	if (chunk->offset + chunk->chunkSize == dti_fw_size) {
+		dti_state = DTI_STATE_DEFAULT;
+		debug("Received FW image #%u\n", dti_fw_id);
+		dti_fw_valid = 1;
+	}
+
+	debug("chunk offset=%u size=%u\n", chunk->offset, chunk->chunkSize);
+
+	out->header.error = DTI_eNoError;
+	out->header.payloadSize = 0;
+	return out->header.payloadSize;
+}
+
+/** Handle "Device download" DTI packet
+ *
+ * \param[in,out] Input & output packet
+ *
+ * \return Payload size of output packet
+ */
+static inline unsigned int DtiFwStore(DTI_Packet_t *in, DTI_Packet_t *out)
+{
+	DTI_H2D_DeviceDownload_t *recv =
+		(DTI_H2D_DeviceDownload_t *)in->payload;
+	DTI_D2H_DeviceDownload_t *send =
+		(DTI_D2H_DeviceDownload_t *)out->payload;
+
+	if (!dti_fw_valid)
+		return DtiErrorPacket(out);
+
+	if (recv->imageNum != dti_fw_id) {
+		send->errorMask = recv->loadMask;
+
+		out->header.error = DTI_eNoError;
+		out->header.payloadSize = sizeof(*send);
+		return out->header.payloadSize;
+	}
+
+	debug("Trying to store FW image #%u...\n", dti_fw_id);
+
+	/** TODO */
+
+	debug("Successfully stored FW image\n");
+
+	send->errorMask = 0;
+
+	out->header.error = DTI_eNoError;
+	out->header.payloadSize = sizeof(*send);
+	return out->header.payloadSize;
+}
+
+/** Main DTI packet handler
+ *
+ * \param[in,out] Input & output packet
+ *
+ * \return Payload size of output packet
+ */
+static inline unsigned int DtiPacketHandle(DTI_Packet_t *in, DTI_Packet_t *out)
+{
+	uint32_t group;
+
+	if (in->header.magic != DTI_MAGIC) {
+		debug("Received DTI packet with bad magic number\n");
+		return 0;
+	}
+
+	group = in->header.packetType & 0xffff0000;
+
+#if 0
+	{
+		int i;
+
+		debug("\nIncoming DTI packet:\n");
+		debug("\tmagic\t= 0x%x\n", in->header.magic);
+		debug("\tgroup\t= 0x%x\n", group);
+		debug("\ttype\t= 0x%x\n", in->header.packetType);
+		debug("\topts\t= 0x%x\n", in->header.packetOptions);
+		debug("\tport\t= 0x%x\n", in->header.port);
+		debug("\ttan\t= 0x%x\n", in->header.tan);
+		debug("\terror\t= 0x%x\n", in->header.error);
+		debug("\tsize\t= 0x%x\n", in->header.payloadSize);
+
+		debug("\tdata\t= ");
+		for (i = 0; i < in->header.payloadSize; i++) {
+			debug("%02x ", in->payload[i]);
+		}
+
+		debug("\n");
+	}
+#endif
+
+	if (in != out)
+		memcpy(out, in, sizeof(DTI_PacketHeader_t));
+
+	if (group == DTI_GROUP_CLI_ACCESS) {
+		return DtiCli(in, out);
+	} else {
+		switch (in->header.packetType) {
+			case DTI_PacketType_eImageLoadChunk:
+				return DtiFwChunk(in, out);
+
+			case DTI_PacketType_eImageLoadStart:
+				return DtiFwStart(in, out);
+
+			case DTI_PacketType_eDeviceDownload:
+				return DtiFwStore(in, out);
+
+			default:
+				return DtiErrorPacket(out);
+		}
+	}
+}
+
+static void DtiTimeout(void)
+{
+	puts(".");
+	NetSetTimeout(TIMEOUT, DtiTimeout);
+}
+
+static void DtiHandler(uchar *pkt, unsigned dest, unsigned src, unsigned len)
+{
+	static uchar client_ether[6];
+	IP_t *ip = (IP_t *)(NetRxPacket + ETHER_HDR_SIZE);
+
+	if (dest != dti_port)
+		return;
+
+	len = DtiPacketHandle((DTI_Packet_t *)pkt, (DTI_Packet_t *)(NetTxPacket
+			+ NetEthHdrSize() + IP_HDR_SIZE));
+
+	memcpy(client_ether, ((Ethernet_t *)NetRxPacket)->et_src, 6);
+	NetSendUDPPacket(client_ether, NetReadIP(&ip->ip_src), src, dti_port,
+			sizeof(DTI_PacketHeader_t) + len);
+}
+
+void DtiStart(void)
+{
+	printf("Lantiq UDP DTI agent; our address is %pI4:%u\n",
+			&NetOurIP, dti_port);
+
+	NetSetHandler(DtiHandler);
+	NetSetTimeout(TIMEOUT, DtiTimeout);
+}
+
+#endif
diff --git a/net/net.c b/net/net.c
--- a/net/net.c
+++ b/net/net.c
@@ -109,6 +109,9 @@ extern int upload_running;
 void NetReceiveHttpd(volatile uchar * inpkt, int len);
 void NetSendHttpd(void);
 #endif
+#if defined(CONFIG_CMD_DTI)
+#include "dti.h"
+#endif
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -510,6 +513,11 @@ restart:
 			DnsStart();
 			break;
 #endif
+#if defined(CONFIG_CMD_DTI)
+		case UDP_DTI:
+			DtiStart();
+			break;
+#endif
 		default:
 			break;
 		}
