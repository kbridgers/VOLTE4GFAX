add falcon boards (easy980x0, ...)

diff --git a/board/lantiq/easy980x0/Makefile b/board/lantiq/easy980x0/Makefile
new file mode 100644
--- /dev/null
+++ b/board/lantiq/easy980x0/Makefile
@@ -0,0 +1,45 @@
+#
+# (C) Copyright 2003-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).o
+
+COBJS	:= $(BOARD).o
+#SOBJS	:= lowlevel_init.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff --git a/board/lantiq/easy980x0/easy980x0.c b/board/lantiq/easy980x0/easy980x0.c
new file mode 100644
--- /dev/null
+++ b/board/lantiq/easy980x0/easy980x0.c
@@ -0,0 +1,415 @@
+/*
+ * (C) Copyright 2011
+ * Thomas Langer, Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * (C) Copyright 2003
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <netdev.h>
+#include <asm/addrspace.h>
+#include <asm/reboot.h>
+#include <asm/io.h>
+#include <asm/falcon.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/sysctrl.h>
+#include <asm/arch/net.h>
+#if defined(CONFIG_CMD_HTTPD)
+#include <httpd.h>
+#endif
+
+struct easy98000_reg_cpld {
+	u16 cmdreg1;		/* 0x1 */
+	u16 cmdreg0;		/* 0x0 */
+	u16 idreg0;		/* 0x3 */
+	u16 resreg;		/* 0x2 */
+	u16 intreg;		/* 0x5 */
+	u16 idreg1;		/* 0x4 */
+	u16 ledreg;		/* 0x7 */
+	u16 pcmconconfig;	/* 0x6 */
+	u16 res0;		/* 0x9 */
+	u16 ethledreg;		/* 0x8 */
+	u16 res1[4];		/* 0xa-0xd */
+	u16 cpld1v;		/* 0xf */
+	u16 cpld2v;		/* 0xe */
+};
+static struct easy98000_reg_cpld * const cpld = (struct easy98000_reg_cpld *)(KSEG1 | 0x17c00000);
+#define cpld_r8(reg)	\
+		(readw(&cpld->reg) & 0xFF)
+#define cpld_w8(val, reg)	\
+		writew((val) & 0xFF, &cpld->reg)
+#define cpld_w8_mask(clear, set, reg)	\
+		cpld_w8((cpld_r8(reg) & ~(clear)) | (set), reg)
+
+#define XMK_STR(x)	#x
+#define MK_STR(x)	XMK_STR(x)
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static int dm9000_found;
+/* as default, use configured net port mask */
+static unsigned int falcon_net_mask = CONFIG_FALCON_NET_PORT_MASK;
+
+static int check_for_cpld(void)
+{
+	int ret = 0;
+#ifdef CONFIG_EASY980X0
+	u8 cmdreg1 = cpld_r8(cmdreg1);
+	cpld_w8(7, cmdreg1);
+
+	if ( (cpld_r8(cmdreg1) == 7) &&
+	     (cpld_r8(cpld1v) < 20) &&
+	     (cpld_r8(cpld2v) < 10) ) {
+		/* cpld available */
+		ret = 1;
+	}
+
+	/* restore reg val */
+	cpld_w8(cmdreg1, cmdreg1);
+#endif
+	return ret;
+}
+
+phys_size_t initdram(int board_type)
+{
+#ifdef CONFIG_SYS_IN_INTERNAL_RAM
+	puts("(internal) ");
+	return CONFIG_SYS_MAX_INTERNAL_RAM;
+#else
+	return falcon_ddr_init();
+#endif /* CONFIG_SYS_IN_INTERNAL_RAM */
+}
+
+int checkboard (void)
+{
+	char buf[64];
+	int i = getenv_f("serial#", buf, sizeof(buf));
+
+	puts ("Board: " MK_STR(BOARD_NAME_LINUX));
+	if (i > 0) {
+		puts(", serial# ");
+		puts(buf);
+	}
+	putc('\n');
+
+	print_chip_info();
+
+	if (check_for_cpld()) {
+		printf("CPLD1: V%d\n", cpld_r8(cpld1v));
+		printf("CPLD2: V%d\n", cpld_r8(cpld2v));
+	}
+
+	return 0;
+}
+
+int board_early_init_f(void)
+{
+	/* activate some basic hardware modules */
+	falcon_early_init_f();
+
+	if (check_for_cpld()) {
+#ifdef CONFIG_FLASH_CFI_DRIVER
+		/* NOR flash based config */
+		cpld_w8(0x01, cmdreg1);
+#elif defined (CONFIG_SPI_FLASH)
+		/* SPI flash based config */
+		cpld_w8(0x04, cmdreg1);
+#elif defined (CONFIG_NAND)
+		/* NAND flash based config */
+		cpld_w8(0x02, cmdreg1);
+#else
+		/* "no flash" config */
+#endif
+	}
+
+	return 0;
+}
+
+int misc_init_r(void)
+{
+	u8 addon_id;
+	char *s = NULL;
+	int need_1V5 = 0;
+
+	load_default_ethaddr();
+
+	if (check_for_cpld()) {
+		addon_id = cpld_r8(idreg0) & 0xF;
+		switch (addon_id) {
+		case 0xF: /* nothing connected */
+			break;
+		case 1:
+			puts("EBU:   Ethernet Controller module (dm9000) connected\n");
+			dm9000_found = 1;
+			break;
+		default:
+			printf("EBU:   unknown module (EBU_ID=0x%02X) found\n", addon_id);
+			break;
+		}
+		addon_id = cpld_r8(idreg1) & 0xF;
+		falcon_net_mask = FALCON_NET_PORT_MASK_GPHY;
+		switch (addon_id) {
+		case 0xF:
+			s = "no module";
+			break;
+		case 0x1:
+			s = "RGMII module";
+			falcon_net_mask |= FALCON_NET_PORT_MASK_RGMII;
+			break;
+		case 0x4:
+			s = "GMII MAC Mode (XWAY TANTOS-3G)";
+			need_1V5 = 1;
+			falcon_net_mask |= FALCON_NET_PORT_MASK_GMII;
+			break;
+		case 0x5:
+			s = "MII MAC Mode (XWAY TANTOS-3G)";
+			need_1V5 = 1;
+			falcon_net_mask |= FALCON_NET_PORT_MASK_MII;
+			break;
+		case 0x6:
+			s = "TMII MAC Mode (XWAY TANTOS-3G)";
+			need_1V5 = 1;
+			falcon_net_mask |= FALCON_NET_PORT_MASK_MII;
+			break;
+		case 0x8:
+			s = "GMII PHY module";
+			falcon_net_mask |= FALCON_NET_PORT_MASK_GMII_MAC;
+			break;
+		case 0x9:
+			s = "MII PHY module";
+			falcon_net_mask |= FALCON_NET_PORT_MASK_MII_MAC;
+			break;
+		case 0xA:
+			s = "RMII PHY module";
+			falcon_net_mask |= FALCON_NET_PORT_MASK_MII_MAC;
+			break;
+		default:
+			s = NULL;
+			break;
+		}
+		if (addon_id != 0xF) {
+			if (s)
+				printf("xMII:  %s connected\n", s);
+			else
+				printf("xMII:  unknown module (xMII_ID=0x%X) found\n", addon_id);
+		}
+
+		addon_id = cpld_r8(idreg1)>>4 & 0xF;
+		switch (addon_id) {
+		case 0xF:
+			s = "no module";
+			break;
+		case 0x1:
+			s = "SGMII module";
+			falcon_net_mask |= FALCON_NET_PORT_MASK_SGMII;
+			break;
+		default:
+			s = NULL;
+			break;
+		}
+		/*if (addon_id != 0xF) */{
+			if (s)
+				printf("SGMII: %s connected\n", s);
+			else
+				printf("SGMII: unknown module (SGMII_ID=0x%X) found\n", addon_id);
+		}
+
+		if (need_1V5) {
+			/* enable 1.5 V */
+			sys1_w32_mask (INFRAC_LIN1V5EN | INFRAC_LIN1V5C_MASK,
+				INFRAC_LIN1V5EN_EN | (3 << INFRAC_LIN1V5C_OFFSET),
+				infrac);
+		}
+	}
+
+	/* misc settings on SoC level */
+	falcon_misc_init_r();
+
+#ifndef CONFIG_SYS_NO_DDR_INIT
+
+#ifdef CONFIG_SYS_IN_INTERNAL_RAM
+	/* we are running from internal ram and delay ddr init to this point */
+	puts ("DDR:  ");
+	/* size of external DDR memory in bytes */
+#ifdef DDR_STATIC_INIT
+	gd->bd->bi_memsize = falcon_ddr_static_init();
+#else
+	gd->bd->bi_memsize = falcon_ddr_init();
+#endif
+	/* start of external DDR memory */
+	gd->bd->bi_memstart = CONFIG_SYS_DDR_BASE;
+	print_size (gd->bd->bi_memsize, "\n");
+#endif /* CONFIG_SYS_IN_INTERNAL_RAM */
+
+#endif /* CONFIG_SYS_NO_DDR_INIT */
+
+#if defined(CONFIG_STATUS_LED) && defined(STATUS_LED_BOOT)
+	status_led_set(STATUS_LED_BOOT, STATUS_LED_BLINKING);
+#endif
+
+	return 0;
+}
+
+int board_eth_init(bd_t *bis)
+{
+	int ret = 0;
+#if defined(CONFIG_FALCON_ETH)
+	ret += falcon_net_register(falcon_net_mask);
+
+	if (check_for_cpld()) {
+		/* remove reset from SGMII module
+		   after clock-out is active! */
+		if (cpld_r8(cpld1v) < 9)
+			cpld_w8_mask(0, 0x40, resreg);
+		else
+			cpld_w8_mask(0x40, 0, resreg);
+	}
+#endif
+#ifdef CONFIG_DRIVER_DM9000
+	if (dm9000_found) {
+		ret += dm9000_initialize(bis);
+		/* always enable on eval-board without further settings */
+		falcon_extphy_enable(1);
+	}
+#endif
+	return ret;
+}
+
+#ifdef CONFIG_SHOW_BOOT_PROGRESS
+# if defined(STATUS_LED_BOOT)
+static void set_all_led(int state)
+{
+	int i;
+	for (i=0; i<4; i++) {
+		status_led_set (i, state);
+	}
+}
+#endif
+
+void show_boot_progress (int status)
+{
+	debug("boot_progress: %i\n", status);
+#if defined(CONFIG_STATUS_LED)
+# if defined(STATUS_LED_BOOT)
+	unsigned int i;
+	switch (status) {
+	case 15: /* before jumping to OS */
+		status_led_set (STATUS_LED_BOOT, STATUS_LED_ON);
+		break;
+	case 70: /* (automatic) httpd start */
+		/* activate all LEDs */
+		set_all_led (STATUS_LED_ON);
+		break;
+	case -70: /* http upgrade failed */
+		/* blink all LEDs */
+		for (i=0; i<20; i++) {
+			set_all_led (STATUS_LED_ON);
+			udelay(250000);
+			set_all_led (STATUS_LED_OFF);
+			udelay(250000);
+		}
+		break;
+	case 71: /* http upgrade success */
+		set_all_led (STATUS_LED_OFF);
+		break;
+	default:
+		break;
+	}
+# endif	/* STATUS_LED_BOOT */
+#endif /* CONFIG_STATUS_LED */
+}
+#endif /* CONFIG_SHOW_BOOT_PROGRESS */
+
+#if defined(CONFIG_CMD_HTTPD)
+int do_http_upgrade(const unsigned char *data, const ulong size)
+{
+	char buf[128];
+
+	if (getenv ("ram_addr") == NULL)
+		return -1;
+#if defined(CONFIG_NAND) || defined(CONFIG_SPI_FLASH)
+	if (getenv ("kernel_offs") == NULL)
+		return -1;
+#else
+	if (getenv ("kernel_addr") == NULL)
+		return -1;
+#endif
+	/* check the image */
+	if (run_command("imi ${ram_addr}", 0) < 0)
+		return -1;
+
+	/* write the image to the flash */
+	puts("http upgrade ...\n");
+
+#if defined(CONFIG_NAND)
+	sprintf(buf, "nand erase.spread ${kernel_offs} 0x%lx;"
+		"nand write ${ram_addr} ${kernel_offs} 0x%lx", size, size);
+#elif defined(CONFIG_SPI_FLASH)
+	sprintf(buf,
+		"sf probe 0;"
+		"sf erase ${kernel_offs} 0x%lx;"
+		"sf write ${ram_addr} ${kernel_offs} 0x%lx", size, size);
+#else
+	sprintf(buf,
+		"era ${kernel_addr} +0x%lx;"
+		"cp.b ${ram_addr} ${kernel_addr} 0x%lx", size, size);
+#endif
+
+	return run_command(buf, 0) < 0;
+}
+
+int do_http_progress(const int state)
+{
+	/* toggle LED's here */
+	switch (state) {
+	case HTTP_PROGRESS_START:
+		puts("http start\n");
+		break;
+	case HTTP_PROGRESS_TIMEOUT:
+		puts(".");
+		break;
+	case HTTP_PROGRESS_UPLOAD_READY:
+		puts("http upload ready\n");
+		break;
+	case HTTP_PROGRESS_UGRADE_READY:
+		puts("http upgrade ready\n");
+		show_boot_progress(71);
+		break;
+	case HTTP_PROGRESS_UGRADE_FAILED:
+		puts("http upgrade failed\n");
+		show_boot_progress(-70);
+		break;
+	}
+	return 0;
+}
+
+unsigned long do_http_tmp_address(void)
+{
+	char *s = getenv ("ram_addr");
+	if (s) {
+		ulong tmp = simple_strtoul (s, NULL, 16);
+		return tmp;
+	}
+	return 0 /*0x80a00000*/;
+}
+
+#endif
diff --git a/board/lantiq/easy980x0/lowlevel_init.S b/board/lantiq/easy980x0/lowlevel_init.S
new file mode 100644
--- /dev/null
+++ b/board/lantiq/easy980x0/lowlevel_init.S
@@ -0,0 +1,54 @@
+/*
+ *  Memory sub-system initialization code for Danube board.
+ *  Andre Messerschmidt
+ *  Copyright (c) 2005	Infineon Technologies AG
+ *
+ *  Based on Inca-IP code
+ *  Copyright (c) 2003	Wolfgang Denk <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+#include <config.h>
+#include <version.h>
+#include <asm/regdef.h>
+
+	.set	noreorder
+
+
+	.globl	lowlevel_init
+	.ent	lowlevel_init
+lowlevel_init:
+	/* EBU, CGU and SDRAM/DDR-RAM Initialization.
+	 */
+	move	t0, ra
+	/* We rely on the fact that non of the following ..._init() functions
+	 * modify t0
+	 */
+
+/*
+  here the lowlevel_init code must be included:
+  - DDR-RAM initialization
+  - clock and module enable (SYS1...)
+*/
+
+	move	ra, t0
+	j	ra
+	nop
+
+	.end	lowlevel_init
diff --git a/boards.cfg b/boards.cfg
--- a/boards.cfg
+++ b/boards.cfg
@@ -352,6 +352,17 @@ easy50712_DDR166M            mips       
 easy50712_DDR166M_ramboot    mips        mips32      easy50712           infineon       danube      easy50712:SYS_RAMBOOT
 easy50812_DDR166M            mips        mips32      easy50812           infineon       ar9         easy50812:USE_DDR_RAM,USE_DDR_RAM_CFG_166M
 easy50812_DDR166M_ramboot    mips        mips32      easy50812           infineon       ar9         easy50812:SYS_RAMBOOT
+95c3am1                      mips        mips32      easy980x0           lantiq         falcon
+easy98020                    mips        mips32      easy980x0           lantiq         falcon
+easy980x0                    mips        mips32      easy980x0           lantiq         falcon
+easy980x0_netboot            mips        mips32      easy980x0           lantiq         falcon
+easy980x0_nandflash          mips        mips32      easy980x0           lantiq         falcon
+easy980x0_norflash           mips        mips32      easy980x0           lantiq         falcon
+easy980x0_serialflash        mips        mips32      easy980x0           lantiq         falcon
+easy980x0_emul               mips        mips32      easy980x0           lantiq         falcon      easy980x0_emul
+easy980x0_emul_venus         mips        mips32      easy980x0           lantiq         falcon      easy980x0_emul:VENUS
+easy980x0_nandflash_emul     mips        mips32      easy980x0           lantiq         falcon      easy980x0_emul:NAND
+easy980x0_serialflash_emul   mips        mips32      easy980x0           lantiq         falcon      easy980x0_emul:SPI_FLASH
 gth2                         mips        mips32      -                   -              au1x00
 pb1000                       mips        mips32      pb1x00              -              au1x00      pb1x00:PB1000
 incaip                       mips        mips32      incaip              -              incaip
diff --git a/include/configs/95c3am1.h b/include/configs/95c3am1.h
new file mode 100644
--- /dev/null
+++ b/include/configs/95c3am1.h
@@ -0,0 +1,143 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/* select flash type */
+#define CONFIG_SPI_FLASH
+
+/* enable support for stmicro/numonyx/micron flashes */
+#define CONFIG_SPI_FLASH_STMICRO
+
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_SYS_REDUNDAND_ENVIRONMENT
+
+#define CONFIG_SF_DEFAULT_SPEED		50000000
+#define CONFIG_ENV_SPI_MAX_HZ		50000000
+
+#define CONFIG_ENV_SIZE			0x10000
+#define CONFIG_ENV_SECT_SIZE		0x10000
+#define CONFIG_ENV_OFFSET		0x40000
+#define CONFIG_ENV_OFFSET_REDUND	CONFIG_ENV_OFFSET + CONFIG_ENV_SECT_SIZE
+
+#define ENV_UPDATE_UBOOT \
+	"load_uboot=tftp ${ram_addr} ${tftppath}u-boot.img\0" \
+	"save_uboot=sf probe 0;" \
+		"sf erase 0 40000;" \
+		"sf write ${ram_addr} 0 ${filesize}\0" \
+	"update_uboot=run load_uboot save_uboot\0" \
+	"reset_uboot_env=sf probe 0;sf erase 40000 20000\0"
+
+#define IMAGE0_ADDR    0xB0060000
+#define KERNEL0_OFFS   0x60000
+#define IMAGE0_SIZE    3904
+
+#define IMAGE1_ADDR    0xB03D0000
+#define KERNEL1_OFFS   0x3D0000
+#define IMAGE1_SIZE    3904
+
+#define ENV_TWO_IMAGES \
+	"image0_addr=" MK_STR(IMAGE0_ADDR) "\0" \
+	"image1_addr=" MK_STR(IMAGE1_ADDR) "\0" \
+	"kernel0_offs=" MK_STR(KERNEL0_OFFS) "\0" \
+	"kernel1_offs=" MK_STR(KERNEL1_OFFS) "\0" \
+	"max_kernel_size=180000\0" \
+	"kernel0_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel0_offs} ${max_kernel_size}\0" \
+	"kernel1_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel1_offs} ${max_kernel_size}\0" \
+	"boot_image0=" \
+		"run kernel0_from_sf flashargs addip addmtdparts0 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image1=" \
+		"run kernel1_from_sf flashargs addip addmtdparts1 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image_err=" \
+		"setenv kernel_offs ${kernel0_offs};" \
+		"httpd && setenv image0_is_valid 1\0" \
+	"boot_image=run boot_image${c_img};\0"
+
+#define ENV_UPDATE_IMAGE \
+	"update_image0=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel0_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel0_offs} ${filesize}\0" \
+	"update_image1=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel1_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel1_offs} ${filesize}\0"
+
+#define ENV_MTDPARTS \
+	"addmtdparts0=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"128(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(linux)," \
+		MK_STR(IMAGE1_SIZE)	"k(image1)\0" \
+	"addmtdparts1=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"128k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(image0)," \
+		MK_STR(IMAGE1_SIZE)	"k(linux)\0"
+
+#define ENV_FLASH_BOOT \
+	"flash_flash=run select_image boot_image\0"
+
+#define BOARD_NAME_LINUX	95C3AM1
+
+/* 95C3AM1 Board */
+#define CONFIG_95C3AM1
+
+#define CONFIG_CMD_HTTPD	/* enable upgrade via HTTPD */
+
+#define CONFIG_HTTP_RECOVER_GPIO	1
+#define CONFIG_HTTP_RECOVER_GPIO_LEVEL	0
+
+/*
+ * LED setup for 95C3AM1 board
+ */
+#define CONFIG_BOARD_SPECIFIC_LED
+#define CONFIG_GPIO_LED
+#define CONFIG_STATUS_LED
+
+#define FALCON_GPIO_LED_0	10
+#define FALCON_GPIO_LED_1	11
+#define FALCON_GPIO_LED_2	12
+#define FALCON_GPIO_LED_3	13
+
+#define STATUS_LED_BIT		FALCON_GPIO_LED_0
+#define STATUS_LED_STATE	STATUS_LED_OFF
+#define STATUS_LED_PERIOD	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT1		FALCON_GPIO_LED_1
+#define STATUS_LED_STATE1	STATUS_LED_OFF
+#define STATUS_LED_PERIOD1	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT2		FALCON_GPIO_LED_2
+#define STATUS_LED_STATE2	STATUS_LED_OFF
+#define STATUS_LED_PERIOD2	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT3		FALCON_GPIO_LED_3
+#define STATUS_LED_STATE3	STATUS_LED_OFF
+#define STATUS_LED_PERIOD3	(CONFIG_SYS_HZ / 10)
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/easy98020.h b/include/configs/easy98020.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy98020.h
@@ -0,0 +1,160 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/* select flash type */
+#define CONFIG_SPI_FLASH
+
+/* enable support for all possible flashes */
+#define CONFIG_SPI_FLASH_ATMEL
+#define CONFIG_SPI_FLASH_MACRONIX
+#define CONFIG_SPI_FLASH_SPANSION
+#define CONFIG_SPI_FLASH_SST
+#define CONFIG_SPI_FLASH_WINBOND
+#define CONFIG_SPI_FLASH_STMICRO
+
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_SYS_REDUNDAND_ENVIRONMENT
+
+#define CONFIG_SF_DEFAULT_SPEED		50000000
+#define CONFIG_ENV_SPI_MAX_HZ		50000000
+
+#define CONFIG_ENV_SIZE			0x10000
+#define CONFIG_ENV_SECT_SIZE		0x40000
+#define CONFIG_ENV_OFFSET		0x40000
+#define CONFIG_ENV_OFFSET_REDUND	CONFIG_ENV_OFFSET + CONFIG_ENV_SECT_SIZE
+
+#define ENV_UPDATE_UBOOT \
+	"load_uboot=tftp ${ram_addr} ${tftppath}u-boot.img\0" \
+	"save_uboot=sf probe 0;" \
+		"sf erase 0 40000;" \
+		"sf write ${ram_addr} 0 ${filesize}\0" \
+	"update_uboot=run load_uboot save_uboot\0" \
+	"reset_uboot_env=sf probe 0;sf erase 40000 80000\0"
+
+#define IMAGE0_ADDR    0xB00C0000
+#define KERNEL0_OFFS   0xC0000
+#define IMAGE0_SIZE    7424
+
+#define IMAGE1_ADDR    0xB0800000
+#define KERNEL1_OFFS   0x800000
+#define IMAGE1_SIZE    8192
+
+#define ENV_TWO_IMAGES \
+	"image0_addr=" MK_STR(IMAGE0_ADDR) "\0" \
+	"image1_addr=" MK_STR(IMAGE1_ADDR) "\0" \
+	"kernel0_offs=" MK_STR(KERNEL0_OFFS) "\0" \
+	"kernel1_offs=" MK_STR(KERNEL1_OFFS) "\0" \
+	"max_kernel_size=180000\0" \
+	"kernel0_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel0_offs} ${max_kernel_size}\0" \
+	"kernel1_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel1_offs} ${max_kernel_size}\0" \
+	"boot_image0=" \
+		"run kernel0_from_sf flashargs addip addmtdparts0 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image1=" \
+		"run kernel1_from_sf flashargs addip addmtdparts1 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image_err=" \
+		"setenv kernel_offs ${kernel0_offs};" \
+		"httpd && setenv image0_is_valid 1\0" \
+	"boot_image=run boot_image${c_img};\0"
+
+#define ENV_UPDATE_IMAGE \
+	"update_image0=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel0_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel0_offs} ${filesize}\0" \
+	"update_image1=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel1_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel1_offs} ${filesize}\0"
+
+#define ENV_MTDPARTS \
+	"addmtdparts0=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(linux)," \
+		MK_STR(IMAGE1_SIZE)	"k(image1)\0" \
+	"addmtdparts1=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(image0)," \
+		MK_STR(IMAGE1_SIZE)	"k(linux)\0"
+
+#define ENV_FLASH_BOOT \
+	"flash_flash=run select_image boot_image\0"
+
+#define ENV_ETHROTATE ""
+
+#define CONFIG_OVERWRITE_ETHADDR_ONCE
+
+#define ENV_EXT_PHY \
+	"extphy=1\0" \
+	"rgmii0_phyaddr=5\0" \
+	"rgmii1_phyaddr=6\0"
+
+#define CONFIG_FALCON_NET_PORT_MASK \
+	(FALCON_NET_PORT_MASK_GPHY | FALCON_NET_PORT_MASK_RGMII)
+
+#define BOARD_NAME_LINUX	EASY98020
+
+/* Falcon Reference Board */
+#define CONFIG_EASY98020
+
+#define CONFIG_CMD_HTTPD	/* enable upgrade via HTTPD */
+
+#define CONFIG_HTTP_RECOVER_GPIO	1
+#define CONFIG_HTTP_RECOVER_GPIO_LEVEL	0
+
+/*
+ * LED setup for FALCON reference board
+ */
+#define CONFIG_BOARD_SPECIFIC_LED
+#define CONFIG_GPIO_LED
+#define CONFIG_STATUS_LED
+
+#define FALCON_GPIO_LED_0	9
+#define FALCON_GPIO_LED_1	10
+#define FALCON_GPIO_LED_2	11
+#define FALCON_GPIO_LED_3	12
+
+#define STATUS_LED_BIT		FALCON_GPIO_LED_0
+#define STATUS_LED_STATE	STATUS_LED_OFF
+#define STATUS_LED_PERIOD	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT1		FALCON_GPIO_LED_1
+#define STATUS_LED_STATE1	STATUS_LED_OFF
+#define STATUS_LED_PERIOD1	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT2		FALCON_GPIO_LED_2
+#define STATUS_LED_STATE2	STATUS_LED_OFF
+#define STATUS_LED_PERIOD2	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT3		FALCON_GPIO_LED_3
+#define STATUS_LED_STATE3	STATUS_LED_OFF
+#define STATUS_LED_PERIOD3	(CONFIG_SYS_HZ / 10)
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/easy980x0.h b/include/configs/easy980x0.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0.h
@@ -0,0 +1,214 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * This file contains the configuration parameters for the Falcon evaluation board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#define CONFIG_MIPS32		/* MIPS32 CPU compatible	*/
+#define CONFIG_MIPS34KC		/* MIPS 34Kc CPU core		*/
+#define CONFIG_FALCON		/*  in a FALCON Chip		*/
+
+#ifndef BOARD_NAME_LINUX
+#define BOARD_NAME_LINUX	EASY98000
+#endif
+
+/*
+ * FALCON eval board has external PHY addon modules
+ * This are some default settings for it.
+ */
+#ifdef CONFIG_EASY980X0
+#define ENV_EXT_PHY \
+	"extphy=1\0" \
+	"rgmii0_phyaddr=4\0" \
+	"rgmii1_phyaddr=5\0" \
+	"sgmii_phyaddr=6\0" \
+	"sgmii_inv=1\0"
+#endif
+
+#define ENV_ADDVOICE " vpe1_load_addr=0x81f00000 vpe1_mem=1M mem=63M"
+
+#define CONFIG_USE_ASC0
+
+#ifndef CONFIG_FLASH_CFI_DRIVER
+/* for configs without nor flash (e.g. nand or spi!) */
+#define CONFIG_SYS_NO_FLASH
+#endif
+
+#if !defined(CONFIG_ENV_SIZE)
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE			0x1000
+#endif
+
+#define CONFIG_SKIP_LOWLEVEL_INIT
+//#define CONFIG_SYS_INIT_RAM_LOCK_MIPS
+
+#define CONFIG_SYS_HUSH_PARSER		/* Use the HUSH parser */
+
+//#define CONFIG_SYS_ALT_MEMTEST
+
+/* memory is big enough for this range */
+#define CONFIG_SYS_MEMTEST_START	0x80000000
+#define CONFIG_SYS_MEMTEST_END		0x82000000
+
+/*
+ * Include common defines/options for all FALCON boards
+ */
+#include "falcon-common.h"
+
+/*
+ * define ddr hardware setup (board specific, same on all FALCON boards)
+ */
+#define DDR_CHIP_TYPE		2
+#define DDR_CHIP_CAS_LATENCY	4
+
+/*
+ * define parameter (e.g. timing) of the ddr memory chip
+ * -> Samsung K4T51163QG HCE6 (512Mb)
+ */
+
+/* timings in ticks */
+#define DDR_DEVICE_T_CKE	3
+#define DDR_DEVICE_T_MRD	2
+#define DDR_DEVICE_T_DLL	200
+
+/* following timings are in ns */
+#define DDR_DEVICE_T_RRD	10
+#define DDR_DEVICE_T_RTP	7.5
+#define DDR_DEVICE_T_RP		15
+#define DDR_DEVICE_T_WR		16
+#define DDR_DEVICE_T_WTR	10
+#define DDR_DEVICE_T_RC		60
+#define DDR_DEVICE_T_FAW	50
+#define DDR_DEVICE_T_MOD	12
+#define DDR_DEVICE_T_RAS_MIN	45
+#define DDR_DEVICE_T_RFC	105
+#define DDR_DEVICE_T_RCD	15
+
+/* following value is in us */
+#define DDR_DEVICE_T_REF	7.8
+
+/* other values */
+#define DDR_DEVICE_APREBIT	10	/* A10 */
+#define DDR_DEVICE_INITAREF	2
+
+/*
+ * enable watchdog support
+ */
+#define CONFIG_HW_WATCHDOG
+#define CONFIG_LANTIQ_WATCHDOG
+
+/*
+ * enable/disable some additional features (e.g. net)
+ */
+#define CONFIG_NET_MULTI
+#define CONFIG_FALCON_ETH
+
+#ifdef CONFIG_OVERWRITE_ETHADDR_ONCE
+#ifndef CONFIG_ETHADDR
+/* define default mac and allow one overwrite */
+#define CONFIG_ETHADDR				ac:9a:96:00:00:00
+#endif
+#endif
+/* only one variable (ethaddr) for all interfaces */
+#define CONFIG_SINGLE_ETHADDR
+
+#define CONFIG_MII
+#define CONFIG_CMD_MII
+
+#ifdef CONFIG_DRIVER_DM9000
+/* settings for DM9000 driver (for EBU Add-on Ethernet Controller Module) */
+//#define CONFIG_DM9000_DEBUG
+#define CONFIG_DM9000_SWAP16
+#define CONFIG_DM9000_NO_SROM
+
+#define CONFIG_DM9000_BASE		0xB4000000
+#define DM9000_IO			(CONFIG_DM9000_BASE + 2)
+#define DM9000_DATA			(CONFIG_DM9000_BASE + 0)
+#endif
+
+/*
+ * LED setup for FALCON eval board
+ */
+#ifdef CONFIG_EASY980X0
+#define CONFIG_BOARD_SPECIFIC_LED
+#define CONFIG_GPIO_LED
+#define CONFIG_STATUS_LED
+
+#define CONFIG_SHOW_BOOT_PROGRESS
+#define STATUS_LED_BOOT		0	/* LED 0 used for boot status */
+
+#define FALCON_GPIO_LED_0	9
+#define FALCON_GPIO_LED_1	10
+#define FALCON_GPIO_LED_2	11
+#define FALCON_GPIO_LED_3	12
+
+#define STATUS_LED_BIT		FALCON_GPIO_LED_0
+#define STATUS_LED_STATE	STATUS_LED_ON
+#define STATUS_LED_PERIOD	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT1		FALCON_GPIO_LED_1
+#define STATUS_LED_STATE1	STATUS_LED_OFF
+#define STATUS_LED_PERIOD1	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT2		FALCON_GPIO_LED_2
+#define STATUS_LED_STATE2	STATUS_LED_OFF
+#define STATUS_LED_PERIOD2	(CONFIG_SYS_HZ / 10)
+
+#define STATUS_LED_BIT3		FALCON_GPIO_LED_3
+#define STATUS_LED_STATE3	STATUS_LED_OFF
+#define STATUS_LED_PERIOD3	(CONFIG_SYS_HZ / 10)
+
+#endif
+
+#define CONFIG_SOFT_I2C
+/* define GPIOs for soft_i2c */
+#define CONFIG_SOFT_I2C_GPIO_SCL	108
+#define CONFIG_SOFT_I2C_GPIO_SDA	107
+
+/* enable i2c commands */
+#define CONFIG_CMD_I2C
+
+/* enable eeprom commands */
+#define CONFIG_CMD_EEPROM
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN	1
+/* allow to specify eeprom address on i2c bus */
+#define CONFIG_SYS_I2C_MULTI_EEPROMS
+
+#if 0
+/*
+  for environment in eeprom, the following settings must be provided
+  and some others removed (more details in README)
+ */
+#define CONFIG_ENV_IS_IN_EEPROM
+#define CONFIG_SYS_I2C_EEPROM_ADDR	0x50
+#endif
+
+#ifndef	CONFIG_SYS_I2C_SPEED
+#define	CONFIG_SYS_I2C_SPEED	50000
+#endif
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/easy980x0_emul.h b/include/configs/easy980x0_emul.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0_emul.h
@@ -0,0 +1,168 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * This file contains the configuration parameters for the Falcon on emulator.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#define CONFIG_MIPS32			/* MIPS32 CPU compatible	*/
+#define CONFIG_MIPS34KC			/* MIPS 34Kc CPU core		*/
+#define CONFIG_FALCON			/*  in a FALCON Chip		*/
+#define CONFIG_EASY980X0		/*   on the Evaluation Board	*/
+#define CONFIG_EMULATION		/* include support for running in emulation */
+
+#define BOARD_NAME_LINUX	EASY98000
+
+#define CONFIG_USE_ASC0
+
+//#define DEBUG
+
+//#define CONFIG_SYS_ALT_MEMTEST
+
+/* for emulation without nor flash */
+#define CONFIG_SYS_NO_FLASH
+
+#if !defined(CONFIG_ENV_IS_IN_NAND) && !defined(CONFIG_ENV_IS_IN_SPI_FLASH)
+#define CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE			0x1000
+#endif
+
+#define CONFIG_SYS_IN_INTERNAL_RAM
+
+#define CONFIG_SKIP_LOWLEVEL_INIT
+//#define CONFIG_SYS_INIT_RAM_LOCK_MIPS
+
+#undef CONFIG_SYS_HUSH_PARSER		/* Use the HUSH parser		*/
+
+#ifdef CONFIG_NAND
+#define CONFIG_CMD_NAND
+//#define CONFIG_SYS_NAND_QUIET_TEST		/* don't warn upon unknown NAND flash   */
+//#define CONFIG_SYS_NAND_QUIET			/* FIXME: enable later */
+#define CONFIG_CMD_NAND_LOCK_UNLOCK
+#endif
+
+#ifdef CONFIG_SPI_FLASH
+/* enable support for all possible flashes in emulation */
+#define CONFIG_SPI_FLASH_ATMEL
+#define CONFIG_SPI_FLASH_MACRONIX
+#define CONFIG_SPI_FLASH_SPANSION
+#define CONFIG_SPI_FLASH_SST
+#define CONFIG_SPI_FLASH_WINBOND
+#define CONFIG_SPI_FLASH_STMICRO
+#endif
+
+#ifdef CONFIG_VENUS
+/* some extra environment settings for emulation: load and start sce firmware */
+#define CONFIG_EXTRA_ENV_EMULATION	"fw=tftp 80000000 default.fw;sce init"
+#endif
+
+/*
+ * Include common defines/options for all FALCON boards
+ */
+#include "falcon-common.h"
+
+/*
+ * define ddr hardware setup (board specific)
+ */
+#define DDR_CHIP_TYPE		2
+#define DDR_CHIP_SIZE_MBIT	256
+#define DDR_CHIP_CAS_LATENCY	3
+
+#define DDR_CHIP_ROW_ADDR	12
+
+
+/*
+ * define parameter (e.g. timing) of the ddr memory chip
+ */
+ /* timings in ticks */
+#define DDR_DEVICE_T_CKE	3
+#define DDR_DEVICE_T_MRD	2
+#define DDR_DEVICE_T_DLL	200
+
+/* following timings are in ns */
+#define DDR_DEVICE_T_RRD	10
+#define DDR_DEVICE_T_RTP	7.5
+#define DDR_DEVICE_T_RP		15
+#define DDR_DEVICE_T_WR		16
+#define DDR_DEVICE_T_WTR	10
+#define DDR_DEVICE_T_RC		55
+#define DDR_DEVICE_T_FAW	50
+#define DDR_DEVICE_T_MOD	12
+#define DDR_DEVICE_T_RAS_MIN	40
+#define DDR_DEVICE_T_DAL	10
+#define DDR_DEVICE_T_RFC	75
+#define DDR_DEVICE_T_RCD	15
+
+/* following value is in us */
+#define DDR_DEVICE_T_REF	7.8
+
+/* other values */
+#define DDR_DEVICE_APREBIT	10	/* A10 */
+#define DDR_DEVICE_INITAREF	2
+
+/*
+ * enable/disable some additional features (e.g. net)
+ */
+
+#if 1
+#define CONFIG_NET_MULTI
+#define CONFIG_FALCON_ETH
+
+#define CONFIG_MII
+#define CONFIG_CMD_MII
+#else
+#undef CONFIG_CMD_NET
+#undef CONFIG_CMD_PING
+#endif
+
+//#define CONFIG_CMD_HTTPD		/* enable upgrade via HTTPD */
+//#define CONFIG_CMD_DTI		/* enable DTI agent support */
+
+#define CONFIG_SF_DEFAULT_SPEED		50000000
+
+#if 0
+#define CONFIG_HW_WATCHDOG
+#endif
+
+/* only for testing in emulation (Palladium/Venus) environment: */
+#ifdef CONFIG_VENUS
+#define CONFIG_IPADDR			192.168.152.171
+#define CONFIG_SERVERIP			192.168.152.150
+#define CONFIG_NETMASK			255.255.255.0
+#define CONFIG_GATEWAYIP		192.168.152.150
+#else
+#define CONFIG_IPADDR			192.168.152.170
+#define CONFIG_SERVERIP			192.168.153.10
+#define CONFIG_NETMASK			255.255.255.0
+#define CONFIG_GATEWAYIP		192.168.152.150
+#endif
+
+/* optimize some timeouts for emulation */
+#define CONFIG_ARP_TIMEOUT		5000UL
+#define CONFIG_NET_RETRY_COUNT		50
+
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/easy980x0_nandflash.h b/include/configs/easy980x0_nandflash.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0_nandflash.h
@@ -0,0 +1,122 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#define BOARD_NAME_LINUX	EASY98000NAND
+
+/* select flash type */
+#define CONFIG_NAND
+#define CONFIG_CMD_NAND
+
+/*
+ * for compatibility to the bootrom ECC code,
+ * we don't define CONFIG_MTD_NAND_ECC_SMC
+ */
+
+/* define hardware flash organization for bootrom image */
+#define CONFIG_SYS_NAND_PAGESIZE		0x00000800
+#define CONFIG_SYS_NAND_BYTES_PER_COLADDR	0x00000002
+
+//#define CONFIG_SYS_NAND_QUIET_TEST		/* don't warn upon unknown NAND flash   */
+//#define CONFIG_SYS_NAND_QUIET			/* FIXME: enable later */
+
+#define CONFIG_CMD_NAND_LOCK_UNLOCK
+#define CONFIG_MTD_NAND_VERIFY_WRITE
+
+#define CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_SIZE			0x10000
+/* (erase-)sector size: */
+#define CONFIG_ENV_RANGE		0x20000
+#define CONFIG_ENV_OFFSET		0x80000
+#define CONFIG_ENV_OFFSET_REDUND	0xC0000
+
+#define ENV_UPDATE_UBOOT \
+	"load_uboot=tftp ${ram_addr} ${tftppath}u-boot.img\0" \
+	"save_uboot=nand erase 0 80000;" \
+		"nand write ${ram_addr} 0 40000\0" \
+	"update_uboot=run load_uboot save_uboot\0" \
+	"reset_uboot_env=nand erase 80000 80000\0"
+
+#define IMAGE0_ADDR    0xB0100000
+#define KERNEL0_OFFS   0x100000
+#define IMAGE0_SIZE    7168
+
+#define IMAGE1_ADDR    0xB0800000
+#define KERNEL1_OFFS   0x800000
+#define IMAGE1_SIZE    8192
+
+#define ENV_TWO_IMAGES \
+	"image0_addr=" MK_STR(IMAGE0_ADDR) "\0" \
+	"image1_addr=" MK_STR(IMAGE1_ADDR) "\0" \
+	"kernel0_offs=" MK_STR(KERNEL0_OFFS) "\0" \
+	"kernel1_offs=" MK_STR(KERNEL1_OFFS) "\0" \
+	"boot_image0=" \
+		"run flashargs addip addmtdparts0 addmisc;" \
+		"nboot ${ram_addr} 0 ${kernel0_offs};" \
+		"bootm ${ram_addr}\0" \
+	"boot_image1=" \
+		"run flashargs addip addmtdparts1 addmisc;" \
+		"nboot ${ram_addr} 0 ${kernel1_offs};" \
+		"bootm ${ram_addr}\0" \
+	"boot_image_err=" \
+		"setenv kernel_offs ${kernel0_offs};" \
+		"httpd && setenv image0_is_valid 1\0" \
+	"boot_image=run boot_image${c_img};\0"
+
+#define ENV_UPDATE_IMAGE \
+	"update_image0=tftp ${ram_addr} " \
+		"${tftppath}${image_name}-squashfs.image;" \
+		"nand erase.spread ${kernel0_offs} ${filesize};" \
+		"nand write ${ram_addr} ${kernel0_offs} ${filesize}\0" \
+	"update_image1=tftp ${ram_addr} " \
+		"${tftppath}${image_name}-squashfs.image;" \
+		"nand erase.spread ${kernel1_offs} ${filesize};" \
+		"nand write ${ram_addr} ${kernel1_offs} ${filesize}\0"
+
+#define ENV_MTDPARTS \
+	"addmtdparts0=setenv mtdparts " \
+		"mtdparts=gen_nand:" \
+		"512k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(linux)," \
+		MK_STR(IMAGE1_SIZE)	"k(image1)\0" \
+	"addmtdparts1=setenv mtdparts " \
+		"mtdparts=gen_nand:" \
+		"512k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(image0)," \
+		MK_STR(IMAGE1_SIZE)	"k(linux)\0"
+
+#define ENV_FLASH_BOOT \
+	"flash_flash=run select_image boot_image\0"
+
+/* DM9000 driver for EBU Add-on Ethernet Controller Module */
+#define CONFIG_DRIVER_DM9000
+
+/* Falcon Evaluation Board */
+#define CONFIG_EASY980X0
+
+#define CONFIG_CMD_HTTPD	/* enable upgrade via HTTPD */
+
+#define CONFIG_OVERWRITE_ETHADDR_ONCE
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/easy980x0_netboot.h b/include/configs/easy980x0_netboot.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0_netboot.h
@@ -0,0 +1,45 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/* Falcon Evaluation Board */
+#define CONFIG_EASY98000
+
+/*
+ * environment definitions for automatic boot per network
+ */
+#define ENV_IMAGENAME "image_name=falcon-sysimage\0"
+
+#define ENV_LOAD_KERNEL "load_kernel=tftp ${ram_addr} ${tftppath}${image_name}.img\0"
+
+#define CONFIG_PREBOOT "dhcp"
+
+#define ENV_NET_BOOT \
+	"autoload=no\0" \
+	"netboot=run load_kernel addmisc;bootm ${ram_addr}\0"
+
+#define CONFIG_BOOTCOMMAND "run netboot"
+
+/* only one second for autoboot */
+#define CONFIG_BOOTDELAY	1
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/easy980x0_norflash.h b/include/configs/easy980x0_norflash.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0_norflash.h
@@ -0,0 +1,128 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/* select flash type */
+#define CONFIG_FLASH_CFI_DRIVER
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization (NOR Flash)
+ */
+
+#if 0
+#define CONFIG_SYS_FLASH_QUIET_TEST
+#define CONFIG_SYS_FLASH_EMPTY_INFO
+#endif
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#define CONFIG_SYS_MAX_FLASH_SECT	(512)	/* max number of sectors on one chip */
+
+#define CONFIG_ENV_IS_IN_FLASH
+/* offset and size of environment storage */
+#define CONFIG_ENV_OFFSET		0x40000
+#define CONFIG_ENV_OFFSET_REDUND	0x60000
+#define CONFIG_ENV_SECT_SIZE		0x20000
+#define CONFIG_ENV_SIZE			0x10000
+
+/* protect u-boot range */
+#define CONFIG_SYS_FLASH_AUTOPROTECT_LIST	{{CONFIG_SYS_FLASH_BASE, CONFIG_SYS_MONITOR_LEN}}
+
+#define xstr(s)	str(s)
+#define str(s)	#s
+
+#define UBOOT_ADDR		0xB0000000
+#define UBOOT_SIZE		256
+
+#define UBOOTENV_ADDR		0xB0040000
+#define UBOOTENV_SIZE		256
+
+#define ENV_UPDATE_UBOOT \
+	"load_uboot=tftp ${ram_addr} ${tftppath}u-boot.img\0" \
+	"save_uboot=protect off " MK_STR(UBOOT_ADDR) " +${filesize};" \
+		"erase " MK_STR(UBOOT_ADDR) " +${filesize};" \
+		"cp.b ${ram_addr} " MK_STR(UBOOT_ADDR) " ${filesize};" \
+		"protect on " MK_STR(UBOOT_ADDR) " +${filesize}\0" \
+	"update_uboot=run load_uboot save_uboot\0" \
+	"reset_uboot_env=protect off " MK_STR(UBOOTENV_ADDR) " +40000;" \
+		"erase " MK_STR(UBOOTENV_ADDR) " +40000;" \
+		"protect on " MK_STR(UBOOTENV_ADDR) " +40000\0"
+
+#define IMAGE0_ADDR		0xB0080000
+#define IMAGE0_SIZE		7936
+
+#define IMAGE1_ADDR		0xB0840000
+#define IMAGE1_SIZE		7936
+
+#define ENV_TWO_IMAGES \
+	"image0_addr=" MK_STR(IMAGE0_ADDR) "\0" \
+	"image1_addr=" MK_STR(IMAGE1_ADDR) "\0" \
+	"boot_image0=" \
+		"run flashargs addip addmtdparts0 addmisc && " \
+		"bootm $image0_addr\0" \
+	"boot_image1=" \
+		"run flashargs addip addmtdparts1 addmisc && " \
+		"bootm $image1_addr\0" \
+	"boot_image_err=" \
+		"setenv kernel_addr ${image0_addr};" \
+		"httpd && setenv image0_is_valid 1\0" \
+	"boot_image=run boot_image${c_img};\0"
+
+#define ENV_UPDATE_IMAGE \
+	"update_image0=" \
+		"tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image && " \
+		"protect off all && " \
+		"era ${image0_addr} +${filesize} && " \
+		"cp.b ${ram_addr} ${image0_addr} ${filesize}\0" \
+	"update_image1=" \
+		"tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image && " \
+		"protect off all && " \
+		"era ${image1_addr} +${filesize} && " \
+		"cp.b ${ram_addr} ${image1_addr} ${filesize}\0"
+
+#define ENV_MTDPARTS \
+	"addmtdparts0=setenv mtdparts " \
+		"mtdparts=ltq_nor:" \
+		MK_STR(UBOOT_SIZE)	"k(uboot)ro," \
+		MK_STR(UBOOTENV_SIZE)	"k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(linux)," \
+		MK_STR(IMAGE1_SIZE)	"k(image1)\0" \
+	"addmtdparts1=setenv mtdparts " \
+		"mtdparts=ltq_nor:" \
+		MK_STR(UBOOT_SIZE)	"k(uboot)ro," \
+		MK_STR(UBOOTENV_SIZE)	"k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(image0)," \
+		MK_STR(IMAGE1_SIZE)	"k(linux)\0"
+
+#define ENV_FLASH_BOOT \
+	"flash_flash=run select_image boot_image\0"
+
+/* DM9000 driver for EBU Add-on Ethernet Controller Module */
+#define CONFIG_DRIVER_DM9000
+
+/* Falcon Evaluation Board */
+#define CONFIG_EASY980X0
+
+#define CONFIG_CMD_HTTPD	/* enable upgrade via HTTPD */
+
+#define CONFIG_OVERWRITE_ETHADDR_ONCE
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/easy980x0_serialflash.h b/include/configs/easy980x0_serialflash.h
new file mode 100644
--- /dev/null
+++ b/include/configs/easy980x0_serialflash.h
@@ -0,0 +1,125 @@
+/*
+ * (C) Copyright 2011
+ * Lantiq Deutschland GmbH, http://www.lantiq.com
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#define BOARD_NAME_LINUX	EASY98000SF
+
+/* select flash type */
+#define CONFIG_SPI_FLASH
+
+/* for environment saving we need some bigger mallocs */
+#define CONFIG_SYS_MALLOC_LEN		(512 << 10)
+
+/* enable support for all possible flashes on eval board */
+#define CONFIG_SPI_FLASH_ATMEL
+#define CONFIG_SPI_FLASH_MACRONIX
+#define CONFIG_SPI_FLASH_SPANSION
+#define CONFIG_SPI_FLASH_SST
+#define CONFIG_SPI_FLASH_WINBOND
+#define CONFIG_SPI_FLASH_STMICRO
+
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_SYS_REDUNDAND_ENVIRONMENT
+
+#define CONFIG_SF_DEFAULT_SPEED		50000000
+#define CONFIG_ENV_SPI_MAX_HZ		50000000
+
+#define CONFIG_ENV_SIZE			0x10000
+#define CONFIG_ENV_SECT_SIZE		0x40000
+#define CONFIG_ENV_OFFSET		CONFIG_SYS_MONITOR_LEN + (0 * CONFIG_ENV_SECT_SIZE)
+#define CONFIG_ENV_OFFSET_REDUND	CONFIG_SYS_MONITOR_LEN + (1 * CONFIG_ENV_SECT_SIZE)
+
+#define ENV_UPDATE_UBOOT \
+	"load_uboot=tftp ${ram_addr} ${tftppath}u-boot.img\0" \
+	"save_uboot=sf probe 0;" \
+		"sf erase 0 40000;" \
+		"sf write ${ram_addr} 0 ${filesize}\0" \
+	"update_uboot=run load_uboot save_uboot\0" \
+	"reset_uboot_env=sf probe 0;sf erase 40000 80000\0"
+
+#define IMAGE0_ADDR    0xB00C0000
+#define KERNEL0_OFFS   0xC0000
+#define IMAGE0_SIZE    7424
+
+#define IMAGE1_ADDR    0xB0800000
+#define KERNEL1_OFFS   0x800000
+#define IMAGE1_SIZE    8192
+
+#define ENV_TWO_IMAGES \
+	"image0_addr=" MK_STR(IMAGE0_ADDR) "\0" \
+	"image1_addr=" MK_STR(IMAGE1_ADDR) "\0" \
+	"kernel0_offs=" MK_STR(KERNEL0_OFFS) "\0" \
+	"kernel1_offs=" MK_STR(KERNEL1_OFFS) "\0" \
+	"max_kernel_size=180000\0" \
+	"kernel0_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel0_offs} ${max_kernel_size}\0" \
+	"kernel1_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel1_offs} ${max_kernel_size}\0" \
+	"boot_image0=" \
+		"run kernel0_from_sf flashargs addip addmtdparts0 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image1=" \
+		"run kernel1_from_sf flashargs addip addmtdparts1 addmisc && " \
+		"bootm ${ram_addr}\0" \
+	"boot_image_err=" \
+		"setenv kernel_offs ${kernel0_offs};" \
+		"httpd && setenv image0_is_valid 1\0" \
+	"boot_image=run boot_image${c_img};\0"
+
+#define ENV_UPDATE_IMAGE \
+	"update_image0=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel0_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel0_offs} ${filesize}\0" \
+	"update_image1=tftp ${ram_addr} ${tftppath}${image_name}-squashfs.image;" \
+		"sf probe 0;" \
+		"sf erase ${kernel1_offs} +${filesize};" \
+		"sf write ${ram_addr} ${kernel1_offs} ${filesize}\0"
+
+#define ENV_MTDPARTS \
+	"addmtdparts0=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(linux)," \
+		MK_STR(IMAGE1_SIZE)	"k(image1)\0" \
+	"addmtdparts1=setenv mtdparts " \
+		"mtdparts=sflash:" \
+		"256k(uboot)ro," \
+		"512k(uboot_env)," \
+		MK_STR(IMAGE0_SIZE)	"k(image0)," \
+		MK_STR(IMAGE1_SIZE)	"k(linux)\0"
+
+#define ENV_FLASH_BOOT \
+	"flash_flash=run select_image boot_image\0"
+
+/* DM9000 driver for EBU Add-on Ethernet Controller Module */
+#define CONFIG_DRIVER_DM9000
+
+/* Falcon Evaluation Board */
+#define CONFIG_EASY980X0
+
+#define CONFIG_CMD_HTTPD	/* enable upgrade via HTTPD */
+
+#define CONFIG_OVERWRITE_ETHADDR_ONCE
+
+#include "configs/easy980x0.h"
diff --git a/include/configs/falcon-common.h b/include/configs/falcon-common.h
new file mode 100644
--- /dev/null
+++ b/include/configs/falcon-common.h
@@ -0,0 +1,444 @@
+/*
+ * (C) Copyright 2011
+ * Thomas Langer, Lantiq Deutschland GmbH
+ *
+ * Common configuration options for all FALCON boards
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __FALCON_COMMON_H
+#define __FALCON_COMMON_H
+
+/* support all chip versions as default */
+#define CONFIG_FALCON_A1x
+#define CONFIG_FALCON_A2x
+
+#ifndef CONFIG_BOOTDELAY
+#define CONFIG_BOOTDELAY	5	/* autoboot after 5 seconds	*/
+#endif
+
+/* default baudrate and valid baudrates */
+#ifdef CONFIG_EMULATION
+#ifdef CONFIG_VENUS
+#define CONFIG_BAUDRATE			38400
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+#else
+#define CONFIG_BAUDRATE			600
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 600, 1200, 2400 }
+#endif
+#else
+#define CONFIG_BAUDRATE			115200
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200, 230400 }
+#endif
+
+#define CONFIG_TIMESTAMP		/* Print image info with timestamp */
+
+/*
+ * TFTP is using fragmented packets
+ */
+#define CONFIG_IP_DEFRAG
+
+/*
+ * BOOTP options
+ */
+#define CONFIG_BOOTP_BOOTFILESIZE
+#define CONFIG_BOOTP_BOOTPATH
+#define CONFIG_BOOTP_GATEWAY
+#define CONFIG_BOOTP_HOSTNAME
+
+/*
+ * Command line configuration.
+ */
+#include <config_cmd_default.h>
+
+#undef CONFIG_CMD_CONSOLE
+#undef CONFIG_CMD_FPGA
+#undef CONFIG_CMD_IMLS
+#undef CONFIG_CMD_NFS
+#undef CONFIG_CMD_XIMG
+
+
+#if defined(CONFIG_EMULATION) || defined(CONFIG_SYS_IN_INTERNAL_RAM)
+#undef CONFIG_CMD_LOADB
+#undef CONFIG_CMD_LOADS
+#else
+/* some options for full system */
+#define CONFIG_CMD_ASKENV
+#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_SNTP
+#endif
+
+#define CONFIG_CMD_PING
+
+/* some "nice to have" or debugging options */
+//#define CONFIG_CMD_ELF
+//#define CONFIG_CMD_JFFS2
+
+/* Falcon has support for Gigabit PHYs */
+#define CONFIG_PHY_GIGE
+
+/* falcon network driver can be configured with hwconfig */
+#define CONFIG_HWCONFIG					/* enable hwconfig */
+
+/*
+ * Miscellaneous configurable options
+ */
+
+#ifndef CONFIG_SYS_IN_INTERNAL_RAM
+#define CONFIG_LZMA
+#define CONFIG_SYS_LONGHELP				/* undef to save memory */
+#endif
+
+#ifndef CONFIG_SYS_PROMPT
+#define	CONFIG_SYS_PROMPT		"FALCON => "	/* Monitor Command Prompt */
+#endif
+#define CONFIG_SYS_CBSIZE		512		/* Console I/O Buffer Size */
+#define CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE+sizeof(CONFIG_SYS_PROMPT)+16)  /* Print Buffer Size */
+#define CONFIG_SYS_MAXARGS		16		/* max number of command args */
+
+#ifndef CONFIG_SYS_MALLOC_LEN
+#define CONFIG_SYS_MALLOC_LEN		(512 << 10)
+#endif
+#define CONFIG_SYS_BOOTPARAMS_LEN	(64 << 10)
+
+#define CONFIG_SYS_MIPS_TIMER_FREQ	(get_cpuclk()/2)
+#define CONFIG_SYS_HZ			1000
+
+#define CONFIG_CMDLINE_EDITING		/* add command line history	*/
+#define CONFIG_AUTO_COMPLETE		/* add autocompletion support	*/
+
+#define CONFIG_ZERO_BOOTDELAY_CHECK	/* check for keypress on bootdelay==0 */
+#define CONFIG_VERSION_VARIABLE		/* include version env variable */
+
+#define CONFIG_SYS_CONSOLE_INFO_QUIET	/* don't print console @ startup*/
+
+#ifdef CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#endif
+
+#define CONFIG_LOADS_ECHO		/* echo on for serial download	*/
+#define CONFIG_SYS_LOADS_BAUD_CHANGE	/* allow baudrate change	*/
+
+#define CONFIG_MISC_INIT_R		/* have misc_init_r() function */
+
+/* standard settings for NOR flash */
+#ifdef CONFIG_FLASH_CFI_DRIVER
+#define CONFIG_SYS_FLASH_CFI
+#define CONFIG_CFI_FLASH_USE_WEAK_ACCESSORS
+#define CONFIG_SYS_FLASH_USE_BUFFER_WRITE
+#define CONFIG_SYS_FLASH_CFI_WIDTH	FLASH_CFI_16BIT
+
+#define CONFIG_FLASH_SHOW_PROGRESS	45
+/* as the jffs2 FS is marking unused sectors as "empty" with an own magic,
+   this empty info here will not work and slows down the "flinfo" command
+#define CONFIG_SYS_FLASH_EMPTY_INFO */
+
+#define CONFIG_SYS_CFI_FLASH_STATUS_POLL
+
+#endif /* CONFIG_FLASH_CFI_DRIVER */
+
+/*
+ * memory-map related definitions
+ */
+#define CONFIG_SYS_FLASH_BASE		0xB0000000
+#define CONFIG_SYS_MEMTEST_SCRATCH	0xBF200020
+
+/* definitions for internal (SBS0) RAM */
+#define CONFIG_SYS_MAX_INTERNAL_RAM	(32*1024)*31	/* 31 blocks of 32kBytes */
+#define CONFIG_SYS_INTERNAL_RAM_BASE	0x9F208000	/* base of usable internal ram */
+
+#define CONFIG_SYS_MAX_RAM		(128 << 20)	/* maximum of external RAM which can be mapped */
+#define CONFIG_SYS_DDR_BASE		0x80000000
+#define CONFIG_SYS_LOAD_ADDR		0x80800000	/* default load address	*/
+
+#ifndef CONFIG_SYS_MEMTEST_START
+#define CONFIG_SYS_MEMTEST_START	0x80000000
+#endif
+#ifndef CONFIG_SYS_MEMTEST_END
+#define CONFIG_SYS_MEMTEST_END		0x80800000
+#endif
+
+#ifdef CONFIG_SYS_IN_INTERNAL_RAM
+#define CONFIG_SYS_SDRAM_BASE		CONFIG_SYS_INTERNAL_RAM_BASE
+#else
+#define CONFIG_SYS_SDRAM_BASE		CONFIG_SYS_DDR_BASE
+#endif
+
+/* location of initial stack (highest address) */
+#define CONFIG_SYS_INIT_SP_OFFSET	(0xBF201000 - CONFIG_SYS_SDRAM_BASE)
+
+/*
+ * location of code before relocation
+ */
+/* Standard: boot from SSB0RAM */
+#ifndef CONFIG_SYS_TEXT_BASE
+#define CONFIG_SYS_TEXT_BASE		0xBF201000
+#endif
+#define CONFIG_SYS_MONITOR_BASE		CONFIG_SYS_TEXT_BASE
+
+/*
+ * FIXME: following definition is mainly used for NOR flash based targets
+ * -> update size if config is more settled
+ */
+#define CONFIG_SYS_MONITOR_LEN		(256 << 10)
+
+/*
+ * Cache Configuration (cpu/chip specific)
+ */
+#define CONFIG_SYS_DCACHE_SIZE		(16 << 10)
+#define CONFIG_SYS_ICACHE_SIZE		(16 << 10)
+#define CONFIG_SYS_CACHELINE_SIZE	32
+#define CONFIG_SYS_MIPS_CACHE_MODE	CONF_CM_CACHABLE_NO_WA
+
+#define CONFIG_SYS_MIPS_CACHE_INDEX_BASE	KSEG0ADDR(0x1F201000)
+
+/*
+ * Falcon network driver needs only one rx buffer
+ */
+#define CONFIG_SYS_RX_ETH_BUFFER	1
+
+/*
+ * Standard peripherals
+ */
+#define CONFIG_LTQ_ASC
+#ifdef CONFIG_USE_ASC0
+#  define CONFIG_SYS_LTQ_ASC_BASE		0x1E100C00
+#else
+#  define CONFIG_SYS_LTQ_ASC_BASE		0x1E100B00
+#endif
+
+#if defined (CONFIG_HW_WATCHDOG)
+#define CONFIG_LANTIQ_WATCHDOG
+#endif
+
+#ifdef CONFIG_SPI_FLASH
+#define CONFIG_CMD_SF
+#if 	!defined(CONFIG_SPI_FLASH_ATMEL) && \
+	!defined(CONFIG_SPI_FLASH_MACRONIX) && \
+	!defined(CONFIG_SPI_FLASH_SPANSION) && \
+	!defined(CONFIG_SPI_FLASH_SST) && \
+	!defined(CONFIG_SPI_FLASH_WINBOND) && \
+	!defined(CONFIG_SPI_FLASH_STMICRO)
+#error "No CONFIG_SPI_FLASH_manufacturer defined"
+#endif
+#endif
+
+#ifdef CONFIG_NAND
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		0xB0000000
+#endif
+
+/*
+ * default environment setup
+ */
+
+#ifndef CONFIG_PREBOOT
+#define CONFIG_PREBOOT \
+	"echo;" \
+	"echo Type \\\"run flash_nfs\\\" to mount root filesystem over NFS;" \
+	"echo"
+#endif
+
+#undef	CONFIG_BOOTARGS
+
+#ifdef CONFIG_FLASH_CFI_DRIVER
+/* NOR flash based config */
+
+#elif defined (CONFIG_SPI_FLASH)
+/* SPI flash based config */
+
+#ifndef ENV_FLASH_BOOT
+/* max_kernel_size is set to 1.5 MiB = 0x180000 */
+#define ENV_FLASH_BOOT \
+	"max_kernel_size=180000\0" \
+	"kernel_from_sf=sf probe 0;" \
+		"sf read ${ram_addr} ${kernel_offs} ${max_kernel_size}\0" \
+	"flash_flash=" \
+		"run kernel_from_sf flashargs addip addmisc;" \
+		"bootm ${ram_addr}\0"
+#endif
+
+#elif defined (CONFIG_NAND)
+/* NAND flash based config */
+#ifndef ENV_FLASH_BOOT
+#define ENV_FLASH_BOOT \
+	"flash_flash=" \
+		"run flashargs addip addmisc;" \
+		"nboot ${ram_addr} 0 ${kernel_offs};" \
+		"bootm ${ram_addr}\0"
+#endif
+#else
+/* "no flash" config */
+#define ENV_IMAGE_SELECT_SCRIPT
+#define ENV_UPDATE_OPENWRT
+
+#endif
+
+#ifndef ENV_MACHTYPE
+#ifdef BOARD_NAME_LINUX
+#define ENV_MACHTYPE "machtype=" MK_STR(BOARD_NAME_LINUX) "\0"
+#else
+#define ENV_MACHTYPE
+#endif
+#endif
+
+#ifndef ENV_ADDVOICE
+#define ENV_ADDVOICE ""
+#endif
+
+#ifndef ENV_MTDPARTS
+#define ENV_MTDPARTS
+#endif
+
+#ifndef ENV_FLASH_BOOT
+#define ENV_FLASH_BOOT
+#endif
+
+#ifndef ENV_IMAGENAME
+/* always use "-NONE" image, otherwise required settings from commandline are missing! */
+#if defined(BOARD_NAME_LINUX) && 0
+#define ENV_IMAGENAME "image_name=openwrt-lantiq-falcon-" MK_STR(BOARD_NAME_LINUX) "\0"
+#else
+#define ENV_IMAGENAME "image_name=openwrt-lantiq-falcon-NONE\0"
+#endif
+#endif
+
+#ifndef ENV_LOAD_KERNEL
+#define ENV_LOAD_KERNEL "load_kernel=tftp ${ram_addr} ${tftppath}${image_name}-uImage\0"
+#endif
+
+#ifndef ENV_UPDATE_UBOOT
+#define ENV_UPDATE_UBOOT
+#endif
+
+#ifndef ENV_UPDATE_IMAGE
+#define ENV_UPDATE_IMAGE
+#endif
+
+#ifndef CONFIG_EXTRA_ENV_EMULATION
+#define CONFIG_EXTRA_ENV_EMULATION
+#endif
+
+#ifndef ENV_ETHROTATE
+#define ENV_ETHROTATE "ethrotate=no\0"
+#endif
+
+#ifndef ENV_EXT_PHY
+#define ENV_EXT_PHY
+#endif
+
+#ifndef ENV_TWO_IMAGES
+#define ENV_TWO_IMAGES
+#endif
+
+#ifndef ENV_IMAGE_SELECT_SCRIPT
+#define MAGIC_ADDR     0xBF200038
+#define MAGIC_VAL      0xDEADBEEF
+#define ACT_IMG_ADDR   0xBF20003C
+
+#define ENV_IMAGE_SELECT_SCRIPT \
+	"select_image=" \
+		"setenv activate_image -1;" \
+		"if itest *${magic_addr} == ${magic_val} ; then " \
+			"if itest *${act_img_addr} == 0 ; then " \
+				"setenv activate_image 0;" \
+			"fi;" \
+			"if itest *${act_img_addr} == 1 ; then " \
+				"setenv activate_image 1;" \
+			"fi;" \
+			"mw ${magic_addr} 0x0;" \
+			"mw ${act_img_addr} 0x0;" \
+		"fi;" \
+		"if test $activate_image = -1 ; then " \
+			"setenv c_img $committed_image;" \
+		"else " \
+			"setenv c_img $activate_image;" \
+			"setenv activate_image -1;" \
+		"fi;" \
+		"if test $c_img = 0 && test image0_is_valid = 0 ; then " \
+			"setenv c_img 1;" \
+		"fi;" \
+		"if test $c_img = 1 && test image1_is_valid = 0 ; then " \
+			"setenv c_img 0;" \
+		"fi;" \
+		"if test image0_is_valid = 0 && test image1_is_valid = 0 ; then " \
+			"setenv c_img _err;" \
+		"fi;" \
+		"exit 0\0" \
+	"committed_image=0\0" \
+	"image0_is_valid=1\0" \
+	"image1_is_valid=0\0" \
+	"magic_addr=" MK_STR(MAGIC_ADDR) "\0" \
+	"magic_val=" MK_STR(MAGIC_VAL) "\0" \
+	"act_img_addr=" MK_STR(ACT_IMG_ADDR) "\0"
+#endif
+
+#ifndef ENV_UPDATE_OPENWRT
+#define ENV_UPDATE_OPENWRT \
+	"update_openwrt=run update_image0 && " \
+		"setenv committed_image 0 && " \
+		"setenv image0_is_valid 1\0"
+#endif
+
+#ifndef ENV_NET_BOOT
+#define ENV_NET_BOOT \
+	"nfsargs=setenv bootargs root=/dev/nfs rw " \
+		"nfsroot=${serverip}:${rootpath},${nfsoptions}\0"\
+	"nfsoptions=rsize=1024,wsize=1024\0"\
+	"net_nfs=run load_kernel nfsargs addip addmtdparts0 addmisc;" \
+		"bootm ${ram_addr}\0"
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"ram_addr=80F00000\0" \
+	ENV_IMAGE_SELECT_SCRIPT \
+	ENV_TWO_IMAGES \
+	"flashargs=setenv bootargs rootfstype=squashfs,jffs2\0" \
+	"addip=setenv bootargs ${bootargs} " \
+		"ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}" \
+		":${hostname}:${netdev}:off\0" \
+	ENV_MACHTYPE \
+	"addmisc=setenv bootargs ${bootargs} ethaddr=${ethaddr} " \
+		"machtype=${machtype} ignore_loglevel" ENV_ADDVOICE \
+		" ${mtdparts}\0" \
+	ENV_MTDPARTS \
+	ENV_FLASH_BOOT \
+	ENV_NET_BOOT \
+	ENV_IMAGENAME \
+	ENV_LOAD_KERNEL \
+	ENV_UPDATE_UBOOT \
+	ENV_UPDATE_IMAGE \
+	ENV_UPDATE_OPENWRT \
+	ENV_ETHROTATE \
+	"gphy0_phyaddr=0\0" \
+	"gphy1_phyaddr=1\0" \
+	ENV_EXT_PHY \
+	CONFIG_EXTRA_ENV_EMULATION
+
+#ifndef CONFIG_EMULATION
+#ifndef CONFIG_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND	"run flash_flash"
+#endif
+#endif
+
+/* disable some default config settings */
+#undef CONFIG_BOOTM_NETBSD
+#undef CONFIG_BOOTM_RTEMS
+#undef CONFIG_GZIP
+#undef CONFIG_ZLIB
+
+#endif /* __FALCON_COMMON_H */
