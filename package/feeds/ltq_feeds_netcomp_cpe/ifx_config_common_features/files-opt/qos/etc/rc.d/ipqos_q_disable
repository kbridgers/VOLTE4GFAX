#!/bin/sh
if [ ! "$ENVLOADED" ]; then
        if [ -r /etc/rc.conf ]; then
                 . /etc/rc.conf 2> /dev/null
		if [ -r /tmp/system_status ]; then
                	. /tmp/system_status 2> /dev/null
		fi
                ENVLOADED="1"
        fi
fi


if [ ! "$CONFIGLOADED" ]; then
        if [ -r /etc/rc.d/config.sh ]; then
                . /etc/rc.d/config.sh 2>/dev/null
        fi
        if [ -r /etc/rc.d/config_qos.sh ]; then
                . /etc/rc.d/config_qos.sh 2>/dev/null
        fi
                CONFIGLOADED="1"
fi

#if [ -r /etc/rc.d/model_config.sh ]; then
#        . /etc/rc.d/model_config.sh 2>/dev/null
#fi

platform=${CONFIG_IFX_MODEL_NAME%%_*}
if [ "$platform" = "DANUBE" -o "$platform" = "AMAZON" -o "$platform" = "TP-VE" -o "$platform" = "GW188" ]; then
	target=$platform
else
	target=`echo $platform | cut -c -4`
fi


# Define interface types
	# NOTE: These values should match with the values in the enum 
        QOS_INTF_LAN=0
        QOS_INTF_LOCAL=7
        QOS_INTF_ALL=13
	QOS_INTF_WAN_ATM=9
	QOS_INTF_WAN_PTM=10
	QOS_INTF_WAN_ETH_0=11
	QOS_INTF_WAN_ETH_1=12
        QOS_INTF_LAN_SPECIFIC=14

	QOS_TYPE_MFC=0
	QOS_TYPE_DSCP=1
	QOS_TYPE_802_1P=2

Queue_Direction=$1 
UPSTREAM_QOS=1
DOWNSTREAM_QOS=2

case "$wanphy_phymode" in
	0)
		case "$wanphy_tc" in
			0)
				#wan mode is ATM
				qIfTypeActive=$QOS_INTF_WAN_ATM;
				;;
			1)
				#wan mode is PTM
				qIfTypeActive=$QOS_INTF_WAN_PTM;
				;;
		esac
		;;
	1)
		#wan mode is MII0
		qIfTypeActive=$QOS_INTF_WAN_ETH_0;
		;;
	2)
		#wan mode is MII1
		qIfTypeActive=$QOS_INTF_WAN_ETH_1;
		;;
	3)
		#wan mode is PTM
		qIfTypeActive=$QOS_INTF_WAN_PTM;
		;;
esac

QUEUE_METHOD=`/usr/sbin/status_oper GET qos_bk queue_method`

####################################Upstream Queues########################################
if [ $QUEUE_METHOD -eq 1 ]; then
	#Upstream Q Dev varies based on VLAN-Enabled or VLAN-Disabled
	#TBD: Select imq0 or individual device based on VLAN Enable field.
	if [ $Queue_Direction -eq $UPSTREAM_QOS ]; then
		UPSTREAM_Q_DEV=imq0
		tc qdisc del dev $UPSTREAM_Q_DEV root handle 1: htb
		#delete mapping to IMQ
		#iptables -t mangle -D POSTROUTING -o ppp+ -j IMQ --todev 0
		#if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
		#	iptables -t mangle -D POSTROUTING -o ptm+ -j IMQ --todev 0
		#fi
		#if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM ]; then
		#iptables -t mangle -D POSTROUTING -o nas+ -j IMQ --todev 0
		#fi

		i=0
		while [ $i -lt $wan_ppp_Count ]
		do
			eval wanmode='$'wanppp_${i}_wanMode

			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 -a $wanmode -eq 1 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL POSTROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
				fi
	
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 -a $wanmode -eq 2 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL POSTROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL POSTROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					cmd="iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
					$cmd
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						cmd="ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
						$cmd
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL POSTROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL POSTROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			i=$(($i + 1))
		done

		i=0
		while [ $i -lt $wan_ip_Count ]
		do
			eval wanmode='$'wanip_${i}_wanMode
	
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 -a $wanmode -eq 1 ]; then 
                 	  	. /etc/rc.d/get_wan_if $i "ip"
                 	  	eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
				fi
				if [ $addrtype -eq 0 ]; then
					ebtables -t filter -L FORWARD | grep ${iface}
					if [ $? -ne 0 ]; then
						ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
					fi
				fi	
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 -a $wanmode -eq 2 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
				fi
				if [ $addrtype -eq 0 ]; then
					ebtables -t filter -L FORWARD | grep ${iface}
					if [ $? -ne 0 ]; then
						ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						cmd="iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
						$cmd
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							cmd="ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
							$cmd
						fi
					fi
				fi
				if [ $addrtype -eq 0 ]; then
					ebtables -t filter -L FORWARD | grep ${iface}
					if [ $? -ne 0 ]; then
						ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi	
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi	
				fi
				if [ $addrtype -eq 0 ]; then
					ebtables -t filter -L FORWARD | grep ${iface}
					if [ $? -ne 0 ]; then
						ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
				fi
				if [ $addrtype -eq 0 ]; then
					ebtables -t filter -L FORWARD | grep ${iface}
					if [ $? -ne 0 ]; then
						ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
					fi
				fi
        		fi
			i=$(($i + 1))
		done

		# make interface device
		ifconfig $UPSTREAM_Q_DEV down

		#enable PPA if PPA is supported
		if [ $CONFIG_IFX_MODEL_NAME != "DANUBE_GW_HE_ADSL_RETX_NOPPA" ]; then

			CMD="ppacmd control --enable-lan --enable-wan"
			echo $CMD
			$CMD
		fi
	fi

	if [ $Queue_Direction -eq $DOWNSTREAM_QOS ]; then

		
		DOWNSTREAM_Q_DEV=imq1
		tc qdisc del dev $DOWNSTREAM_Q_DEV root handle 1: htb

		#delete mapping to IMQ
		#iptables -t mangle -D POSTROUTING -o ppp+ -j IMQ --todev 0
		#if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
		#	iptables -t mangle -D POSTROUTING -o ptm+ -j IMQ --todev 0
		#fi
		#if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM ]; then
		#	iptables -t mangle -D POSTROUTING -o nas+ -j IMQ --todev 0
		#fi

		i=0
		while [ $i -lt $wan_ppp_Count ]
		do
			eval wanmode='$'wanppp_${i}_wanMode

			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL PREROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					cmd="iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1"
					$cmd
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						cmd="ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1"
						$cmd
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL PREROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ppp"
                   		eval iface=${WAN_IFNAME}
				iptables -t mangle -nvL PREROUTING | grep  ${iface}
				if [ $? -ne 0 ]; then
       					iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
				fi
				if [ "$target" != "ARX1" ]; then
					ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
					fi
				fi
        		fi
			i=$(($i + 1))
		done

		i=0
		while [ $i -lt $wan_ip_Count ]
		do
			eval wanmode='$'wanip_${i}_wanMode

			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						cmd="iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1"
						$cmd
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							cmd="ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1"
							$cmd
						fi
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
						fi
					fi
				fi
        		fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   		. /etc/rc.d/get_wan_if $i "ip"
                   		eval iface=${WAN_IFNAME}
				eval addrtype='$'wanip_${i}_addrType
				if [ $addrtype -ne 0 ]; then
					iptables -t mangle -nvL PREROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL PREROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D IPQOS_DS_TARGET -o ${iface} -j IMQ --todev 1
						fi
					fi
				fi
        		fi
			i=$(($i + 1))
		done

		# make interface device
		ifconfig $DOWNSTREAM_Q_DEV down

		#enable PPA if PPA is supported
		if [ $CONFIG_IFX_MODEL_NAME != "DANUBE_GW_HE_ADSL_RETX_NOPPA" ]; then

			CMD="ppacmd control --enable-lan --enable-wan"
			echo $CMD
			$CMD
		fi
	fi

fi
if [ $QUEUE_METHOD -eq 2 ]; then
	if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
	PORT=7
	fi
	if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 ]; then
	PORT=1
	fi
# D5 FW MII0 QoS
	if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 ]; then
	PORT=0
	fi

	if [ $Queue_Direction -eq $UPSTREAM_QOS ]; then

		#disable PTM FW queues
		ppacmd setctrlwfq -p $PORT -c disable
		ppacmd setctrlrate -p $PORT -c disable

		QUEUE_TYPE=`/usr/sbin/status_oper GET qos_bk queue_type`
		if [ $QUEUE_TYPE -eq 0 ]; then
			ppacmd setwfq -p $PORT -q 0 -w 100
			ppacmd setwfq -p $PORT -q 1 -w 100
			ppacmd setwfq -p $PORT -q 2 -w 100
			ppacmd setwfq -p $PORT -q 3 -w 100
			ppacmd setwfq -p $PORT -q 4 -w 100
			ppacmd setwfq -p $PORT -q 5 -w 100
			ppacmd setwfq -p $PORT -q 6 -w 100
			ppacmd setwfq -p $PORT -q 7 -w 100
		else
			ppacmd setwfq -p $PORT -q 0 -w 0
			ppacmd setwfq -p $PORT -q 1 -w 0
			ppacmd setwfq -p $PORT -q 2 -w 0
			ppacmd setwfq -p $PORT -q 3 -w 0
			ppacmd setwfq -p $PORT -q 4 -w 0
			ppacmd setwfq -p $PORT -q 5 -w 0
			ppacmd setwfq -p $PORT -q 6 -w 0
			ppacmd setwfq -p $PORT -q 7 -w 0
		fi

		#802.1p egress marking Setting egress cos map for mii1/ptm interfaces 
		i=0
		while [ $i -lt $wan_ip_Count ]
		do

			eval wanmode='$'wanip_${i}_wanMode
			eval wanif='$'wanip_${i}_iface

			if [ $wanmode -eq 2 -o $wanmode -eq 3 ]; then
				# perform mapping only if wanmode is mii1 or ptm

				#set egress cos map
				vconfig set_egress_map $wanif 0 0
				vconfig set_egress_map $wanif 1 0
				vconfig set_egress_map $wanif 2 0
				vconfig set_egress_map $wanif 3 0
				vconfig set_egress_map $wanif 4 0
				vconfig set_egress_map $wanif 5 0
				vconfig set_egress_map $wanif 6 0
				vconfig set_egress_map $wanif 7 0
			fi
			i=`expr $i + 1`
		done
			
		i=0
		while [ $i -lt $wan_ppp_Count ]
		do

			eval wanmode='$'wanppp_${i}_wanMode
			eval wanif='$'wanppp_${i}_iface

			if [ $wanmode -eq 2 -o $wanmode -eq 3 ]; then
				# perform mapping only if wanmode is mii1 or ptm

				#set egress cos map
				vconfig set_egress_map $wanif 0 0
				vconfig set_egress_map $wanif 1 0
				vconfig set_egress_map $wanif 2 0
				vconfig set_egress_map $wanif 3 0
				vconfig set_egress_map $wanif 4 0
				vconfig set_egress_map $wanif 5 0
				vconfig set_egress_map $wanif 6 0
				vconfig set_egress_map $wanif 7 0
			fi

			i=`expr $i + 1`
		done

                if [ "$CONFIG_IFX_CONFIG_CPU" = "XRX288" ]; then
                                        if [ "$wanphy_phymode" = "2" ]; then
                                        echo eth1 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio
                                        elif [ "$wanphy_tc" = "1" -a "$wanphy_phymode" = "3" ]; then
                                        echo ptm0 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio

                                fi
                elif [ "$CONFIG_IFX_CONFIG_CPU" = "AMAZON_S" ]; then
                        if [ "$wanphy_phymode" = "2" ]; then
                                        echo eth1 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio

                        fi
                fi
	fi
	## Disable switch configuration for downstream if platform is VRX

	if [ $Queue_Direction -eq $DOWNSTREAM_QOS ]; then
		if [ "$target" = "VRX2" -o "$target" = "VRX3" ]; then

			# Default class asssignment for DSCP
			for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
			do 
				switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_DSCP_CLASS_SET nDSCP=$i nTrafficClass=0
			done

			#disable GRx switch queue config
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_CFG_SET nPortId=6 eClassMode=0 nTrafficClass=0
	
			#For port 0 queues 0-3 are de-allocated in Eth1 mode.
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=20 nPortId=5 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=21 nPortId=5 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=22 nPortId=5 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=23 nPortId=5 nTrafficClassId=3
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=20 nPortId=5 nTrafficClassId=4
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=20 nPortId=5 nTrafficClassId=5
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=20 nPortId=5 nTrafficClassId=6
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=20 nPortId=5 nTrafficClassId=7
	
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=28 nPortId=7 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=29 nPortId=7 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=30 nPortId=7 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=31 nPortId=7 nTrafficClassId=3

			#downstream
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=0 nPortId=0 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=1 nPortId=0 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=2 nPortId=0 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=3 nPortId=0 nTrafficClassId=3
	
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=4 nPortId=1 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=5 nPortId=1 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=6 nPortId=1 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=7 nPortId=1 nTrafficClassId=3

			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=8 nPortId=2 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=9 nPortId=2 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=10 nPortId=2 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=11 nPortId=2 nTrafficClassId=3
	
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=12 nPortId=3 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=13 nPortId=3 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=14 nPortId=3 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=15 nPortId=3 nTrafficClassId=3
			
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=16 nPortId=4 nTrafficClassId=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=17 nPortId=4 nTrafficClassId=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=18 nPortId=4 nTrafficClassId=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=19 nPortId=4 nTrafficClassId=3

			#downstream end


			#enable flow control on port 6(default state)
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0x94b nData=0x180
			#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_PORT_CFG_SET nPortId=6 eEnable=1 bUnicastUnknownDrop=0 bMulticastUnknownDrop=0 bReservedPacketDrop=0 bBroadcastDrop=0 bAging=0 bLearningMAC_PortLock=0 nLearningLimit=255 ePortMonitor=0 eFlowCtrl=0
	
			#deallocate PCP-Class assignment
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=0 nTrafficClass=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=1 nTrafficClass=0
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=2 nTrafficClass=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=3 nTrafficClass=1
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=4 nTrafficClass=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=5 nTrafficClass=2
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=6 nTrafficClass=3
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=7 nTrafficClass=3


			#reset queues 0-3,28-31 to default state
			#If Sched type of queues is SP set queues 0-3;12-15=0xffff
			if [ $qq_2_schedType -eq 0 ]; then
				echo " initialize queues"	
				for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31; do
					switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
				done
			fi
			#If Sched type of queues is WFQ set queues 0-3;12-15=0x1800
			if [ $qq_2_schedType -eq 2 ]; then	
				echo " initialize queues"	
				for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31; do
					switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
				done
			fi

			# Re-Setting egress cos map for mii1 interfaces 

			i=0
			while [ $i -lt $wan_ip_Count ]
			do

				eval wanmode='$'wanip_${i}_wanMode
				eval wanif='$'wanip_${i}_iface

				if [ $wanmode -eq 2 ]; then
					# perform mapping only if wanmode is mii1 or ptm

					#set egress cos map
					vconfig set_egress_map $wanif 0 0
					vconfig set_egress_map $wanif 1 0
					vconfig set_egress_map $wanif 2 0
					vconfig set_egress_map $wanif 3 0
					vconfig set_egress_map $wanif 4 0
					vconfig set_egress_map $wanif 5 0
					vconfig set_egress_map $wanif 6 0
					vconfig set_egress_map $wanif 7 0

					#ppacmd delwan -i eth1
					#ppacmd addwan -i $wanif

				fi
			i=`expr $i + 1`
			done

			i=0
			while [ $i -lt $wan_ppp_Count ]
			do

				eval wanmode='$'wanppp_${i}_wanMode
				eval wanif='$'wanppp_${i}_iface

				if [ $wanmode -eq 2 ]; then
					# perform mapping only if wanmode is mii1 or ptm

					#set egress cos map
					vconfig set_egress_map $wanif 0 0
					vconfig set_egress_map $wanif 1 0
					vconfig set_egress_map $wanif 2 0
					vconfig set_egress_map $wanif 3 0
					vconfig set_egress_map $wanif 4 0
					vconfig set_egress_map $wanif 5 0
					vconfig set_egress_map $wanif 6 0
					vconfig set_egress_map $wanif 7 0

					#ppacmd delwan -i eth1
					#ppacmd addwan -i $wanif

		
				fi
			i=`expr $i + 1`
			done
			###end of VRX downstream switch configuration
		fi
	fi
	#end of Method 2
fi

#if [ $QUEUE_METHOD -eq 3 ]; then
#	if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_VR9" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_VR9" = "1" ]; then
#
#		i=0
#		while [ $i -lt $qos_queue_Count ]
#		do
#			QQ_QPRIO='$'qq_${i}_qPrio
#			#disable queues in eth mode
#			C_CMD="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=2$QQ_QPRIO eType=0 nWeight=0xffff"
#			$C_CMD
#	
#			i=$(( $i + 1 ))
#		done
#	fi
#	if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9" = "1" ]; then
#		ppacmd setctrlwfq -p 1 -c disable                                                                                                 
#        	if [ $QQ_SHAPERENABLE -eq 1 ]; then                                                                                            
#	       		ppacmd setctrlrate -p 1 -c disable                                                                                     
#		fi
#	fi	
#
#fi
if [ $QUEUE_METHOD -eq 3 ]; then

	# Default class asssignment for DSCP
	#disable if US and DS is disabled
	if [ $qm_USenable -eq 0 -a $qm_DSenable -eq 0 ]; then
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
		do 
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_DSCP_CLASS_SET nDSCP=$i nTrafficClass=0
		done
	fi

	#disable GRx switch queue config
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_CFG_SET nPortId=6 eClassMode=0 nTrafficClass=0
	
if [ $Queue_Direction -eq $UPSTREAM_QOS ]; then
	#For port 0 queues 0-3 are de-allocated in Eth1 mode.
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q7 nPortId=$WAN_PORT nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q6 nPortId=$WAN_PORT nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q5 nPortId=$WAN_PORT nTrafficClassId=3
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=4
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=5
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=6
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=7

#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=28 nPortId=7 nTrafficClassId=0
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=29 nPortId=7 nTrafficClassId=1
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=30 nPortId=7 nTrafficClassId=2
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=31 nPortId=7 nTrafficClassId=3
fi

if [ $Queue_Direction -eq $DOWNSTREAM_QOS ]; then
	#downstream
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q1 nPortId=$LAN_PORT_1 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q2 nPortId=$LAN_PORT_1 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q3 nPortId=$LAN_PORT_1 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q4 nPortId=$LAN_PORT_1 nTrafficClassId=3

#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=4 nPortId=1 nTrafficClassId=0
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=5 nPortId=1 nTrafficClassId=1
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=6 nPortId=1 nTrafficClassId=2
#	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=7 nPortId=1 nTrafficClassId=3

	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q1 nPortId=$LAN_PORT_2 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q2 nPortId=$LAN_PORT_2 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q3 nPortId=$LAN_PORT_2 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q4 nPortId=$LAN_PORT_2 nTrafficClassId=3

	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q1 nPortId=$LAN_PORT_3 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q2 nPortId=$LAN_PORT_3 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q3 nPortId=$LAN_PORT_3 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q4 nPortId=$LAN_PORT_3 nTrafficClassId=3
	
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q1 nPortId=$LAN_PORT_4 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q2 nPortId=$LAN_PORT_4 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q3 nPortId=$LAN_PORT_4 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q4 nPortId=$LAN_PORT_4 nTrafficClassId=3

fi
	#downstream end


	#enable flow control on port 6(default state)
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0x94b nData=0x180
	#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_PORT_CFG_SET nPortId=6 eEnable=1 bUnicastUnknownDrop=0 bMulticastUnknownDrop=0 bReservedPacketDrop=0 bBroadcastDrop=0 bAging=0 bLearningMAC_PortLock=0 nLearningLimit=255 ePortMonitor=0 eFlowCtrl=0
	
	#deallocate PCP-Class assignment
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=0 nTrafficClass=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=1 nTrafficClass=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=2 nTrafficClass=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=3 nTrafficClass=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=4 nTrafficClass=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=5 nTrafficClass=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=6 nTrafficClass=3
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=7 nTrafficClass=3


	#reset queues 0-3,28-31 to default state
	#If Sched type of queues is SP set queues 0-3;12-15=0xffff

if [ $Queue_Direction -eq $DOWNSTREAM_QOS ]; then
   if [ $qq_2_schedType -eq 0 ]; then
		echo " DS initialize queues"	
#		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
#			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
#		done
	   if [ "$CONFIG_PACKAGE_KMOD_LTQCPE_AR10_F2_SUPPORT" = "1" ]; then
		   for i in 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23; do
			   switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=0 nWeight=0xffff
		   done
      else
		   for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=0 nWeight=0xffff
		   done
	   fi

	fi
	#If Sched type of queues is WFQ set queues 0-3;12-15=0x1800
	if [ $qq_2_schedType -eq 2 ]; then	
		echo "DS initialize queues"	
#		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
#			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
#		done
	   if [ "$CONFIG_PACKAGE_KMOD_LTQCPE_AR10_F2_SUPPORT" = "1" ]; then
		   for i in 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23; do
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
		   done
      else
		   for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
         done
	   fi
	fi
fi

if [ $Queue_Direction -eq $UPSTREAM_QOS ]; then
   if [ $qq_2_schedType -eq 0 ]; then
		echo "US initialize queues"	
#	for i in 20 21 22 23 24 25 26 27 28 29 30 31; do
#			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
#		done
	   if [ "$CONFIG_PACKAGE_KMOD_LTQCPE_AR10_F2_SUPPORT" = "1" ]; then
		   for i in 31 30 29 28 7 6 5 4; do
			   switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=0 nWeight=0xffff
		   done
      else
		   for i in 20 21 22 23 24 25 26 27 28 29 30 31; do
			   switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=0 nWeight=0xffff
		   done
      fi
	fi
	#If Sched type of queues is WFQ set queues 0-3;12-15=0x1800
	if [ $qq_2_schedType -eq 2 ]; then	
		echo "US initialize queues"	
#		for i in 20 21 22 23 24 25 26 27 28 29 30 31; do
#			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
#		done
	   if [ "$CONFIG_PACKAGE_KMOD_LTQCPE_AR10_F2_SUPPORT" = "1" ]; then
		   for i in 31 30 29 28 7 6 5 4; do
			   switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
		   done
      else
		   for i in 20 21 22 23 24 25 26 27 28 29 30 31; do
			   switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
		   done
      fi
	fi
fi


	# Re-Setting egress cos map for mii1 interfaces 

i=0
while [ $i -lt $wan_ip_Count ]
do

	eval wanmode='$'wanip_${i}_wanMode
	eval wanif='$'wanip_${i}_iface

	if [ $wanmode -eq 2 ]; then
		# perform mapping only if wanmode is mii1 or ptm

		#set egress cos map
		vconfig set_egress_map $wanif 0 0
		vconfig set_egress_map $wanif 1 0
		vconfig set_egress_map $wanif 2 0
		vconfig set_egress_map $wanif 3 0
		vconfig set_egress_map $wanif 4 0
		vconfig set_egress_map $wanif 5 0
		vconfig set_egress_map $wanif 6 0
		vconfig set_egress_map $wanif 7 0

		#ppacmd delwan -i eth1
		#ppacmd addwan -i $wanif

	fi
	i=`expr $i + 1`
done

i=0
while [ $i -lt $wan_ppp_Count ]
do

	eval wanmode='$'wanppp_${i}_wanMode
	eval wanif='$'wanppp_${i}_iface

	if [ $wanmode -eq 2 ]; then
		# perform mapping only if wanmode is mii1 or ptm

		#set egress cos map
		vconfig set_egress_map $wanif 0 0
		vconfig set_egress_map $wanif 1 0
		vconfig set_egress_map $wanif 2 0
		vconfig set_egress_map $wanif 3 0
		vconfig set_egress_map $wanif 4 0
		vconfig set_egress_map $wanif 5 0
		vconfig set_egress_map $wanif 6 0
		vconfig set_egress_map $wanif 7 0

		#ppacmd delwan -i eth1
		#ppacmd addwan -i $wanif

		
	fi
	i=`expr $i + 1`
done

fi

if [ $QUEUE_METHOD -eq 4 ]; then
	# P6BC: Basic control register for Port 6 to enable VLAN priority based classification
	#/usr/bin/switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0xC1 nData=0x4

	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_CFG_SET nPortId=6 eClassMode=0 nTrafficClass=0

	#Egress control for strict priority
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=0 nTrafficClass=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=1 nTrafficClass=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=2 nTrafficClass=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=3 nTrafficClass=3
	#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=5 nTrafficClass=2
	#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=6 nTrafficClass=2
	#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=7 nTrafficClass=3
	#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=8 nTrafficClass=3
	
	#reset rates for all queues
	LINK_RATE=$qm_upPortRateLim
	LINK_RATE=$(echo "$LINK_RATE 1000" | awk '{print $1/$2}')
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_PSB6970_QOS_PORT_SHAPER_STRICT_SET nPort=4 nTrafficClass=0 nRate=$LINK_RATE
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_PSB6970_QOS_PORT_SHAPER_STRICT_SET nPort=4 nTrafficClass=1 nRate=$LINK_RATE
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_PSB6970_QOS_PORT_SHAPER_STRICT_SET nPort=4 nTrafficClass=2 nRate=$LINK_RATE
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_PSB6970_QOS_PORT_SHAPER_STRICT_SET nPort=4 nTrafficClass=3 nRate=$LINK_RATE
	

	#MIICR: To disable Flow control for Port 6 (CPU port)
	if [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_DANUBE" = "1" ]; then
	/usr/bin/switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0xF5 nData=0x777
	elif [ -n "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9" -a "$CONFIG_TARGET_LTQCPE_PLATFORM_AR9" = "1" ];
	then
	/usr/bin/switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0xF5 nData=0xbbb
	
	fi

	#1PPM: Priority Map register, system wide
	#/usr/bin/switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0xE8 nData=0xfa50

# Setting egress cos map for mii0 interfaces 
wan_index=`echo $wan_main_index | tr ',' ' '`	
for i in $wan_index
do
	eval wanmode='$'wan_${i}_wanMode
	# perform mapping only if wanmode is mii0
	if [ $wanmode -eq 1 ]; then
		eval vlan='$'wan_${i}_vlanId

		echo "IPQOS on vlan interface = eth0.$vlan"
		echo "IPQOS on vlan interface = eth0.$vlan" >> /tmp/ipqos_log

		#reset egress cos map
		#vconfig set_egress_map eth0.$vlan 802.1p skb-Prio
		vconfig set_egress_map eth0.$vlan 0 0
		vconfig set_egress_map eth0.$vlan 1 0
		vconfig set_egress_map eth0.$vlan 2 0
		vconfig set_egress_map eth0.$vlan 3 0
		vconfig set_egress_map eth0.$vlan 4 0
		vconfig set_egress_map eth0.$vlan 5 0
		vconfig set_egress_map eth0.$vlan 6 0
		vconfig set_egress_map eth0.$vlan 7 3
	fi
done

fi


if [ $QUEUE_METHOD -eq 5 ]; then

	if [ $Queue_Direction -eq $UPSTREAM_QOS ]; then
		if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM ] || [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then	
			UPSTREAM_Q_DEV=imq0
			tc qdisc del dev $UPSTREAM_Q_DEV root handle 1: htb
			#delete mapping to IMQ
			#iptables -t mangle -D POSTROUTING -o ppp+ -j IMQ --todev 0
			#if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
			#	iptables -t mangle -D POSTROUTING -o ptm+ -j IMQ --todev 0
			#fi
			#if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM ]; then
			#iptables -t mangle -D POSTROUTING -o nas+ -j IMQ --todev 0
			#fi

			i=0
			while [ $i -lt $wan_ppp_Count ]
			do
				eval wanmode='$'wanppp_${i}_wanMode
	
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 -a $wanmode -eq 1 ]; then 
                		   	. /etc/rc.d/get_wan_if $i "ppp"
                   			eval iface=${WAN_IFNAME}
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 -a $wanmode -eq 2 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ppp"
                   			eval iface=${WAN_IFNAME}
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       					iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ppp"
                   			eval iface=${WAN_IFNAME}
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						cmd="iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
						$cmd
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							cmd="ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
							$cmd
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ppp"
                   			eval iface=${WAN_IFNAME}
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ppp"
                   			eval iface=${WAN_IFNAME}
					iptables -t mangle -nvL POSTROUTING | grep  ${iface}
					if [ $? -ne 0 ]; then
       						iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
					fi
					if [ "$target" != "ARX1" ]; then
						ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				i=$(($i + 1))
			done

			i=0
			while [ $i -lt $wan_ip_Count ]
			do
				eval wanmode='$'wanip_${i}_wanMode
		
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 -a $wanmode -eq 1 ]; then 
                	 	  	. /etc/rc.d/get_wan_if $i "ip"
                	 	  	eval iface=${WAN_IFNAME}
					eval addrtype='$'wanip_${i}_addrType
					if [ $addrtype -ne 0 ]; then
						iptables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
						if [ "$target" != "ARX1" ]; then
							ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
							if [ $? -ne 0 ]; then
       								ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
							fi
						fi
					fi
					if [ $addrtype -eq 0 ]; then
						ebtables -t filter -L FORWARD | grep ${iface}
						if [ $? -ne 0 ]; then
							ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
						fi
					fi	
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 -a $wanmode -eq 2 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ip"
                   			eval iface=${WAN_IFNAME}
					eval addrtype='$'wanip_${i}_addrType
					if [ $addrtype -ne 0 ]; then
						iptables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
						if [ "$target" != "ARX1" ]; then
							ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
							if [ $? -ne 0 ]; then
       								ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
							fi
						fi
					fi
					if [ $addrtype -eq 0 ]; then
						ebtables -t filter -L FORWARD | grep ${iface}
						if [ $? -ne 0 ]; then
							ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_ATM -a $wanmode -eq 0 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ip"
                   			eval iface=${WAN_IFNAME}
					eval addrtype='$'wanip_${i}_addrType
					if [ $addrtype -ne 0 ]; then
						iptables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							cmd="iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
							$cmd
						fi
						if [ "$target" != "ARX1" ]; then
							ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
							if [ $? -ne 0 ]; then
       								cmd="ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0"
								$cmd
							fi
						fi
					fi
					if [ $addrtype -eq 0 ]; then
						ebtables -t filter -L FORWARD | grep ${iface}
						if [ $? -ne 0 ]; then
							ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 3 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ip"
                   			eval iface=${WAN_IFNAME}
					eval addrtype='$'wanip_${i}_addrType
					if [ $addrtype -ne 0 ]; then
						iptables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi	
						if [ "$target" != "ARX1" ]; then
							ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
							if [ $? -ne 0 ]; then
       								ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
							fi
						fi	
					fi
					if [ $addrtype -eq 0 ]; then
						ebtables -t filter -L FORWARD | grep ${iface}
						if [ $? -ne 0 ]; then
							ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM -a $wanmode -eq 4 ]; then 
                   			. /etc/rc.d/get_wan_if $i "ip"
                   			eval iface=${WAN_IFNAME}
					eval addrtype='$'wanip_${i}_addrType
					if [ $addrtype -ne 0 ]; then
						iptables -t mangle -nvL POSTROUTING | grep  ${iface}
						if [ $? -ne 0 ]; then
       							iptables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
						fi
						if [ "$target" != "ARX1" ]; then
							ip6tables -t mangle -nvL POSTROUTING | grep  ${iface}
							if [ $? -ne 0 ]; then
       								ip6tables -t mangle -D POSTROUTING -o ${iface} -j IMQ --todev 0
							fi
						fi
					fi
					if [ $addrtype -eq 0 ]; then
						ebtables -t filter -L FORWARD | grep ${iface}
						if [ $? -ne 0 ]; then
							ebtables -t filter -D FORWARD -o ${iface} -j IMQ --todev 0
						fi
					fi
        			fi
				i=$(($i + 1))
			done

			# make interface device
			ifconfig $UPSTREAM_Q_DEV down
	
			#enable PPA if PPA is supported
			if [ $CONFIG_IFX_MODEL_NAME != "DANUBE_GW_HE_ADSL_RETX_NOPPA" ]; then
	
				CMD="ppacmd control --enable-lan --enable-wan"
				echo $CMD
				$CMD
			fi
		fi
		if [ "$target" = "VRX2" ] && [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_PTM ]; then
				PORT=7
			fi
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_1 ]; then
				PORT=1
			fi
# D5 FW MII0 QoS
			if [ $qIfTypeActive -eq $QOS_INTF_WAN_ETH_0 ]; then
				PORT=0
			fi


			#disable PTM FW queues
			ppacmd setctrlwfq -p $PORT -c disable
			ppacmd setctrlrate -p $PORT -c disable
	
			QUEUE_TYPE=`/usr/sbin/status_oper GET qos_bk queue_type`
			if [ $QUEUE_TYPE -eq 0 ]; then
				ppacmd setwfq -p $PORT -q 0 -w 100
				ppacmd setwfq -p $PORT -q 1 -w 100
				ppacmd setwfq -p $PORT -q 2 -w 100
				ppacmd setwfq -p $PORT -q 3 -w 100
				ppacmd setwfq -p $PORT -q 4 -w 100
				ppacmd setwfq -p $PORT -q 5 -w 100
				ppacmd setwfq -p $PORT -q 6 -w 100
				ppacmd setwfq -p $PORT -q 7 -w 100
			else
				ppacmd setwfq -p $PORT -q 0 -w 0
				ppacmd setwfq -p $PORT -q 1 -w 0
				ppacmd setwfq -p $PORT -q 2 -w 0
				ppacmd setwfq -p $PORT -q 3 -w 0
				ppacmd setwfq -p $PORT -q 4 -w 0
				ppacmd setwfq -p $PORT -q 5 -w 0
				ppacmd setwfq -p $PORT -q 6 -w 0
				ppacmd setwfq -p $PORT -q 7 -w 0
			fi

			#802.1p egress marking Setting egress cos map for mii1/ptm interfaces 
			i=0
			while [ $i -lt $wan_ip_Count ]
			do

				eval wanmode='$'wanip_${i}_wanMode
				eval wanif='$'wanip_${i}_iface

				if [ $wanmode -eq 2 -o $wanmode -eq 3 ]; then
					# perform mapping only if wanmode is mii1 or ptm

					#set egress cos map
					vconfig set_egress_map $wanif 0 0
					vconfig set_egress_map $wanif 1 0
					vconfig set_egress_map $wanif 2 0
					vconfig set_egress_map $wanif 3 0
					vconfig set_egress_map $wanif 4 0
					vconfig set_egress_map $wanif 5 0
					vconfig set_egress_map $wanif 6 0
					vconfig set_egress_map $wanif 7 0
				fi
				i=`expr $i + 1`
			done
			
			i=0
			while [ $i -lt $wan_ppp_Count ]
			do

				eval wanmode='$'wanppp_${i}_wanMode
				eval wanif='$'wanppp_${i}_iface

				if [ $wanmode -eq 2 -o $wanmode -eq 3 ]; then
					# perform mapping only if wanmode is mii1 or ptm

					#set egress cos map
					vconfig set_egress_map $wanif 0 0
					vconfig set_egress_map $wanif 1 0
					vconfig set_egress_map $wanif 2 0
					vconfig set_egress_map $wanif 3 0
					vconfig set_egress_map $wanif 4 0
					vconfig set_egress_map $wanif 5 0
					vconfig set_egress_map $wanif 6 0
					vconfig set_egress_map $wanif 7 0
				fi

				i=`expr $i + 1`
			done

			if [ "$CONFIG_IFX_CONFIG_CPU" = "XRX288" ]; then
                        	if [ "$wanphy_phymode" = "2" ]; then
					echo eth1 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio
				elif [ "$wanphy_tc" = "1" -a "$wanphy_phymode" = "3" ]; then
					echo ptm0 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio
                                fi
			elif [ "$CONFIG_IFX_CONFIG_CPU" = "AMAZON_S" ]; then
				if [ "$wanphy_phymode" = "2" ]; then
					echo eth1 prio 0 queue 1 prio 1 queue 1 prio 2 queue 1 prio 3 queue 1 prio 4 queue 1 prio 5 queue 1 prio 6 queue 1 prio 7 queue 0 > /proc/eth/prio
                        	fi
                	fi

		fi
	fi
	
	if [ $Queue_Direction -eq $DOWNSTREAM_QOS] && [ "$target" = "VRX2" ] || [ "$target" = "ARX3" ] || [ "$target" = "VRX3" ]; then

		# Default class asssignment for DSCP
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
		do 
			switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_DSCP_CLASS_SET nDSCP=$i nTrafficClass=0
		done

		#disable GRx switch queue config
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_CFG_SET nPortId=6 eClassMode=0 nTrafficClass=0
	
		#For port 0 queues 0-3 are de-allocated in Eth1 mode.
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q7 nPortId=$WAN_PORT nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q6 nPortId=$WAN_PORT nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q5 nPortId=$WAN_PORT nTrafficClassId=3
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=4
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=5
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=6
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$WP1_Q8 nPortId=$WAN_PORT nTrafficClassId=7

	
#		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=28 nPortId=7 nTrafficClassId=0
#		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=29 nPortId=7 nTrafficClassId=1
#		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=30 nPortId=7 nTrafficClassId=2
#		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=31 nPortId=7 nTrafficClassId=3

		#downstream
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q1 nPortId=$LAN_PORT_1 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q2 nPortId=$LAN_PORT_1 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q3 nPortId=$LAN_PORT_1 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP1_Q4 nPortId=$LAN_PORT_1 nTrafficClassId=3


	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q1 nPortId=$LAN_PORT_2 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q2 nPortId=$LAN_PORT_2 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q3 nPortId=$LAN_PORT_2 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP2_Q4 nPortId=$LAN_PORT_2 nTrafficClassId=3

	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q1 nPortId=$LAN_PORT_3 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q2 nPortId=$LAN_PORT_3 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q3 nPortId=$LAN_PORT_3 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP3_Q4 nPortId=$LAN_PORT_3 nTrafficClassId=3
	
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q1 nPortId=$LAN_PORT_4 nTrafficClassId=0
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q2 nPortId=$LAN_PORT_4 nTrafficClassId=1
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q3 nPortId=$LAN_PORT_4 nTrafficClassId=2
	switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_QUEUE_PORT_SET nQueueId=$LP4_Q4 nPortId=$LAN_PORT_4 nTrafficClassId=3

		#downstream end


		#enable flow control on port 6(default state)
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_REGISTER_SET nRegAddr=0x94b nData=0x180
		#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_PORT_CFG_SET nPortId=6 eEnable=1 bUnicastUnknownDrop=0 bMulticastUnknownDrop=0 bReservedPacketDrop=0 bBroadcastDrop=0 bAging=0 bLearningMAC_PortLock=0 nLearningLimit=255 ePortMonitor=0 eFlowCtrl=0
	
		#deallocate PCP-Class assignment
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=0 nTrafficClass=0
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=1 nTrafficClass=0
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=2 nTrafficClass=1
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=3 nTrafficClass=1
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=4 nTrafficClass=2
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=5 nTrafficClass=2
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=6 nTrafficClass=3
		switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=7 nTrafficClass=3


		#reset queues 0-3,28-31 to default state
		#If Sched type of queues is SP set queues 0-3;12-15=0xffff
		if [ $qq_2_schedType -eq 0 ]; then
			echo " initialize queues"	
			for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31; do
				switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0xffff
			done
		fi
		#If Sched type of queues is WFQ set queues 0-3;12-15=0x1800
		if [ $qq_2_schedType -eq 2 ]; then	
			echo " initialize queues"	
			for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31; do
				switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_SCHEDULER_CFG_SET nQueueId=$i eType=1 nWeight=0x1800
			done
		fi
		# Re-Setting egress cos map for mii1 interfaces 

		i=0
		while [ $i -lt $wan_ip_Count ]
		do

			eval wanmode='$'wanip_${i}_wanMode
			eval wanif='$'wanip_${i}_iface

			if [ $wanmode -eq 2 ]; then
				# perform mapping only if wanmode is mii1 or ptm

				#set egress cos map
				vconfig set_egress_map $wanif 0 0
				vconfig set_egress_map $wanif 1 0
				vconfig set_egress_map $wanif 2 0
				vconfig set_egress_map $wanif 3 0
				vconfig set_egress_map $wanif 4 0
				vconfig set_egress_map $wanif 5 0
				vconfig set_egress_map $wanif 6 0
				vconfig set_egress_map $wanif 7 0

				#ppacmd delwan -i eth1
				#ppacmd addwan -i $wanif

			fi
			i=`expr $i + 1`
		done

		i=0
		while [ $i -lt $wan_ppp_Count ]
		do

			eval wanmode='$'wanppp_${i}_wanMode
			eval wanif='$'wanppp_${i}_iface

			if [ $wanmode -eq 2 ]; then
				# perform mapping only if wanmode is mii1 or ptm
	
				#set egress cos map
				vconfig set_egress_map $wanif 0 0
				vconfig set_egress_map $wanif 1 0
				vconfig set_egress_map $wanif 2 0
				vconfig set_egress_map $wanif 3 0
				vconfig set_egress_map $wanif 4 0
				vconfig set_egress_map $wanif 5 0
				vconfig set_egress_map $wanif 6 0
				vconfig set_egress_map $wanif 7 0

				#ppacmd delwan -i eth1
				#ppacmd addwan -i $wanif

		
			fi
			i=`expr $i + 1`
		done
		###end of VRX downstream switch configuration
	fi
fi

####################################Upstream Queues########################################

	#Set queuing method as none
	#/usr/sbin/status_oper SET "qos_bk" "queue_method" "0"
	#/bin/sed -i -e "s,^queue_method=.*,queue_method=\"0\",g" /tmp/system_status
	/usr/sbin/status_oper -u -f /tmp/system_status SET "qos_bk" "queue_method" "0"
