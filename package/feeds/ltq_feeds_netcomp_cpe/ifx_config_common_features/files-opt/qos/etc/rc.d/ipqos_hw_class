#!/bin/sh
if [ ! "$ENVLOADED" ]; then
        if [ -r /etc/rc.conf ]; then
                 . /etc/rc.conf 2> /dev/null
		# To Read Remark VID & VPRIO From Tmp. It is tempurary.
		if [ -r /tmp/system_status ]; then
                	. /tmp/system_status 2> /dev/null
		fi
                ENVLOADED="1"
        fi
fi


if [ ! "$CONFIGLOADED" ]; then
        if [ -r /etc/rc.d/config.sh ]; then
                . /etc/rc.d/config.sh 2>/dev/null
        fi
        if [ -r /etc/rc.d/config_qos.sh ]; then
                . /etc/rc.d/config_qos.sh 2>/dev/null
        fi
                CONFIGLOADED="1"
fi

platform=${CONFIG_IFX_MODEL_NAME%%_*}
if [ "$platform" = "DANUBE" -o "$platform" = "AMAZON" -o "$platform" = "TP-VE" -o "$platform" = "GW188" ]; then
	target=$platform
else
	target=`echo $platform | cut -c -4`
fi

#$1 - instance

i=$1
QOS_DIRECTION=$3

US_QOS=1
DS_QOS=2

# Define interface types
	# NOTE: These values should match with the values in the enum 
        QOS_INTF_LAN=0
        QOS_INTF_LOCAL=7
        QOS_INTF_ALL=13
	QOS_INTF_WAN_ATM=9
	QOS_INTF_WAN_PTM=10
	QOS_INTF_WAN_ETH_0=11
	QOS_INTF_WAN_ETH_1=12
        QOS_INTF_LAN_SPECIFIC=14
	QOS_INTF_WAN=15
	QOS_INTF_WAN_ALL=4

# define QOS type 
	# NOTE: thease values should match with the values in the enum
	# TBD: If want to support other types, should add here
	QOS_TYPE_MFC=0
	QOS_TYPE_DSCP=1
	QOS_TYPE_802_1P=2


	
case "$wanphy_phymode" in
	0)
		case "$wanphy_tc" in
			0)
				#wan mode is ATM
				qIfTypeActive=$QOS_INTF_WAN_ATM;
				;;
			1)
				#wan mode is PTM
				qIfTypeActive=$QOS_INTF_WAN_PTM;
				;;
		esac
		;;
	1)
		#wan mode is MII0
		qIfTypeActive=$QOS_INTF_WAN_ETH_0;
		;;
	2)
		#wan mode is MII1
		qIfTypeActive=$QOS_INTF_WAN_ETH_1;
		;;
	3)
		#wan mode is PTM
		qIfTypeActive=$QOS_INTF_WAN_PTM;
		;;
esac

if [ $QOS_DIRECTION -eq $US_QOS ]; then


	#Get the qId of the classifier
	eval cl_qId='$'qcl_${i}_qId

	n=0
	while [ $n -lt $qos_queue_Count ]
	do
		eval qCpeId='$'qq_${n}_cpeId
		if [ $qCpeId -eq $cl_qId ]; then
			eval qIfType='$'qq_${n}_qIfType	
			eval queue_prio='$'qq_${n}_qPrio
			#if [ $qIfType -eq $qIfTypeActive ]; then
				# read each parameters from rc.conf
		        	eval QOS_CPEID='$'qcl_${i}_cpeId
		        	eval QOS_ORDER='$'qcl_${i}_order
		        	if [ $2 -eq 1 ]; then
			        	if [ $QOS_ORDER -gt $1 ]; then
			        		QOS_ORDER=$(( $1 + 1 )) 
			        	fi
		        	fi
		        	eval QOS_TYPE='$'qcl_${i}_type
		        	eval QOS_IFTYPE='$'qcl_${i}_classifType
		        	eval QOS_SPECIF='$'qcl_${i}_specIf
				eval QOS_QID='$'qcl_${i}_qId
		       		eval QOS_IFNAME='$'qcl_${i}_ifname
				eval QOS_ENABLE='$'qcl_${i}_enable
				eval QOS_RATELMT='$'qcl_${i}_rateLmt
				eval QOS_RATECTRENBL='$'qcl_${i}_rateCtrlEnbl
				NF_MARK=$QOS_QID

				if [ $QOS_ENABLE -eq 1 -a $QOS_RATECTRENBL -eq 1 -a $QOS_RATELMT -gt 0 ]; then
					#LQ Change Fill NF_MARK
					# TBD: Calculate queue classifier mapped index
					queuecfg -w $QOS_QID/$QOS_CPEID
					QQ_QCL_MAPPED_IDX=$?
					if [ $QQ_QCL_MAPPED_IDX -gt 0 ]; then
						QQ_QCL_MAPPED_IDX=$(($QQ_QCL_MAPPED_IDX<<10))
						NF_MARK=$(($QQ_QCL_MAPPED_IDX|$QOS_QID))
					fi
				fi

		        	eval QOS_PROTO='$'qcl_${i}_proto
	
			        eval QOS_PROTOEXCL='$'qcl_${i}_protoExcl
	
			        eval QOS_DSTIP='$'qcl_${i}_dstIP
			        eval QOS_DSTIPMASK='$'qcl_${i}_dstIPMask
			        eval QOS_DSTIPEXCL='$'qcl_${i}_dstIPExcl

		        	eval QOS_SRCIP='$'qcl_${i}_srcIP
			        eval QOS_SRCIPMASK='$'qcl_${i}_srcIPMask
			        eval QOS_SRCIPEXCL='$'qcl_${i}_srcIPExcl

			        eval QOS_DSTPORT='$'qcl_${i}_dstPort
		        	eval QOS_DSTPORTEND='$'qcl_${i}_dstPortEnd
			        eval QOS_DSTPORTEXCL='$'qcl_${i}_dstPortExcl
	
			        eval QOS_SRCPORT='$'qcl_${i}_srcPort
		        	eval QOS_SRCPORTEND='$'qcl_${i}_srcPortEnd
			        eval QOS_SRCPORTEXCL='$'qcl_${i}_srcPortExcl

		        	eval QOS_SRCMAC='$'qcl_${i}_srcMac
			        eval QOS_SRCMACMASK='$'qcl_${i}_srcMacMask
			        eval QOS_SRCMACEXCL='$'qcl_${i}_srcMacExcl
	
		        	eval QOS_DSTMAC='$'qcl_${i}_dstMac
			        eval QOS_DSTMACMASK='$'qcl_${i}_dstMacMask
			        eval QOS_DSTMACEXCL='$'qcl_${i}_dstMacExcl
	
			        eval QOS_INDSCP='$'qcl_${i}_inDscp
			        eval QOS_INDSCPEXCL='$'qcl_${i}_inDscpExcl
			        eval QOS_DSCPMARK='$'qcl_${i}_dscpMark

			        eval QOS_IN802_1P='$'qcl_${i}_inPBits
			        eval QOS_IN802_1PEXCL='$'qcl_${i}_inPBitsExcl
			        eval QOS_802_1PMARK='$'qcl_${i}_PBitsMark

			        eval QOS_INPBITS='$'qcl_${i}_inPbits
			        eval QOS_INPBITSEXCL='$'qcl_${i}_inPbitsExcl
			        eval QOS_PBITSMARK='$'qcl_${i}_pBitsMark

			        eval QOS_INVLANID='$'qcl_${i}_vlanId
			        eval QOS_VLANIDEXCL='$'qcl_${i}_vlanIdExcl
			        eval QOS_FWPOLICY='$'qcl_${i}_fwPolicy

				if [ "$target" == "ARX3" -a "$wanphy_phymode" == "2" ]; then
        				chain_selection=0
  				else
         				chain_selection=1
  				fi

		
	
				# Flow15 switch based classification
				if [ $QOS_IFTYPE -eq $QOS_INTF_LAN -o $QOS_IFTYPE -eq $QOS_INTF_LAN_SPECIFIC -o $QOS_IFTYPE -eq $QOS_INTF_ALL -o $QOS_IFTYPE -eq $QOS_INTF_WAN ]; then
					#	echo "HW Classification for IFTYPE = $QOS_IFTYPE"	
					if [ "$target" = "GRX2" -o "$target" = "VRX2"  -o "$target" = "RT2" -o $chain_selection -eq 0 ]; then
	
						#echo "Entering HW classification in ipqos_HW_add"
	
						#conversion from NF_MARK to Q_Prio
						if [ "$target" = "GRX2" ]; then
							#echo "entering GRX288 part"
							MOD_MARK=`expr $queue_prio - 1`
						fi
						if [ "$target" = "VRX2" ]; then
						
							MOD_MARK=`expr $queue_prio - 1`
						fi

						MOD_MARK=`expr $queue_prio - 1`

						#Form the switch_cli rule
						switch_cmd="dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_PCE_RULE_WRITE" 

						#eval nORDER=expr`$QOS_ORDER + 10`
						#All classifiers added from web will be assigned order from 11,
						#0 => default order; 1 => RTP_UPSTREAM; 2 => RTP_DOWNSTREAM; 3 => SIP_US; 4 => SIP_DS ; 5 => MGMT_DS; 11 + => USER defined
						if [ $QOS_IFTYPE -eq $QOS_INTF_LAN -o $QOS_IFTYPE -eq $QOS_INTF_LAN_SPECIFIC -o $QOS_IFTYPE -eq $QOS_INTF_ALL ]; then
		
							nORDER=$(( $QOS_ORDER + 10 ))
						fi
						if [ $QOS_IFTYPE -eq $QOS_INTF_WAN ]; then
							#Downstream classifiers start from order 30 onwards
							#nORDER=$(( $QOS_ORDER + 30 ))
							nORDER=$(( $QOS_ORDER + 30 ))
						fi
		
						#echo "adding hw classifier for order: $nORDER"
						switch_cmd="$switch_cmd pattern.nIndex=$nORDER"

						bEnable=$QOS_ENABLE
						switch_cmd="$switch_cmd pattern.bEnable=$bEnable"
		 	
		 				if [ $QOS_INDSCP != -1 ]; then
							bDSCP_Enable="1"
				 			nDSCP=$QOS_INDSCP
				 			switch_cmd="$switch_cmd pattern.bDSCP_Enable=$bDSCP_Enable pattern.nDSCP=$nDSCP"
						fi
		 				if [ $QOS_IN802_1P != -1 ]; then
					 		bPCP_Enable="1"
				 			nPCP=$QOS_IN802_1P
				 			switch_cmd="$switch_cmd pattern.bPCP_Enable=$bPCP_Enable pattern.nPCP=$nPCP"
						fi
						#Manamohan: Added the support for VlanId based classification
						if [ $QOS_INVLANID != -1 ]; then
		
							switch_cmd="$switch_cmd pattern.bVid=1 pattern.nVid=$QOS_INVLANID"

						fi			
						if [ ! -z $QOS_SRCMAC ]; then
							bMAC_SrcEnable=1
							#nMAC_SrcMask=$QOS_SRCMACMASK
							nMAC_SrcMask=0xff00
							nMAC_Src=$QOS_SRCMAC
							switch_cmd="$switch_cmd pattern.bMAC_SrcEnable=$bMAC_SrcEnable pattern.nMAC_Src=$nMAC_Src pattern.nMAC_SrcMask=$nMAC_SrcMask"
						fi
						if [ ! -z $QOS_DSTMAC ]; then
							bMAC_DstEnable=1
							#Remove the below line when Dst MAC is supported in QoS, this is added since rc.conf has a param and it is left as null
							#swutility needs default value as 0.
			
							nMAC_DstMask=0xff00
							nMAC_Dst=$QOS_DSTMAC
							switch_cmd="$switch_cmd pattern.bMAC_DstEnable=$bMAC_DstEnable pattern.nMAC_Dst=$nMAC_Dst pattern.nMAC_DstMask=$nMAC_DstMask"
						fi
						if [ $QOS_SRCPORT != -1 ]; then
							bAppDataMSB_Enable=1
				 			nAppDataMSB=$QOS_SRCPORT
				 			switch_cmd="$switch_cmd pattern.bAppDataMSB_Enable=$bAppDataMSB_Enable pattern.nAppDataMSB=$nAppDataMSB"

						fi
						if [ $QOS_SRCPORTEND != -1 ]; then
							bAppMaskRangeMSB_Enable=1
							#SRC_PORTMASK=0xff00
							#SRC_PORTMASK=$QOS_SRCPORTEND
							SRC_PORTMASK=`expr $QOS_SRCPORTEND - $QOS_SRCPORT`
							switch_cmd="$switch_cmd pattern.bAppMaskRangeMSB_Select=$bAppMaskRangeMSB_Enable pattern.nAppMaskRangeMSB=$SRC_PORTMASK"

						fi
						if [ $QOS_DSTPORT != -1 ]; then
							bAppDataLSB_Enable=1
							nAppDataLSB=$QOS_DSTPORT
							switch_cmd="$switch_cmd pattern.bAppDataLSB_Enable=$bAppDataLSB_Enable pattern.nAppDataLSB=$nAppDataLSB"
						fi
	
						if [ $QOS_DSTPORTEND != -1 ]; then
							bAppMaskRangeLSB_Select=1
							#DST_PORTMASK=0xff00
							#DST_PORTMASK=$QOS_DSTPORTEND
							DST_PORTMASK=`expr $QOS_DSTPORTEND - $QOS_DSTPORT`
							switch_cmd="$switch_cmd pattern.bAppMaskRangeLSB_Select=$bAppMaskRangeLSB_Select pattern.nAppMaskRangeLSB=$DST_PORTMASK"
						fi
						if [ ! -z $QOS_DSTIP ]; then
							eDstIP_Select=1
							nDstIP=$QOS_DSTIP
							nDstIP_Mask=0xffffff00
							switch_cmd="$switch_cmd pattern.eDstIP_Select=$eDstIP_Select pattern.nDstIP=$nDstIP pattern.nDstIP_Mask=$nDstIP_Mask"
						fi
						if [ ! -z $QOS_SRCIP ]; then
							eSrcIP_Select=1
							nSrcIP=$QOS_SRCIP
							nSrcIP_Mask=0xffffff00
							switch_cmd="$switch_cmd pattern.eSrcIP_Select=$eSrcIP_Select pattern.nSrcIP=$nSrcIP pattern.nSrcIP_Mask=$nSrcIP_Mask"
						fi
		
						if [ $QOS_PROTO != -1 ]; then
							bProtocolEnable=1
							nProtocol=$QOS_PROTO
							nProtocolMask=$QOS_PROTO
							switch_cmd="$switch_cmd pattern.bProtocolEnable=$bProtocolEnable pattern.nProtocol=$nProtocol pattern.nProtocolMask=$nProtocolMask"
						fi

						eTrafficClassAction=2
						nTrafficClassAlternate=$MOD_MARK
						switch_cmd="$switch_cmd action.eTrafficClassAction=$eTrafficClassAction action.nTrafficClassAlternate=$nTrafficClassAlternate"
		
						if [ $QOS_802_1PMARK != -1 ]; then
							bRemarkPCP=1
							switch_cmd="$switch_cmd action.bRemarkPCP=$bRemarkPCP"
						fi
			
#						if [ $QOS_DSCPMARK != -1 ]; then
#							bRemarkDSCP=1
#							switch_cmd="$switch_cmd action.bRemarkDSCP=$bRemarkDSCP"
#						fi
        	
#						if [ $QOS_DSCPMARK != -1 -o $QOS_802_1PMARK != -1 ]; then
#        	                			bRemarkClass=1
#							switch_cmd="$switch_cmd action.bRemarkClass=$bRemarkClass"
#	                			fi

						#Add MFC rule
						if [ $QOS_TYPE -eq $QOS_TYPE_MFC ]; then

							#echo "PCE Rule in ipqos_class_add rule $nORDER"
							switch_cmd="switch_cli $switch_cmd"
							$switch_cmd >> /tmp/ipqos_tmp.log
	
							if [ $QOS_802_1PMARK != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_CLASS_PCP_SET nTrafficClass=$nTrafficClassAlternate nPCP=$QOS_802_1PMARK"
								$cmd
								#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=0
								#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=5 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$WAN_PORT bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_1 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_2 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_3 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_4 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

							fi

						fi

						#ADD DSCP based classifier rule
						if [ $QOS_TYPE -eq $QOS_TYPE_DSCP ]; then
							if [ $QOS_INDSCP != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_DSCP_CLASS_SET nDSCP=$QOS_INDSCP nTrafficClass=$nTrafficClassAlternate"
								$cmd >> /tmp/ipqos_tmp.log
							fi
						fi
	
						#Check and add 802.1P Remarking rule
						if [ $QOS_TYPE -eq $QOS_TYPE_802_1P ]; then
							if [ $QOS_IN802_1P != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=$QOS_IN802_1P nTrafficClass=$nTrafficClassAlternate"
								$cmd >> /tmp/ipqos_tmp.log
							fi
							if [ $QOS_802_1PMARK != -1 ]; then
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6  bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=0
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$WAN_PORT  bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_CLASS_PCP_SET nTrafficClass=$nTrafficClassAlternate nPCP=$QOS_802_1PMARK"
								$cmd >> /tmp/ipqos_tmp.log
	
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_1 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_2 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_3 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_4 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

							fi
						fi	
	
						#end of hw classifier
					fi	
				fi
			#fi
		fi

	n=$(( $n + 1 ))
	done
fi
if [ $QOS_DIRECTION -eq $DS_QOS ]; then

	#Get the qId of the classifier
	eval cl_qId='$'qclds_${i}_qId

	n=0
	while [ $n -lt $qos_queue_Count ]
	do
		eval qCpeId='$'qq_${n}_cpeId
		if [ $qCpeId -eq $cl_qId ]; then
			eval qIfType='$'qq_${n}_qIfType	
			eval queue_prio='$'qq_${n}_qPrio
			#if [ $qIfType -eq $qIfTypeActive ]; then
				# read each parameters from rc.conf
		        	eval QOS_CPEID='$'qclds_${i}_cpeId
		        	eval QOS_ORDER='$'qclds_${i}_order
		        	if [ $2 -eq 1 ]; then
			        	if [ $QOS_ORDER -gt $1 ]; then
			        		QOS_ORDER=$(( $1 + 1 )) 
			        	fi
		        	fi
		        	eval QOS_TYPE='$'qclds_${i}_type
		        	eval QOS_IFTYPE='$'qclds_${i}_classifType
		        	eval QOS_SPECIF='$'qclds_${i}_specIf
				eval QOS_QID='$'qclds_${i}_qId
		       		eval QOS_IFNAME='$'qclds_${i}_ifname
				eval QOS_ENABLE='$'qclds_${i}_enable
				eval QOS_RATELMT='$'qclds_${i}_rateLmt
				eval QOS_RATECTRENBL='$'qclds_${i}_rateCtrlEnbl
				NF_MARK=$QOS_QID

				if [ $QOS_ENABLE -eq 1 -a $QOS_RATECTRENBL -eq 1 -a $QOS_RATELMT -gt 0 ]; then
					#LQ Change Fill NF_MARK
					# TBD: Calculate queue classifier mapped index
					queuecfg -w $QOS_QID/$QOS_CPEID
					QQ_QCL_MAPPED_IDX=$?
					if [ $QQ_QCL_MAPPED_IDX -gt 0 ]; then
						QQ_QCL_MAPPED_IDX=$(($QQ_QCL_MAPPED_IDX<<10))
						NF_MARK=$(($QQ_QCL_MAPPED_IDX|$QOS_QID))
					fi
				fi

		        	eval QOS_PROTO='$'qclds_${i}_proto
	
			        eval QOS_PROTOEXCL='$'qclds_${i}_protoExcl
	
			        eval QOS_DSTIP='$'qclds_${i}_dstIP
			        eval QOS_DSTIPMASK='$'qclds_${i}_dstIPMask
			        eval QOS_DSTIPEXCL='$'qclds_${i}_dstIPExcl

		        	eval QOS_SRCIP='$'qclds_${i}_srcIP
			        eval QOS_SRCIPMASK='$'qclds_${i}_srcIPMask
			        eval QOS_SRCIPEXCL='$'qclds_${i}_srcIPExcl

			        eval QOS_DSTPORT='$'qclds_${i}_dstPort
		        	eval QOS_DSTPORTEND='$'qclds_${i}_dstPortEnd
			        eval QOS_DSTPORTEXCL='$'qclds_${i}_dstPortExcl
	
			        eval QOS_SRCPORT='$'qclds_${i}_srcPort
		        	eval QOS_SRCPORTEND='$'qclds_${i}_srcPortEnd
			        eval QOS_SRCPORTEXCL='$'qclds_${i}_srcPortExcl

		        	eval QOS_SRCMAC='$'qclds_${i}_srcMac
			        eval QOS_SRCMACMASK='$'qclds_${i}_srcMacMask
			        eval QOS_SRCMACEXCL='$'qclds_${i}_srcMacExcl
	
		        	eval QOS_DSTMAC='$'qclds_${i}_dstMac
			        eval QOS_DSTMACMASK='$'qclds_${i}_dstMacMask
			        eval QOS_DSTMACEXCL='$'qclds_${i}_dstMacExcl
	
			        eval QOS_INDSCP='$'qclds_${i}_inDscp
			        eval QOS_INDSCPEXCL='$'qclds_${i}_inDscpExcl
			        eval QOS_DSCPMARK='$'qclds_${i}_dscpMark

			        eval QOS_IN802_1P='$'qclds_${i}_inPBits
			        eval QOS_IN802_1PEXCL='$'qclds_${i}_inPBitsExcl
			        eval QOS_802_1PMARK='$'qclds_${i}_PBitsMark

			        eval QOS_INPBITS='$'qclds_${i}_inPbits
			        eval QOS_INPBITSEXCL='$'qclds_${i}_inPbitsExcl
			        eval QOS_PBITSMARK='$'qclds_${i}_pBitsMark

			        eval QOS_INVLANID='$'qclds_${i}_vlanId
			        eval QOS_VLANIDEXCL='$'qclds_${i}_vlanIdExcl
			        eval QOS_FWPOLICY='$'qclds_${i}_fwPolicy

				if [ "$target" == "ARX3" -a "$wanphy_phymode" == "2" ]; then
        				chain_selection=0
  				else
         				chain_selection=1
  				fi

		
	
				# Flow15 switch based classification
				if [ $QOS_IFTYPE -eq $QOS_INTF_LAN -o $QOS_IFTYPE -eq $QOS_INTF_LAN_SPECIFIC -o $QOS_IFTYPE -eq $QOS_INTF_ALL -o $QOS_IFTYPE -eq $QOS_INTF_WAN ]; then
					#	echo "HW Classification for IFTYPE = $QOS_IFTYPE"	
					if [ "$target" = "GRX2" -o "$target" = "VRX2"  -o "$target" = "RT2" -o $chain_selection -eq 0 ]; then
	
						#echo "Entering HW classification in ipqos_HW_add"
	
						#conversion from NF_MARK to Q_Prio
						if [ "$target" = "GRX2" ]; then
							#echo "entering GRX288 part"
							MOD_MARK=`expr $queue_prio - 1`
						fi
						if [ "$target" = "VRX2" ]; then
						
							MOD_MARK=`expr $queue_prio - 1`
						fi

						MOD_MARK=`expr $queue_prio - 1`

						#Form the switch_cli rule
						switch_cmd="dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_FLOW_PCE_RULE_WRITE" 

						#eval nORDER=expr`$QOS_ORDER + 10`
						#All classifiers added from web will be assigned order from 11,
						#0 => default order; 1 => RTP_UPSTREAM; 2 => RTP_DOWNSTREAM; 3 => SIP_US; 4 => SIP_DS ; 5 => MGMT_DS; 11 + => USER defined
						if [ $QOS_IFTYPE -eq $QOS_INTF_LAN -o $QOS_IFTYPE -eq $QOS_INTF_LAN_SPECIFIC -o $QOS_IFTYPE -eq $QOS_INTF_ALL ]; then
		
							nORDER=$(( $QOS_ORDER + 10 ))
						fi
						if [ $QOS_IFTYPE -eq $QOS_INTF_WAN ]; then
							#Downstream classifiers start from order 30 onwards
							#nORDER=$(( $QOS_ORDER + 30 ))
							nORDER=$(( $QOS_ORDER + 30 ))
						fi
		
						#echo "adding hw classifier for order: $nORDER"
						switch_cmd="$switch_cmd pattern.nIndex=$nORDER"

						bEnable=$QOS_ENABLE
						switch_cmd="$switch_cmd pattern.bEnable=$bEnable"
		 	
		 				if [ $QOS_INDSCP != -1 ]; then
							bDSCP_Enable="1"
				 			nDSCP=$QOS_INDSCP
				 			switch_cmd="$switch_cmd pattern.bDSCP_Enable=$bDSCP_Enable pattern.nDSCP=$nDSCP"
						fi
		 				if [ $QOS_IN802_1P != -1 ]; then
					 		bPCP_Enable="1"
				 			nPCP=$QOS_IN802_1P
				 			switch_cmd="$switch_cmd pattern.bPCP_Enable=$bPCP_Enable pattern.nPCP=$nPCP"
						fi
						#Manamohan: Added the support for VlanId based classification
						if [ $QOS_INVLANID != -1 ]; then
		
							switch_cmd="$switch_cmd pattern.bVid=1 pattern.nVid=$QOS_INVLANID"

						fi			
						if [ ! -z $QOS_SRCMAC ]; then
							bMAC_SrcEnable=1
							#nMAC_SrcMask=$QOS_SRCMACMASK
							nMAC_SrcMask=0xff00
							nMAC_Src=$QOS_SRCMAC
							switch_cmd="$switch_cmd pattern.bMAC_SrcEnable=$bMAC_SrcEnable pattern.nMAC_Src=$nMAC_Src pattern.nMAC_SrcMask=$nMAC_SrcMask"
						fi
						if [ ! -z $QOS_DSTMAC ]; then
							bMAC_DstEnable=1
							#Remove the below line when Dst MAC is supported in QoS, this is added since rc.conf has a param and it is left as null
							#swutility needs default value as 0.
			
							nMAC_DstMask=0xff00
							nMAC_Dst=$QOS_DSTMAC
							switch_cmd="$switch_cmd pattern.bMAC_DstEnable=$bMAC_DstEnable pattern.nMAC_Dst=$nMAC_Dst pattern.nMAC_DstMask=$nMAC_DstMask"
						fi
						if [ $QOS_SRCPORT != -1 ]; then
							bAppDataMSB_Enable=1
				 			nAppDataMSB=$QOS_SRCPORT
				 			switch_cmd="$switch_cmd pattern.bAppDataMSB_Enable=$bAppDataMSB_Enable pattern.nAppDataMSB=$nAppDataMSB"

						fi
						if [ $QOS_SRCPORTEND != -1 ]; then
							bAppMaskRangeMSB_Enable=1
							#SRC_PORTMASK=0xff00
							#SRC_PORTMASK=$QOS_SRCPORTEND
							SRC_PORTMASK=`expr $QOS_SRCPORTEND - $QOS_SRCPORT`
							switch_cmd="$switch_cmd pattern.bAppMaskRangeMSB_Select=$bAppMaskRangeMSB_Enable pattern.nAppMaskRangeMSB=$SRC_PORTMASK"

						fi
						if [ $QOS_DSTPORT != -1 ]; then
							bAppDataLSB_Enable=1
							nAppDataLSB=$QOS_DSTPORT
							switch_cmd="$switch_cmd pattern.bAppDataLSB_Enable=$bAppDataLSB_Enable pattern.nAppDataLSB=$nAppDataLSB"
						fi
	
						if [ $QOS_DSTPORTEND != -1 ]; then
							bAppMaskRangeLSB_Select=1
							#DST_PORTMASK=0xff00
							#DST_PORTMASK=$QOS_DSTPORTEND
							DST_PORTMASK=`expr $QOS_DSTPORTEND - $QOS_DSTPORT`
							switch_cmd="$switch_cmd pattern.bAppMaskRangeLSB_Select=$bAppMaskRangeLSB_Select pattern.nAppMaskRangeLSB=$DST_PORTMASK"
						fi
						if [ ! -z $QOS_DSTIP ]; then
							eDstIP_Select=1
							nDstIP=$QOS_DSTIP
							nDstIP_Mask=0xffffff00
							switch_cmd="$switch_cmd pattern.eDstIP_Select=$eDstIP_Select pattern.nDstIP=$nDstIP pattern.nDstIP_Mask=$nDstIP_Mask"
						fi
						if [ ! -z $QOS_SRCIP ]; then
							eSrcIP_Select=1
							nSrcIP=$QOS_SRCIP
							nSrcIP_Mask=0xffffff00
							switch_cmd="$switch_cmd pattern.eSrcIP_Select=$eSrcIP_Select pattern.nSrcIP=$nSrcIP pattern.nSrcIP_Mask=$nSrcIP_Mask"
						fi
		
						if [ $QOS_PROTO != -1 ]; then
							bProtocolEnable=1
							nProtocol=$QOS_PROTO
							nProtocolMask=$QOS_PROTO
							switch_cmd="$switch_cmd pattern.bProtocolEnable=$bProtocolEnable pattern.nProtocol=$nProtocol pattern.nProtocolMask=$nProtocolMask"
						fi

						eTrafficClassAction=2
						nTrafficClassAlternate=$MOD_MARK
						switch_cmd="$switch_cmd action.eTrafficClassAction=$eTrafficClassAction action.nTrafficClassAlternate=$nTrafficClassAlternate"
		
						if [ $QOS_802_1PMARK != -1 ]; then
							bRemarkPCP=1
							switch_cmd="$switch_cmd action.bRemarkPCP=$bRemarkPCP"
						fi
			
#						if [ $QOS_DSCPMARK != -1 ]; then
#							bRemarkDSCP=1
#							switch_cmd="$switch_cmd action.bRemarkDSCP=$bRemarkDSCP"
#						fi
        	
#						if [ $QOS_DSCPMARK != -1 -o $QOS_802_1PMARK != -1 ]; then
#        	                			bRemarkClass=1
#							switch_cmd="$switch_cmd action.bRemarkClass=$bRemarkClass"
#	                			fi

						#Add MFC rule
						if [ $QOS_TYPE -eq $QOS_TYPE_MFC ]; then

							#echo "PCE Rule in ipqos_class_add rule $nORDER"
							switch_cmd="switch_cli $switch_cmd"
							$switch_cmd >> /tmp/ipqos_tmp.log
	
							if [ $QOS_802_1PMARK != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_CLASS_PCP_SET nTrafficClass=$nTrafficClassAlternate nPCP=$QOS_802_1PMARK"
								$cmd
								#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=0
								#switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=5 bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$WAN_PORT bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_1 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_2 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_3 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_4 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

							fi

						fi

						#ADD DSCP based classifier rule
						if [ $QOS_TYPE -eq $QOS_TYPE_DSCP ]; then
							if [ $QOS_INDSCP != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_DSCP_CLASS_SET nDSCP=$QOS_INDSCP nTrafficClass=$nTrafficClassAlternate"
								$cmd >> /tmp/ipqos_tmp.log
							fi
						fi
	
						#Check and add 802.1P Remarking rule
						if [ $QOS_TYPE -eq $QOS_TYPE_802_1P ]; then
							if [ $QOS_IN802_1P != -1 ]; then
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PCP_CLASS_SET nPCP=$QOS_IN802_1P nTrafficClass=$nTrafficClassAlternate"
								$cmd >> /tmp/ipqos_tmp.log
							fi
							if [ $QOS_802_1PMARK != -1 ]; then
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=6  bPCP_IngressRemarkingEnable=1 bPCP_EgressRemarkingEnable=0
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$WAN_PORT  bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								cmd="switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_CLASS_PCP_SET nTrafficClass=$nTrafficClassAlternate nPCP=$QOS_802_1PMARK"
								$cmd >> /tmp/ipqos_tmp.log
	
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_1 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_2 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_3 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1
								switch_cli dev=$CONFIG_LTQ_SWITCH_DEVICE_ID IFX_ETHSW_QOS_PORT_REMARKING_CFG_SET nPortId=$LAN_PORT_4 bPCP_IngressRemarkingEnable=0 bPCP_EgressRemarkingEnable=1

							fi
						fi	
	
						#end of hw classifier
					fi	
				fi
			#fi
		fi

	n=$(( $n + 1 ))
	done
fi
