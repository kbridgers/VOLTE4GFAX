--- matrixssl-1.8.3/matrixssl/src/Makefile	2010-04-19 15:57:26.000000000 +0530
+++ matrixssl-1.8.3.patched/matrixssl/src/Makefile	2010-04-23 18:27:38.861140000 +0530
@@ -5,10 +5,10 @@
 #	Copyright (c) PeerSec Networks, 2002-2007. All Rights Reserved.
 #
 
-CC      = gcc
-STRIP   = strip
-AR      = ar
-RANLIB  = ranlib
+CC      =
+STRIP   =
+AR      =
+RANLIB  =
 O       = .o
 SO      = .so
 A       = .a
@@ -16,8 +16,6 @@
 
 LIBRARY	= libmatrixssl$(SO)
 STATIC	= libmatrixsslstatic$(A)
-# where "make install" puts libmatrixssl
-prefix=/usr/local
 
 OBJECTS	= \
 		cipherSuite$(O) \
@@ -26,7 +24,7 @@
 		sslEncode$(O) \
 		sslv3$(O) \
 		os/debug$(O) \
-		os/linux/linux$(O) \
+		os/linux/linux$(O)	\
 		crypto/peersec/arc4$(O) \
 		crypto/peersec/base64$(O) \
 		crypto/peersec/des3$(O) \
@@ -46,7 +44,7 @@
 #	tcsh:	setenv MATRIXSSL_DEBUG 1
 #			unsetenv MATRIXSSL_DEBUG
 #
-#MATRIXSSL_DEBUG = 1
+MATRIXSSL_DEBUG = 1
 ifdef MATRIXSSL_DEBUG
 DFLAGS	= -g -Wall -Winline -Wdisabled-optimization -DDEBUG
 STRIP	= test
@@ -64,7 +62,7 @@
 #	Override variables for compilation on x86-64 (AMD64, Nacona, etc)
 #
 ifeq ($(shell uname -m),x86_64)
-DFLAGS  += -march=k8 -fPIC -DFP_64BIT -DTFM_X86_64 -DRDTSC
+#DFLAGS  += -march=k8 -fPIC -DFP_64BIT -DTFM_X86_64 -DRDTSC
 endif
 
 #
@@ -96,18 +94,18 @@
 
 all: compile
 
-compile: $(OBJECTS) $(LIBRARY) $(STATIC)
+compile: $(OBJECTS) $(LIBRARY) #$(STATIC)
 
 #
 # Manual dependencies
 #
-*.o: ../matrixSsl.h ../matrixCommon.h matrixInternal.h ../matrixConfig.h Makefile
-os/*.o: matrixInternal.h ../matrixConfig.h Makefile os/osLayer.h os/psMalloc.h
-os/linux/*.o: matrixInternal.h ../matrixConfig.h Makefile os/osLayer.h
-crypto/peersec/*.o: matrixInternal.h ../matrixConfig.h Makefile \
+*.o: ../matrixSsl.h ../matrixCommon.h matrixInternal.h matrixConfig.h Makefile
+os/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h os/psMalloc.h
+os/linux/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h
+crypto/peersec/*.o: matrixInternal.h matrixConfig.h Makefile \
 					crypto/peersec/mpi.h \
 					crypto/cryptoLayer.h crypto/peersec/pscrypto.h
-pki/*.o: matrixInternal.h ../matrixConfig.h Makefile \
+pki/*.o: matrixInternal.h matrixConfig.h Makefile \
 			pki/matrixPki.h pki/pkiInternal.h
 #
 # Build the library
@@ -123,10 +121,6 @@
 	$(AR) -rcuv $@ $^
 	$(RANLIB) $@
 
-install: $(STATIC)
-	mkdir -p $(prefix)/include $(prefix)/lib
-	cp ../matrixConfig.h ../matrixCommon.h ../matrixSsl.h $(prefix)/include/
-	cp $(STATIC) $(prefix)/lib/
 
 #
 #	Clean up all generated files
diff -Naur matrixssl-1.8.3/matrixssl/src/Makefile.default matrixssl.new/matrixssl/src/Makefile.default
--- matrixssl-1.8.3/matrixssl/src/Makefile.default	1970-01-01 05:30:00.000000000 +0530
+++ matrixssl.new/matrixssl/src/Makefile.default	2010-04-19 13:09:18.566167000 +0530
@@ -0,0 +1,129 @@
+#
+#	Makefile for MatrixSSL library
+#	Builds optimized shared library by default.
+#	See comments below for building a debug library.
+#	Copyright (c) PeerSec Networks, 2002-2007. All Rights Reserved.
+#
+
+CC      = gcc
+STRIP   = strip
+AR      = ar
+RANLIB  = ranlib
+O       = .o
+SO      = .so
+A       = .a
+E       =
+
+LIBRARY	= libmatrixssl$(SO)
+STATIC	= libmatrixsslstatic$(A)
+
+OBJECTS	= \
+		cipherSuite$(O) \
+		matrixSsl$(O) \
+		sslDecode$(O) \
+		sslEncode$(O) \
+		sslv3$(O) \
+		os/debug$(O) \
+		os/linux/linux$(O)	\
+		crypto/peersec/arc4$(O) \
+		crypto/peersec/base64$(O) \
+		crypto/peersec/des3$(O) \
+		crypto/peersec/md5$(O) \
+		crypto/peersec/md2$(O) \
+		crypto/peersec/mpi$(O) \
+		crypto/peersec/rsa$(O) \
+		crypto/peersec/sha1$(O) \
+		pki/asn1$(O) \
+		pki/rsaPki$(O) \
+		pki/x509$(O)
+
+#
+#	Debug flags (Define MATRIXSSL_DEBUG in shell to build debug)
+#	bash:	export MATRIXSSL_DEBUG=1
+#			unset MATRIXSSL_DEBUG
+#	tcsh:	setenv MATRIXSSL_DEBUG 1
+#			unsetenv MATRIXSSL_DEBUG
+#
+#MATRIXSSL_DEBUG = 1
+ifdef MATRIXSSL_DEBUG
+DFLAGS	= -g -Wall -Winline -Wdisabled-optimization -DDEBUG
+STRIP	= test
+else
+#DFLAGS	= -Os
+DFLAGS	= -O3 
+endif
+
+ifdef MATRIXSSL_PROFILE
+DFLAGS	+= -g -pg
+STRIP	= test
+endif
+
+#
+#	Override variables for compilation on x86-64 (AMD64, Nacona, etc)
+#
+ifeq ($(shell uname -m),x86_64)
+DFLAGS  += -march=k8 -fPIC -DFP_64BIT -DTFM_X86_64 -DRDTSC
+endif
+
+#
+#	Compile options
+#
+SHARED	= -shared
+CFLAGS  = $(DFLAGS) -fPIC -DLINUX -I./
+LDFLAGS += -lc -lpthread
+
+#
+#	Override variables for compilation on Mac OS X (Darwin)
+#
+ifeq ($(shell uname),Darwin)
+CC	= cc
+SO	= .dylib
+SHARED	= -dynamiclib
+CFLAGS += -DOSX -isystem -I/usr/include
+LDFLAGS += -flat_namespace -install_name @executable_path/../src/$(LIBRARY)
+STRIP = test
+endif
+
+#
+#	Override variables for compilation on uClinux (example only)
+#
+ifdef UCLINUX
+CC		= /opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
+STRIP	= /opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-strip
+endif
+
+all: compile
+
+compile: $(OBJECTS) $(LIBRARY) $(STATIC)
+
+#
+# Manual dependencies
+#
+*.o: ../matrixSsl.h ../matrixCommon.h matrixInternal.h matrixConfig.h Makefile
+os/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h os/psMalloc.h
+os/linux/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h
+crypto/peersec/*.o: matrixInternal.h matrixConfig.h Makefile \
+					crypto/peersec/mpi.h \
+					crypto/cryptoLayer.h crypto/peersec/pscrypto.h
+pki/*.o: matrixInternal.h matrixConfig.h Makefile \
+			pki/matrixPki.h pki/pkiInternal.h
+#
+# Build the library
+#
+$(LIBRARY): $(OBJECTS)
+	$(CC) $(SHARED) -o $@ $^ $(LDFLAGS)
+	$(STRIP) $(LIBRARY)
+
+#
+# Build the static library
+#
+$(STATIC): $(OBJECTS)
+	$(AR) -rcuv $@ $^
+	$(RANLIB) $@
+
+
+#
+#	Clean up all generated files
+#
+clean:
+	rm -f $(LIBRARY) $(OBJECTS) $(STATIC)
diff -Naur matrixssl-1.8.3/matrixssl/src/Makefile.ds matrixssl.new/matrixssl/src/Makefile.ds
--- matrixssl-1.8.3/matrixssl/src/Makefile.ds	2010-04-19 13:02:12.806093000 +0530
+++ matrixssl.new/matrixssl/src/Makefile.ds	1970-01-01 05:30:00.000000000 +0530
@@ -1,98 +0,0 @@
-# Makefile for MatrixSSL library
-
-ifeq ($(strip $(DEVKITARM)),)
-$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
-endif
-export PATH  := $(DEVKITARM)/bin:$(PATH)
-
-CC      = arm-eabi-gcc
-AR      = arm-eabi-ar
-O       = .o
-A       = .a
-E       =
-
-# where "make install" puts libmatrixssl
-prefix=$(DEVKITPRO)/libnds
-
-STATIC	= libmatrixsslstatic$(A)
-
-OBJECTS	= \
-		cipherSuite$(O) \
-		matrixSsl$(O) \
-		sslDecode$(O) \
-		sslEncode$(O) \
-		sslv3$(O) \
-		os/debug$(O) \
-		os/nds/nds$(O) \
-		crypto/peersec/arc4$(O) \
-		crypto/peersec/base64$(O) \
-		crypto/peersec/des3$(O) \
-		crypto/peersec/md5$(O) \
-		crypto/peersec/md2$(O) \
-		crypto/peersec/mpi$(O) \
-		crypto/peersec/rsa$(O) \
-		crypto/peersec/sha1$(O) \
-		pki/asn1$(O) \
-		pki/rsaPki$(O) \
-		pki/x509$(O)
-
-#
-#	Debug flags (Define MATRIXSSL_DEBUG in shell to build debug)
-#	bash:	export MATRIXSSL_DEBUG=1
-#			unset MATRIXSSL_DEBUG
-#	tcsh:	setenv MATRIXSSL_DEBUG 1
-#			unsetenv MATRIXSSL_DEBUG
-#
-#MATRIXSSL_DEBUG = 1
-ifdef MATRIXSSL_DEBUG
-DFLAGS	= -g -Wall -Winline -Wdisabled-optimization -DDEBUG
-else
-DFLAGS	= -O3 
-endif
-
-ifdef MATRIXSSL_PROFILE
-DFLAGS	+= -g -pg
-endif
-
-#
-#	Compile options
-#
-ARCH	:=	-mthumb -mthumb-interwork
-CFLAGS  = $(DFLAGS) -I./
-CFLAGS	+=	\
-		-march=armv5te -mtune=arm946e-s -fomit-frame-pointer \
-		-ffast-math \
-		$(ARCH)
-
-all: compile
-
-compile: $(OBJECTS) $(STATIC)
-
-#
-# Manual dependencies
-#
-*.o: ../matrixSsl.h ../matrixCommon.h matrixInternal.h ../matrixConfig.h Makefile
-os/*.o: matrixInternal.h ../matrixConfig.h Makefile os/osLayer.h os/psMalloc.h
-os/linux/*.o: matrixInternal.h ../matrixConfig.h Makefile os/osLayer.h
-crypto/peersec/*.o: matrixInternal.h ../matrixConfig.h Makefile \
-					crypto/peersec/mpi.h \
-					crypto/cryptoLayer.h crypto/peersec/pscrypto.h
-pki/*.o: matrixInternal.h ../matrixConfig.h Makefile \
-			pki/matrixPki.h pki/pkiInternal.h
-
-#
-# Build the static library
-#
-$(STATIC): $(OBJECTS)
-	$(AR) -rcsv $@ $^
-
-install: $(STATIC)
-	mkdir -p $(prefix)/include $(prefix)/lib
-	cp ../matrixConfig.h ../matrixCommon.h ../matrixSsl.h $(prefix)/include/
-	cp $(STATIC) $(prefix)/lib/
-
-#
-#	Clean up all generated files
-#
-clean:
-	rm -f $(OBJECTS) $(STATIC)
diff -Naur matrixssl-1.8.3/matrixssl/src/Makefile.keep matrixssl.new/matrixssl/src/Makefile.keep
--- matrixssl-1.8.3/matrixssl/src/Makefile.keep	1970-01-01 05:30:00.000000000 +0530
+++ matrixssl.new/matrixssl/src/Makefile.keep	2010-04-19 13:09:18.590155000 +0530
@@ -0,0 +1,131 @@
+#
+#	Makefile for MatrixSSL library
+#	Builds optimized shared library by default.
+#	See comments below for building a debug library.
+#	Copyright (c) PeerSec Networks, 2002-2007. All Rights Reserved.
+#
+
+CC      =
+STRIP   =
+AR      =
+RANLIB  =
+O       = .o
+SO      = .so
+A       = .a
+E       =
+
+#LIBRARY	= libmatrixssl$(SO)
+LIBRARY	= libssl$(SO)
+#STATIC	= libmatrixsslstatic$(A)
+STATIC	= libsslstatic$(A)
+
+OBJECTS	= \
+		cipherSuite$(O) \
+		matrixSsl$(O) \
+		sslDecode$(O) \
+		sslEncode$(O) \
+		sslv3$(O) \
+		os/debug$(O) \
+		os/linux/linux$(O)	\
+		crypto/peersec/arc4$(O) \
+		crypto/peersec/base64$(O) \
+		crypto/peersec/des3$(O) \
+		crypto/peersec/md5$(O) \
+		crypto/peersec/md2$(O) \
+		crypto/peersec/mpi$(O) \
+		crypto/peersec/rsa$(O) \
+		crypto/peersec/sha1$(O) \
+		pki/asn1$(O) \
+		pki/rsaPki$(O) \
+		pki/x509$(O)
+
+#
+#	Debug flags (Define MATRIXSSL_DEBUG in shell to build debug)
+#	bash:	export MATRIXSSL_DEBUG=1
+#			unset MATRIXSSL_DEBUG
+#	tcsh:	setenv MATRIXSSL_DEBUG 1
+#			unsetenv MATRIXSSL_DEBUG
+#
+MATRIXSSL_DEBUG = 1
+ifdef MATRIXSSL_DEBUG
+DFLAGS	= -g -Wall -Winline -Wdisabled-optimization -DDEBUG
+STRIP	= test
+else
+#DFLAGS	= -Os
+DFLAGS	= -O3 
+endif
+
+ifdef MATRIXSSL_PROFILE
+DFLAGS	+= -g -pg
+STRIP	= test
+endif
+
+#
+#	Override variables for compilation on x86-64 (AMD64, Nacona, etc)
+#
+ifeq ($(shell uname -m),x86_64)
+DFLAGS  += -march=k8 -fPIC -DFP_64BIT -DTFM_X86_64 -DRDTSC
+endif
+
+#
+#	Compile options
+#
+SHARED	= -shared
+CFLAGS  = $(DFLAGS) -fPIC -DLINUX -I./
+LDFLAGS += -lc -lpthread
+
+#
+#	Override variables for compilation on Mac OS X (Darwin)
+#
+ifeq ($(shell uname),Darwin)
+CC	= cc
+SO	= .dylib
+SHARED	= -dynamiclib
+CFLAGS += -DOSX -isystem -I/usr/include
+LDFLAGS += -flat_namespace -install_name @executable_path/../src/$(LIBRARY)
+STRIP = test
+endif
+
+#
+#	Override variables for compilation on uClinux (example only)
+#
+ifdef UCLINUX
+CC		= /opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
+STRIP	= /opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-strip
+endif
+
+all: compile
+
+compile: $(OBJECTS) $(LIBRARY) $(STATIC)
+
+#
+# Manual dependencies
+#
+*.o: ../matrixSsl.h ../matrixCommon.h matrixInternal.h matrixConfig.h Makefile
+os/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h os/psMalloc.h
+os/linux/*.o: matrixInternal.h matrixConfig.h Makefile os/osLayer.h
+crypto/peersec/*.o: matrixInternal.h matrixConfig.h Makefile \
+					crypto/peersec/mpi.h \
+					crypto/cryptoLayer.h crypto/peersec/pscrypto.h
+pki/*.o: matrixInternal.h matrixConfig.h Makefile \
+			pki/matrixPki.h pki/pkiInternal.h
+#
+# Build the library
+#
+$(LIBRARY): $(OBJECTS)
+	$(CC) $(SHARED) -o $@ $^ $(LDFLAGS)
+	$(STRIP) $(LIBRARY)
+
+#
+# Build the static library
+#
+$(STATIC): $(OBJECTS)
+	$(AR) -rcuv $@ $^
+	$(RANLIB) $@
+
+
+#
+#	Clean up all generated files
+#
+clean:
+	rm -f $(LIBRARY) $(OBJECTS) $(STATIC)
diff -Naur matrixssl-1.8.3/matrixssl/src/crypto/peersec/des3.c matrixssl.new/matrixssl/src/crypto/peersec/des3.c
--- matrixssl-1.8.3/matrixssl/src/crypto/peersec/des3.c	2010-04-19 13:02:12.962029000 +0530
+++ matrixssl.new/matrixssl/src/crypto/peersec/des3.c	2010-04-19 13:09:18.795165000 +0530
@@ -609,7 +609,7 @@
 	return CRYPT_OK;
 }
 
-int32 des_setup(const unsigned char *key, int32 keylen, int32 num_rounds,
+int des_setup(const unsigned char *key, int keylen, int num_rounds,
 				des3_CBC *skey)
 {
 
diff -Naur matrixssl-1.8.3/matrixssl/src/matrixConfig.h matrixssl.new/matrixssl/src/matrixConfig.h
--- matrixssl-1.8.3/matrixssl/src/matrixConfig.h	1970-01-01 05:30:00.000000000 +0530
+++ matrixssl.new/matrixssl/src/matrixConfig.h	2010-04-19 13:09:18.982162000 +0530
@@ -0,0 +1,109 @@
+/*
+ *	matrixConfig.h
+ *	Release $Name: MATRIXSSL_1_8_3_OPEN $
+ *
+ *	Configuration settings for building the MatrixSSL library.
+ *	These options affect the size and algorithms present in the library.
+ */
+/*
+ *	Copyright (c) PeerSec Networks, 2002-2007. All Rights Reserved.
+ *	The latest version of this code is available at http://www.matrixssl.org
+ *
+ *	This software is open source; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License as published by
+ *	the Free Software Foundation; either version 2 of the License, or
+ *	(at your option) any later version.
+ *
+ *	This General Public License does NOT permit incorporating this software 
+ *	into proprietary programs.  If you are unable to comply with the GPL, a 
+ *	commercial license for this software may be purchased from PeerSec Networks
+ *	at http://www.peersec.com
+ *	
+ *	This program is distributed in WITHOUT ANY WARRANTY; without even the 
+ *	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ *	See the GNU General Public License for more details.
+ *	
+ *	You should have received a copy of the GNU General Public License
+ *	along with this program; if not, write to the Free Software
+ *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *	http://www.gnu.org/copyleft/gpl.html
+ */
+/******************************************************************************/
+
+#ifndef _h_MATRIXCONFIG
+#define _h_MATRIXCONFIG
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+//Subramani: Changed the path to /flash so that we can modify
+#define IFX_CACERTFILE_NAME  "/flash/Cert.pem"
+/******************************************************************************/
+/*
+	Define the number of sessions to cache here.
+	Minimum value is 1
+	Session caching provides such an increase in performance that it isn't
+	an option to disable.
+*/
+#define SSL_SESSION_TABLE_SIZE	32
+
+/******************************************************************************/
+/*
+	Define the following to enable various cipher suites
+	At least one of these must be defined.  If multiple are defined,
+	the handshake will determine which is best for the connection.
+*/
+#define USE_SSL_RSA_WITH_RC4_128_MD5
+#define USE_SSL_RSA_WITH_RC4_128_SHA
+#define USE_SSL_RSA_WITH_3DES_EDE_CBC_SHA
+
+/******************************************************************************/
+/*
+	Support for encrypted private key files, using 3DES
+*/
+#define USE_ENCRYPTED_PRIVATE_KEYS
+
+/******************************************************************************/
+/*
+	Support for client side SSL
+*/
+#define USE_CLIENT_SIDE_SSL
+#define USE_SERVER_SIDE_SSL
+
+
+/******************************************************************************/
+/*
+	Use native 64 bit integers (long longs)
+*/
+#define USE_INT64
+
+/******************************************************************************/
+/*
+	Hi-res POSIX timer.  Use rdtscll() for timing routines in linux.c
+*/
+/* #define USE_RDTSCLL_TIME */
+
+/******************************************************************************/
+/*
+	Support for multithreading environment.  This should be enabled
+	if multiple SSL sessions will be active at the same time in 
+	different threads.  The library will still be single threaded,
+	but will serialize access to the session cache with a mutex.
+*/
+#define USE_MULTITHREADING
+
+/******************************************************************************/
+/*
+	Support for file system.
+*/
+#define USE_FILE_SYSTEM
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _h_MATRIXCONFIG */
+
+/******************************************************************************/
+
diff -Naur matrixssl-1.8.3/matrixssl/src/os/nds/nds.c matrixssl.new/matrixssl/src/os/nds/nds.c
--- matrixssl-1.8.3/matrixssl/src/os/nds/nds.c	2010-04-19 13:02:13.334011000 +0530
+++ matrixssl.new/matrixssl/src/os/nds/nds.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,81 +0,0 @@
-/*
- *	nds.c
- *
- *	NDS compatibility layer
- */
-/*
-  	Copyright (c) Richard Quirk, 2007. All Rights Reserved.
-  
-  	This software is open source; you can redistribute it and/or modify
-  	it under the terms of the GNU General Public License as published by
-  	the Free Software Foundation; either version 2 of the License, or
-  	(at your option) any later version.
-  
-  	This program is distributed in WITHOUT ANY WARRANTY; without even the 
-  	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-  	See the GNU General Public License for more details.
-  	
-  	You should have received a copy of the GNU General Public License
-  	along with this program; if not, write to the Free Software
-  	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-  	http://www.gnu.org/copyleft/gpl.html
- */
-
-#include <string.h>
-#include "../osLayer.h"
-
-int32 sslOpenOsdep(void)
-{
-  srand(time(NULL));
-  return 0;
-}
-
-int32 sslCloseOsdep(void)
-{
-  return 0;
-}
-
-int32 sslGetEntropy(unsigned char *bytes, int32 size)
-{
-  // TODO - read from microphpone.
-  unsigned char * dst = bytes;
-  while (size)
-  {
-    long int r = rand();
-    int copy = sizeof(r)>size?size:sizeof(r);
-    memcpy(dst, &r, copy);
-    size -= copy;
-  }
-  return size;
-}
-
-int32 sslInitMsecs(sslTime_t *t)
-{
-  time_t now = time(NULL);
-  t->sec = now;
-  return now * 1000;
-}
-
-int32 sslCompareTime(sslTime_t a, sslTime_t b)
-{
-  if (a.sec < b.sec) {
-    return 1;
-  }
-  return 0;
-}
-
-int32 sslDiffSecs(sslTime_t then, sslTime_t now)
-{
-  return now.sec - then.sec;
-}
-
-long sslDiffMsecs(sslTime_t then, sslTime_t now)
-{
-  return sslDiffSecs(then, now)* 1000;
-}
-#ifdef DEBUG
-void psBreak(void)
-{
-  // meh
-}
-#endif
diff -Naur matrixssl-1.8.3/matrixssl/src/os/osLayer.h matrixssl.new/matrixssl/src/os/osLayer.h
--- matrixssl-1.8.3/matrixssl/src/os/osLayer.h	2010-04-19 13:02:13.358009000 +0530
+++ matrixssl.new/matrixssl/src/os/osLayer.h	2010-04-19 13:09:19.308150000 +0530
@@ -76,6 +76,13 @@
 #include <pthread.h>
 #include <string.h>
 
+/*
+	On some *NIX versions such as MAC OS X 10.4, CLK_TCK has been deprecated
+*/
+#ifndef CLK_TCK
+#define CLK_TCK		CLOCKS_PER_SEC
+#endif /* CLK_TCK */
+
 typedef pthread_mutex_t sslMutex_t;
 extern int32	sslCreateMutex(sslMutex_t *mutex);
 extern int32	sslLockMutex(sslMutex_t *mutex);
@@ -99,13 +106,6 @@
 #define sslDestroyMutex(M)
 
 #endif /* USE_MULTITHREADING */
-/*
-	On some *NIX versions such as MAC OS X 10.4, CLK_TCK has been deprecated
-*/
-#ifndef CLK_TCK
-#define CLK_TCK		CLOCKS_PER_SEC
-#endif /* CLK_TCK */
-
 
 /*
 	Make sslTime_t an opaque time value.
@@ -185,7 +185,8 @@
 #define matrixStrDebugMsg(x, y)
 #define matrixIntDebugMsg(x, y)
 #define matrixPtrDebugMsg(x, y)
-#define sslAssert(C)
+#define sslAssert(C)  if (C) ; else \
+	{fprintf(stderr, "%s:%d sslAssert(%s)\n",__FILE__, __LINE__, #C); }
 #endif /* DEBUG */
 
 #ifdef __cplusplus
diff -Naur matrixssl-1.8.3/matrixssl/src/pki/rsaPki.c matrixssl.new/matrixssl/src/pki/rsaPki.c
--- matrixssl-1.8.3/matrixssl/src/pki/rsaPki.c	2010-04-19 13:02:13.523011000 +0530
+++ matrixssl.new/matrixssl/src/pki/rsaPki.c	2010-04-19 13:09:19.526073000 +0530
@@ -110,7 +110,7 @@
 		return -7; /* FILE_NOT_FOUND */
 	}
 
-	*bin = psMalloc(pool, fstat.st_size+1);
+	*bin = psMalloc(pool, fstat.st_size);
 	if (*bin == NULL) {
 		return -8; /* SSL_MEM_ERROR */
 	}
@@ -118,7 +118,6 @@
 			(*binLen < fstat.st_size)) { 
 		*binLen += (int32)tmp;
 	}
-        *(*bin+*binLen)=EOF;
 	fclose(fp);
 	return 0;
 }
diff -Naur matrixssl-1.8.3/matrixssl/src/pki/x509.c matrixssl.new/matrixssl/src/pki/x509.c
--- matrixssl-1.8.3/matrixssl/src/pki/x509.c	2010-04-19 13:02:13.546009000 +0530
+++ matrixssl.new/matrixssl/src/pki/x509.c	2010-04-19 13:09:19.552077000 +0530
@@ -30,6 +30,9 @@
 /******************************************************************************/
 
 #include "pkiInternal.h"
+#define _XOPEN_SOURCE
+#include<time.h>
+#include<sys/time.h>
 
 /*
 	X509 is wrapped in USE_RSA until more key types are added
@@ -1247,7 +1250,7 @@
 						memset(extensions->san.email, 0x0, tmpLen + 1);
 						memcpy(extensions->san.email, p, tmpLen);
 					} else {
-						matrixStrDebugMsg("Unsupported subjectAltName type.n",
+						matrixStrDebugMsg("Unsupported subjectAltName type.\n",
 							NULL);
 						p++;
 						tmpLen = *p++;
@@ -1467,6 +1470,17 @@
 	unsigned char	sigOut[10 + SSL_SHA1_HASH_SIZE + 5];	/* See below */
 	int32			sigLen;
 
+        
+  struct timeval tv;                                                                                                        
+  time_t curtime;                                                                                                           
+  struct tm tmc;                                                                                                            
+  char buffer[300], *psStr = NULL;                                                                                 
+  time_t btime;                                                                                                             
+  time_t atime;                                                                                                             
+  struct tm tmb;                                                                                                            
+  struct tm tma;                                                                                                            
+  time_t ctime;                                                                                                             
+
 	subjectCert->valid = -1;
 /*
 	Supporting a one level chain or a self-signed cert.  If the issuer
@@ -1509,6 +1523,54 @@
 			}
 		}
 /*
+                checking the expiry date of all the certificates 
+*/
+                                                                                                                            
+ printf("\nCertificate verification in progress: %s\n",subjectCert->subject.commonName);                                                                                                                          
+                                                                                                                            
+ // printf("Entering User validation\n");                                                                                     
+  gettimeofday(&tv, NULL);                                                                                                  
+  curtime=tv.tv_sec;                                                                                                        
+  gmtime_r(&curtime, &tmc);                                                                                                 
+  strftime(buffer,300,"%y%m%d%H%M%SZ",&tmc);                                                                                
+ // printf("Current time in GMT = %s\n", buffer);                                                                             
+/*                                                                                                                          
+        Make sure we are checking the last cert in the chain                                                                
+*/                                                                                                                          
+                                                                                                          
+ // printf("Not Before = %s\n", ic->notBefore);                                                                             
+ // printf("Not After = %s\n",ic->notAfter);                                                                               
+                                                                                                                            
+  //strptime(next->notBefore,"%y%m%d%H%M%SZ",&tmb);                                                                         
+  //strptime(next->notAfter,"%y%m%d%H%M%SZ",&tma);                                                                          
+  psStr = ic->notBefore;                                                                                                  
+  sprintf(buffer, "%c%c-%c%c-%c%cT%c%c-%c%c-%c%cZ", psStr[0], psStr[1],                                                     
+          psStr[2], psStr[3],psStr[4], psStr[5], psStr[6], psStr[7],                                                        
+          psStr[8], psStr[9], psStr[10], psStr[11]);                                                                        
+  strptime(buffer,"%y-%m-%dT%H-%M-%SZ",&tmb);                                                                               
+  psStr = ic->notAfter;                                                                                                   
+  sprintf(buffer, "%c%c-%c%c-%c%cT%c%c-%c%c-%c%cZ", psStr[0], psStr[1],                                                     
+          psStr[2], psStr[3],psStr[4], psStr[5], psStr[6], psStr[7],                                                        
+          psStr[8], psStr[9], psStr[10], psStr[11]);                                                                        
+  strptime(buffer,"%y-%m-%dT%H-%M-%SZ",&tma);                                                                               
+  //printf("buffer=%s\n", buffer);                                                                                            
+  ctime=mktime(&tmc);                                                                                                       
+  btime=mktime(&tmb);                                                                                                       
+  atime=mktime(&tma);                                                                                                       
+                                                                                                                         
+     if (!(ctime <= atime) && (ctime >= btime)){                                                                            
+        printf("Certificate issued to %s has Expired..\n",ic->subject.commonName);                                     
+        return -1;                                                                                                          
+     }                                                                                                                      
+                                                                                                
+
+
+
+
+
+/***************************************end of validation***********************************/ 
+
+/*
 		Signature confirmation
 		The sigLen is the ASN.1 size in bytes for encoding the hash.
 		The magic 10 is comprised of the SEQUENCE and ALGORITHM ID overhead.
@@ -1540,7 +1602,10 @@
 /*
 		Fall through to here only if passed signature check.
 */
-		subjectCert->valid = 1;
+		subjectCert->valid = 1; 
+                printf("Certificate verified : %s\n",subjectCert->subject.commonName);                                                                                                                          
+                printf("Certificate verified by: %s\n",ic->subject.commonName);                                                                                                                          
+                                                                                                                            
 		break;
 	}
 	return 0;
diff -Naur matrixssl-1.8.3/matrixssl/src/sslDecode.c matrixssl.new/matrixssl/src/sslDecode.c
--- matrixssl-1.8.3/matrixssl/src/sslDecode.c	2010-04-19 13:02:13.571018000 +0530
+++ matrixssl.new/matrixssl/src/sslDecode.c	2010-04-19 13:09:19.580082000 +0530
@@ -30,6 +30,7 @@
 /******************************************************************************/
 
 #include "matrixInternal.h"
+static int32 rootCertPresent = 0;
 
 /******************************************************************************/
 
@@ -1259,11 +1260,17 @@
 		must be in order so that each subsequent one is the parent of the
 		previous.  Confirm this now.
 */
+/* Validate only if root cert is present */
+if (rootCertPresent)
+{
+                matrixStrDebugMsg("Performing Validation\n", NULL);
+
+
 		if (matrixX509ValidateCertChain(ssl->hsPool, ssl->sec.cert,
 				&subjectCert, &valid) < 0) {
-			/* This shouldn't be a failure error! Keep going, let
-			 * the user callback decide what to do. */
+			ssl->err = SSL_ALERT_BAD_CERTIFICATE;
 			matrixStrDebugMsg("Couldn't validate certificate chain\n", NULL);
+			return SSL_ERROR;	
 		}
 /*
 		There may not be a caCert set.  The validate implemenation will just
@@ -1277,6 +1284,7 @@
 			return SSL_ERROR;
 		}
 		if (subjectCert->valid < 0) {
+#if 0 /* MODIFIED BY ORP */
 			matrixStrDebugMsg(
 				"Warning: Cert did not pass default validation checks\n", NULL);
 /*
@@ -1287,7 +1295,15 @@
 				ssl->err = SSL_ALERT_BAD_CERTIFICATE;
 				return SSL_ERROR;
 			}
+#else
+			ssl->err = SSL_ALERT_BAD_CERTIFICATE;
+			matrixStrDebugMsg(
+				"Cert did not pass default validation checks\n", NULL);
+			return SSL_ERROR;
+
+#endif
 		}
+}
 /*
 		Call the user validation function with the entire cert chain.  The user
 		will proabably want to drill down to the last cert to make sure it
@@ -1405,3 +1421,21 @@
 }
 
 /******************************************************************************/
+
+MATRIXPUBLIC int32 matrixSslPrepareForValidation(void)
+{
+  FILE *fp;
+ if ((fp = fopen(IFX_CACERTFILE_NAME, "r")) == NULL)
+ {
+  matrixStrDebugMsg("Root Cert Not Present\n", NULL);
+  rootCertPresent=0;
+ }
+ else
+ {
+  matrixStrDebugMsg("Root Cert Present\n", NULL);
+  fclose(fp);
+  rootCertPresent=1;
+ }
+ return rootCertPresent;
+}
+
--- matrixssl-1.8.3/matrixssl/matrixCommon.h	2010-04-19 13:15:43.559545000 +0530
+++ matrixssl.new/matrixssl/matrixCommon.h	2010-04-19 13:15:00.476102000 +0530
@@ -36,15 +36,14 @@
 extern "C" {
 #endif
 
-#include <stdint.h>
-#include "matrixConfig.h"
+#include "src/matrixConfig.h"
 
 /******************************************************************************/
 /*
 	Platform integer sizes
 */
-typedef int32_t int32;
-typedef uint32_t uint32;
+typedef int int32;
+typedef unsigned int uint32;
 
 /******************************************************************************/
 /*
--- matrixssl-1.8.3/matrixssl/matrixSsl.h	2010-04-19 13:15:43.618540000 +0530
+++ matrixssl.new/matrixssl/matrixSsl.h	2010-04-19 13:15:00.499078000 +0530
@@ -145,6 +145,7 @@
 
 MATRIXPUBLIC int32 matrixSslSetResumptionFlag(ssl_t *ssl, char flag);
 MATRIXPUBLIC int32 matrixSslGetResumptionFlag(ssl_t *ssl, char *flag);
+MATRIXPUBLIC int32 matrixSslPrepareForValidation(void);
 
 
 
--- matrixssl-1.8.3/matrixssl/matrixConfig.h	2010-04-19 13:15:43.642539000 +0530
+++ matrixssl.new/matrixssl/matrixConfig.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,107 +0,0 @@
-/*
- *	matrixConfig.h
- *	Release $Name: MATRIXSSL_1_8_3_OPEN $
- *
- *	Configuration settings for building the MatrixSSL library.
- *	These options affect the size and algorithms present in the library.
- */
-/*
- *	Copyright (c) PeerSec Networks, 2002-2007. All Rights Reserved.
- *	The latest version of this code is available at http://www.matrixssl.org
- *
- *	This software is open source; you can redistribute it and/or modify
- *	it under the terms of the GNU General Public License as published by
- *	the Free Software Foundation; either version 2 of the License, or
- *	(at your option) any later version.
- *
- *	This General Public License does NOT permit incorporating this software 
- *	into proprietary programs.  If you are unable to comply with the GPL, a 
- *	commercial license for this software may be purchased from PeerSec Networks
- *	at http://www.peersec.com
- *	
- *	This program is distributed in WITHOUT ANY WARRANTY; without even the 
- *	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
- *	See the GNU General Public License for more details.
- *	
- *	You should have received a copy of the GNU General Public License
- *	along with this program; if not, write to the Free Software
- *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- *	http://www.gnu.org/copyleft/gpl.html
- */
-/******************************************************************************/
-
-#ifndef _h_MATRIXCONFIG
-#define _h_MATRIXCONFIG
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************************************/
-/*
-	Define the number of sessions to cache here.
-	Minimum value is 1
-	Session caching provides such an increase in performance that it isn't
-	an option to disable.
-*/
-#define SSL_SESSION_TABLE_SIZE	8
-
-/******************************************************************************/
-/*
-	Define the following to enable various cipher suites
-	At least one of these must be defined.  If multiple are defined,
-	the handshake will determine which is best for the connection.
-*/
-#define USE_SSL_RSA_WITH_RC4_128_MD5
-#define USE_SSL_RSA_WITH_RC4_128_SHA
-#define USE_SSL_RSA_WITH_3DES_EDE_CBC_SHA
-
-/******************************************************************************/
-/*
-	Support for encrypted private key files, using 3DES
-*/
-#define USE_ENCRYPTED_PRIVATE_KEYS
-
-/******************************************************************************/
-/*
-	Support for client side SSL
-*/
-#define USE_CLIENT_SIDE_SSL
-#define USE_SERVER_SIDE_SSL
-
-
-/******************************************************************************/
-/*
-	Use native 64 bit integers (long longs)
-*/
-#undef USE_INT64
-
-/******************************************************************************/
-/*
-	Hi-res POSIX timer.  Use rdtscll() for timing routines in linux.c
-*/
-/* #define USE_RDTSCLL_TIME */
-
-/******************************************************************************/
-/*
-	Support for multithreading environment.  This should be enabled
-	if multiple SSL sessions will be active at the same time in 
-	different threads.  The library will still be single threaded,
-	but will serialize access to the session cache with a mutex.
-*/
-#undef USE_MULTITHREADING
-
-/******************************************************************************/
-/*
-	Support for file system.
-*/
-#define USE_FILE_SYSTEM
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* _h_MATRIXCONFIG */
-
-/******************************************************************************/
-
