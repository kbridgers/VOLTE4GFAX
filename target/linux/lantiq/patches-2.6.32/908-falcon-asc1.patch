activate serial driver for ASC1 if "use_asc1=x" is given on kernel commandline
--- a/arch/mips/lantiq/falcon/devices.c
+++ b/arch/mips/lantiq/falcon/devices.c
@@ -77,6 +77,7 @@ void __init falcon_register_asc(int port
 	case 1:
 		platform_device_register_simple("ltq_asc", 1,
 			falcon_asc1_resources, ARRAY_SIZE(falcon_asc1_resources));
+		sys1_hw_activate(ACTS_ASC1_ACT);
 		break;
 	default:
 		break;
--- a/arch/mips/lantiq/falcon/prom.c
+++ b/arch/mips/lantiq/falcon/prom.c
@@ -33,6 +33,9 @@ static struct gpon_reg_status * const pS
 
 #define SOC_FALCON		"Falcon"
 
+#define MUXC_SIF_RX_PIN		112
+#define MUXC_SIF_TX_PIN		113
+
 #define BOOT_REG_BASE	(KSEG1 | 0x1F200000)
 #define BOOT_RVEC	(BOOT_REG_BASE | 0x00)
 #define BOOT_NVEC	(BOOT_REG_BASE | 0x04)
@@ -47,6 +50,16 @@ static int __init parse_dying_gasp(char 
 }
 __setup("dying_gasp", parse_dying_gasp);
 
+/* this parameter allows us enable/disable asc1 via commandline */
+static int register_asc1;
+static int __init
+ltq_parse_asc1(char *p)
+{
+	register_asc1 = 1;
+	return 0;
+}
+__setup("use_asc1", ltq_parse_asc1);
+
 void __init
 ltq_soc_setup(void)
 {
@@ -62,6 +75,13 @@ ltq_soc_setup(void)
 	falcon_register_asc(0);
 	falcon_register_gpio();
 	falcon_register_wdt();
+	if (register_asc1) {
+		falcon_register_asc(1);
+		if (ltq_gpio_request(MUXC_SIF_RX_PIN, 1, 1, 0, "asc1-rx"))
+			pr_err("failed to request asc1-rx");
+		if (ltq_gpio_request(MUXC_SIF_TX_PIN, 1, 1, 1, "asc1-tx"))
+			pr_err("failed to request asc1-tx");
+	}
 }
 
 void __init
