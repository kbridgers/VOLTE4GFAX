--- a/arch/mips/include/asm/mach-lantiq/xway/lantiq_irq.h
+++ b/arch/mips/include/asm/mach-lantiq/xway/lantiq_irq.h
@@ -9,6 +9,8 @@
 #ifndef _LANTIQ_XWAY_IRQ_H__
 #define _LANTIQ_XWAY_IRQ_H__
 
+#define IM_NUM			5
+
 #define INT_NUM_IRQ0		8
 #define INT_NUM_IM0_IRL0	(INT_NUM_IRQ0 + 0)
 #define INT_NUM_IM1_IRL0	(INT_NUM_IRQ0 + 32)
--- a/arch/mips/lantiq/irq.c
+++ b/arch/mips/lantiq/irq.c
@@ -71,64 +71,135 @@ static struct resource ltq_eiu_resource 
 
 #endif
 
-static struct resource ltq_icu_resource = {
-	.name	= "icu",
+static struct resource ltq_icu_resource[IM_NUM] = {
+{
+	.name	= "icu_im0",
 	.start	= LTQ_ICU_BASE_ADDR,
-	.end	= LTQ_ICU_BASE_ADDR + LTQ_ICU_SIZE - 1,
+	.end	= LTQ_ICU_BASE_ADDR + LTQ_ICU_OFFSET - 1,
+	.flags	= IORESOURCE_MEM,
+},
+#if IM_NUM >= 2
+{
+	.name	= "icu_im1",
+#ifdef LTQ_ICU_BASE_ADDR1
+	.start	= LTQ_ICU_BASE_ADDR1,
+	.end	= LTQ_ICU_BASE_ADDR1 + LTQ_ICU_OFFSET - 1,
+#else
+	.start	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 1),
+	.end	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 2) - 1,
+#endif
+	.flags	= IORESOURCE_MEM,
+},
+#endif
+#if IM_NUM >= 3
+{
+	.name	= "icu_im2",
+#ifdef LTQ_ICU_BASE_ADDR2
+	.start	= LTQ_ICU_BASE_ADDR2,
+	.end	= LTQ_ICU_BASE_ADDR2 + LTQ_ICU_OFFSET - 1,
+#else
+	.start	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 2),
+	.end	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 3) - 1,
+#endif
+	.flags	= IORESOURCE_MEM,
+},
+#endif
+#if IM_NUM >= 4
+{
+	.name	= "icu_im3",
+#ifdef LTQ_ICU_BASE_ADDR3
+	.start	= LTQ_ICU_BASE_ADDR3,
+	.end	= LTQ_ICU_BASE_ADDR3 + LTQ_ICU_OFFSET - 1,
+#else
+	.start	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 3),
+	.end	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 4) - 1,
+#endif
+	.flags	= IORESOURCE_MEM,
+},
+#endif
+#if IM_NUM >= 5
+{
+	.name	= "icu_im4",
+#ifdef LTQ_ICU_BASE_ADDR4
+	.start	= LTQ_ICU_BASE_ADDR4,
+	.end	= LTQ_ICU_BASE_ADDR4 + LTQ_ICU_OFFSET - 1,
+#else
+	.start	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 4),
+	.end	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 5) - 1,
+#endif
 	.flags	= IORESOURCE_MEM,
+},
+#endif
+#if IM_NUM >= 6
+{
+	.name	= "icu_im5",
+#ifdef LTQ_ICU_BASE_ADDR5
+	.start	= LTQ_ICU_BASE_ADDR5,
+	.end	= LTQ_ICU_BASE_ADDR5 + LTQ_ICU_OFFSET - 1,
+#else
+	.start	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 5),
+	.end	= LTQ_ICU_BASE_ADDR + (LTQ_ICU_OFFSET * 6) - 1,
+#endif
+	.flags	= IORESOURCE_MEM,
+},
+#endif
+
 };
 
-#define ltq_icu_w32(x, y)	ltq_w32((x), ltq_icu_membase + (y))
-#define ltq_icu_r32(x)		ltq_r32(ltq_icu_membase + (x))
+#define ltq_icu_w32(x, y, i)	ltq_w32((x), ltq_icu_membase[i] + (y))
+#define ltq_icu_r32(x, i)	ltq_r32(ltq_icu_membase[i] + (x))
 
-static void __iomem *ltq_icu_membase;
+static void __iomem *ltq_icu_membase[IM_NUM];
 
 void
 ltq_disable_irq(unsigned int irq_nr)
 {
-	u32 ier = LTQ_ICU_IM0_IER;
+	unsigned int im_nr;
 
 	irq_nr -= INT_NUM_IRQ0;
-	ier += LTQ_ICU_OFFSET * (irq_nr / INT_NUM_IM_OFFSET);
+	im_nr = (irq_nr / INT_NUM_IM_OFFSET);
 	irq_nr %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(ltq_icu_r32(ier) & ~(1 << irq_nr), ier);
+
+	ltq_icu_w32(ltq_icu_r32(LTQ_ICU_IM0_IER, im_nr) & ~(1 << irq_nr),
+		LTQ_ICU_IM0_IER, im_nr);
 }
 
 void
 ltq_mask_and_ack_irq(unsigned int irq_nr)
 {
-	u32 ier = LTQ_ICU_IM0_IER;
-	u32 isr = LTQ_ICU_IM0_ISR;
+	unsigned int im_nr;
 
 	irq_nr -= INT_NUM_IRQ0;
-	ier += LTQ_ICU_OFFSET * (irq_nr / INT_NUM_IM_OFFSET);
-	isr += LTQ_ICU_OFFSET * (irq_nr / INT_NUM_IM_OFFSET);
+	im_nr = (irq_nr / INT_NUM_IM_OFFSET);
 	irq_nr %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(ltq_icu_r32(ier) & ~(1 << irq_nr), ier);
-	ltq_icu_w32((1 << irq_nr), isr);
+
+	ltq_icu_w32(ltq_icu_r32(LTQ_ICU_IM0_IER, im_nr) & ~(1 << irq_nr), LTQ_ICU_IM0_IER, im_nr);
+	ltq_icu_w32((1 << irq_nr), LTQ_ICU_IM0_ISR, im_nr);
 }
 EXPORT_SYMBOL(ltq_mask_and_ack_irq);
 
 static void
 ltq_ack_irq(unsigned int irq_nr)
 {
-	u32 isr = LTQ_ICU_IM0_ISR;
+	unsigned int im_nr;
 
 	irq_nr -= INT_NUM_IRQ0;
-	isr += LTQ_ICU_OFFSET * (irq_nr / INT_NUM_IM_OFFSET);
+	im_nr = (irq_nr / INT_NUM_IM_OFFSET);
 	irq_nr %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32((1 << irq_nr), isr);
+
+	ltq_icu_w32((1 << irq_nr), LTQ_ICU_IM0_ISR, im_nr);
 }
 
 void
 ltq_enable_irq(unsigned int irq_nr)
 {
-	u32 ier = LTQ_ICU_IM0_IER;
+	unsigned int im_nr;
 
 	irq_nr -= INT_NUM_IRQ0;
-	ier += LTQ_ICU_OFFSET  * (irq_nr / INT_NUM_IM_OFFSET);
+	im_nr = (irq_nr / INT_NUM_IM_OFFSET);
 	irq_nr %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(ltq_icu_r32(ier) | (1 << irq_nr), ier);
+
+	ltq_icu_w32(ltq_icu_r32(LTQ_ICU_IM0_IER, im_nr) | (1 << irq_nr), LTQ_ICU_IM0_IER, im_nr);
 }
 
 #ifdef CONFIG_SOC_TYPE_XWAY
@@ -211,7 +282,7 @@ static void ltq_hw_irqdispatch(int modul
 {
 	u32 irq;
 
-	irq = ltq_icu_r32(LTQ_ICU_IM0_IOSR + (module * LTQ_ICU_OFFSET));
+	irq = ltq_icu_r32(LTQ_ICU_IM0_IOSR, module);
 	if (irq == 0)
 		return;
 
@@ -277,17 +348,19 @@ void __init arch_init_irq(void)
 {
 	int i;
 
-	if (insert_resource(&iomem_resource, &ltq_icu_resource) < 0)
-		panic("Failed to insert icu memory\n");
-
-	if (request_mem_region(ltq_icu_resource.start,
-			resource_size(&ltq_icu_resource), "icu") < 0)
-		panic("Failed to request icu memory\n");
-
-	ltq_icu_membase = ioremap_nocache(ltq_icu_resource.start,
-				resource_size(&ltq_icu_resource));
-	if (!ltq_icu_membase)
-		panic("Failed to remap icu memory\n");
+	for (i=0; i<IM_NUM; i++) {
+		if (insert_resource(&iomem_resource, &ltq_icu_resource[i]) < 0)
+			panic("Failed to insert icu memory\n");
+
+		if (request_mem_region(ltq_icu_resource[i].start,
+				resource_size(&ltq_icu_resource[i]), "icu") < 0)
+			panic("Failed to request icu memory\n");
+
+		ltq_icu_membase[i] = ioremap_nocache(ltq_icu_resource[i].start,
+					resource_size(&ltq_icu_resource[i]));
+		if (!ltq_icu_membase[i])
+			panic("Failed to remap icu memory\n");
+	}
 
 #ifdef CONFIG_SOC_TYPE_XWAY
 	if (insert_resource(&iomem_resource, &ltq_eiu_resource) < 0)
@@ -302,12 +375,13 @@ void __init arch_init_irq(void)
 	if (!ltq_eiu_membase)
 		panic("Failed to remap eiu memory\n");
 #endif
-	/* make sure all irqs are turned off by default */
-	for (i = 0; i < 5; i++)
-		ltq_icu_w32(0, LTQ_ICU_IM0_IER + (i * LTQ_ICU_OFFSET));
+	for (i = 0; i < IM_NUM; i++) {
+		/* make sure all irqs are turned off by default */
+		ltq_icu_w32(0, LTQ_ICU_IM0_IER, i);
 
-	/* clear all possibly pending interrupts */
-	ltq_icu_w32(~0, LTQ_ICU_IM0_ISR + (i * LTQ_ICU_OFFSET));
+		/* clear all possibly pending interrupts */
+		ltq_icu_w32(~0, LTQ_ICU_IM0_ISR, i);
+	}
 
 	mips_cpu_irq_init();
 
