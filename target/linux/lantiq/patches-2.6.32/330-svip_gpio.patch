--- /dev/null
+++ b/arch/mips/include/asm/mach-lantiq/svip/svip_mux.h
@@ -0,0 +1,574 @@
+/******************************************************************************
+
+                               Copyright (c) 2012
+                            Lantiq Deutschland GmbH
+
+  For licensing information, see the file 'LICENSE' in the root folder of
+  this software module.
+
+******************************************************************************/
+
+#ifndef __SVIP_MUX_H
+#define __SVIP_MUX_H
+
+#define LTQ_MUX_P0_PINS			20
+#define LTQ_MUX_P1_PINS			20
+#define LTQ_MUX_P2_PINS			19
+#define LTQ_MUX_P3_PINS			20
+#define LTQ_MUX_P4_PINS			24
+
+/* pin configuration */
+struct ltq_mux_pin {
+	/* data output register */
+	int out;
+	/* data direction register 0: output, 1: input */
+	int dirin;
+	/* Pull Up Enable Register */
+	int puen;
+	/* Alternate Function Select Register 0 */
+	int altsel0;
+	/* Alternate Function Select Register 1 */
+	int altsel1;
+};
+
+struct ltq_mux_settings {
+	const struct ltq_mux_pin *mux_p0;
+	const struct ltq_mux_pin *mux_p1;
+	const struct ltq_mux_pin *mux_p2;
+	const struct ltq_mux_pin *mux_p3;
+	const struct ltq_mux_pin *mux_p4;
+};
+
+#define LTQ_MUX_P0_19_EXINT16			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_19					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_19_HIGH				{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P0_18_EJ_BRKIN		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_18					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_18_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_18_IN				{ 1, 0, 1, 0 }
+
+#define LTQ_MUX_P0_17_EXINT10			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_17					{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_17_HIGH				{ 1, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_17_ASC1_RXD		{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P0_16_EXINT9			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_16					{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_16_HIGH				{ 1, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_16_ASC1_TXD		{ 0, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P0_15_EXINT8			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_15					{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_15_HIGH				{ 1, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_15_ASC0_RXD		{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P0_14_EXINT7			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_14					{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_14_HIGH				{ 1, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_14_ASC0_TXD		{ 0, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P0_13_SSC0_CS7		{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_13_EXINT6			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_13					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_13_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_13_SSC1_CS7		{ 0, 0, 0, 0, 1 }
+#define LTQ_MUX_P0_13_SSC1_INT		{ 0, 0, 0, 1, 1 }
+
+#define LTQ_MUX_P0_12_SSC0_CS6		{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_12_EXINT5			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_12					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_12_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_12_SSC1_CS6		{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_11_SSC0_CS5		{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_11_EXINT4			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_11					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_11_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_11_SSC1_CS5		{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_10_SSC0_CS4		{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_10_EXINT3			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_10					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_10_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_10_SSC1_CS4		{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_9_SSC0_CS3			{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_9_EXINT2			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_9						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_9_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_9_SSC1_CS3			{ 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_8_SSC0_CS2			{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_8_EXINT1			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_8						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_8_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_8_SSC1_CS2			{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_7_SSC0_CS1			{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_7_EXINT0			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_7						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_7_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_7_SSC1_CS1			{ 0, 0, 0, 0, 1 }
+#define LTQ_MUX_P0_7_SSC1_CS0			{ 0, 1, 0, 0, 1 }
+#define LTQ_MUX_P0_7_SSC2_CS0			{ 0, 1, 0, 0, 1 }
+
+#define LTQ_MUX_P0_6_SSC0_CS0			{ 0, 0, 1, 0, 0 }
+#define LTQ_MUX_P0_6						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_6_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_6_IN					{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_6_SSC1_CS0			{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_5_SSC1_SCLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_5						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_5_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_5_IN					{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_5_SSC2_CLK			{ 0, 1, 0, 0, 1 }
+
+#define LTQ_MUX_P0_4_SSC1_MRST		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_4						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_4_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_4_IN					{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_4_SSC2_MRST		{ 0, 0, 0, 0, 1 }
+
+#define LTQ_MUX_P0_3_SSC1_MTSR		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_3						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_3_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_3_IN					{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P0_3_SSC2_MTSR		{ 0, 1, 0, 0, 1 }
+
+#define LTQ_MUX_P0_2_SSC0_SCLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_2						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_2_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_2_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P0_1_SSC0_MRST		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P0_1						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_1_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_1_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P0_0_SSC0_MTSR		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P0_0						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_0_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P0_0_IN					{ 0, 1, 0, 1, 0 }
+
+
+#define LTQ_MUX_P1_19_PCM3_TC1		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_19_EXINT15			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P1_19					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_19					{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P1_18_PCM3_FSC		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_18_EXINT11			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P1_18					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_18_HIGH				{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P1_17_PCM3_PCL		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_17_EXINT12			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P1_17					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_17_HIGH				{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P1_16_PCM3_TX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_16_EXINT13			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P1_16					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_16_HIGH				{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P1_15_PCM3_RX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_15_EXINT14			{ 0, 1, 0, 1, 0 }
+#define LTQ_MUX_P1_15					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_15_HIGH				{ 1, 0, 0, 1, 0 }
+
+#define LTQ_MUX_P1_14_PCM2_TC1		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_14					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_14_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_14_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_13_PCM2_FSC		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_13					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_13_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_13_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_12_PCM2_PCL		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_12					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_12_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_12_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_11_PCM2_TX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_11					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_11_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_11_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_10_PCM2_RX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_10					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_10_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_10_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_9_PCM1_TC1			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_9						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_9_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_9_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_8_PCM1_FSC			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_8						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_8_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_8_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_7_PCM1_PCL			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_7						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_7_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_7_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_6_PCM1_TX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_6						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_6_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_6_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_5_PCM1_RX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_5						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_5_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_5_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_4_PCM0_TC1			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_4						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_4_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_4_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_3_PCM0_FSC			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_3						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_3_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_3_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_2_PCM0_PCL			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_2						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_2_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_2_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_1_PCM0_TX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_1						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_1_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_1_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P1_0_PCM0_RX			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P1_0						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_0_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P1_0_IN					{ 0, 1, 0, 1, 0 }
+
+
+#define LTQ_MUX_P2_18_EBU_BC1			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_18					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_18_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_18_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_17_EBU_BC0			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_17					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_17					{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_17_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_16_EBU_RDBY		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P2_16					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_16_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_16_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_15_EBU_WAIT		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P2_15					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_15_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_15_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_14_EBU_ALE			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_14					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_14_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_14_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_13_EBU_WR			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_13					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_13_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_13_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_12_EBU_RD			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_12					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_12_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_12_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_11_EBU_A11			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_11					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_11_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_11_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_10_EBU_A10			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_10					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_10_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_10_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_9_EBU_A9			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_9						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_9_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_9_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_8_EBU_A8			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_8						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_8_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_8_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_7_EBU_A7			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_7						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_7_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_7_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_6_EBU_A6			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_6						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_6_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_6_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_5_EBU_A5			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_5						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_5_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_5_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_4_EBU_A4			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_4						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_4_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_4_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_3_EBU_A3			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_3						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_3_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_3_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_2_EBU_A2			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_2						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_2_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_2_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_1_EBU_A1			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_1						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_1_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_1_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P2_0_EBU_A0			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P2_0						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_0_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P2_0_IN					{ 0, 1, 0, 1, 0 }
+
+
+#define LTQ_MUX_P3_19_EBU_CS3			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P3_19					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_19_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_19_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_18_EBU_CS2			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P3_18					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_18_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_18_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_17_EBU_CS1			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P3_17					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_17_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_17_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_16_EBU_CS0			{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P3_16					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_16_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_16_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_15_EBU_AD15		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_15					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_15_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_15_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_14_EBU_AD14		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_14					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_14_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_14_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_13_EBU_AD13		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_13					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_13_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_13_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_12_EBU_AD12		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_12					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_12_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_12_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_11_EBU_AD11		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_11					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_11_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_11_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_10_EBU_AD10		{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_10					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_10_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_10_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_9_EBU_AD9			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_9						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_9_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_9_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_8_EBU_AD8			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_8						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_8_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_8_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_7_EBU_AD7			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_7						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_7_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_7_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_6_EBU_AD6			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_6						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_6_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_6_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_5_EBU_AD5			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_5						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_5_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_5_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_4_EBU_AD4			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_4						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_4_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_4_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_3_EBU_AD3			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_3						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_3_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_3_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_2_EBU_AD2			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_2						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_2_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_2_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_1_EBU_AD1			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_1						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_1_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_1_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P3_0_EBU_AD0			{ 0, 1, 0, 0, 0 }
+#define LTQ_MUX_P3_0						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_0_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P3_0_IN					{ 0, 1, 0, 1, 0 }
+
+
+#define LTQ_MUX_P4_23_SSLIC7_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_23					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_23_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_23_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_22_SSLIC7_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_22					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_22_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_22_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_21_SSLIC7_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_21					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_21_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_21_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_20_SSLIC6_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_20					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_20_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_20_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_19_SSLIC6_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_19					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_19_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_19_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_18_SSLIC6_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_18					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_18_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_18_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_17_SSLIC5_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_17					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_17_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_17_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_16_SSLIC5_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_16					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_16_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_16_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_15_SSLIC5_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_15					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_15_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_15_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_14_SSLIC4_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_14					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_14_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_14_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_13_SSLIC4_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_13					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_13_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_13_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_12_SSLIC4_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_12					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_12_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_12_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_11_SSLIC3_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_11					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_11_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_11_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_10_SSLIC3_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_10					{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_10_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_10_IN				{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_9_SSLIC3_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_9						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_9_HIGH				{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_9_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_8_SSLIC2_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_8						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_8_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_8_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_7_SSLIC2_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_7						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_7_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_7_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_6_SSLIC2_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_6						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_6_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_6_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_5_SSLIC1_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_5						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_5_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_5_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_4_SSLIC1_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_4						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_4_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_4_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_3_SSLIC1_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_3						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_3_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_3_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_2_SSLIC0_CLK		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_2						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_2_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_2_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_1_SSLIC0_RX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_1						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_1_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_1_IN					{ 0, 1, 0, 1, 0 }
+
+#define LTQ_MUX_P4_0_SSLIC0_TX		{ 0, 0, 0, 0, 0 }
+#define LTQ_MUX_P4_0						{ 0, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_0_HIGH				{ 1, 0, 0, 1, 0 }
+#define LTQ_MUX_P4_0_IN					{ 0, 1, 0, 1, 0 }
+
+#endif
--- a/arch/mips/lantiq/svip/Makefile
+++ b/arch/mips/lantiq/svip/Makefile
@@ -1,3 +1,3 @@
-obj-y := prom.o reset.o switchip_setup.o pms.o dma.o
+obj-y := prom.o reset.o switchip_setup.o pms.o dma.o gpio.o mux.o
 obj-$(CONFIG_LANTIQ_MACH_EASY33016) += mach-easy33016.o
 obj-$(CONFIG_LANTIQ_MACH_EASY336) += mach-easy336.o
--- /dev/null
+++ b/arch/mips/lantiq/svip/gpio.c
@@ -0,0 +1,558 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2010 John Crispin <blogic@openwrt.org>
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/ioport.h>
+#include <linux/io.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/proc_fs.h>
+#include <linux/init.h>
+#include <linux/ioctl.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/kobject.h>
+#include <linux/workqueue.h>
+#include <linux/skbuff.h>
+#include <linux/netlink.h>
+#include <linux/platform_device.h>
+#include <net/sock.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+#include <linux/semaphore.h>
+
+#include <lantiq_soc.h>
+#include <svip_mux.h>
+#include <base_reg.h>
+#include <port_reg.h>
+
+#define DRV_NAME			"ifxmips_gpio"
+
+int gpio_to_irq(unsigned int gpio)
+{
+	return -EINVAL;
+}
+EXPORT_SYMBOL(gpio_to_irq);
+
+int irq_to_gpio(unsigned int gpio)
+{
+	return -EINVAL;
+}
+EXPORT_SYMBOL(irq_to_gpio);
+
+struct ltq_port_base {
+	struct svip_reg_port *base;
+	u32 pins;
+};
+
+/* Base addresses for ports */
+static const struct ltq_port_base ltq_port_base[] = {
+	{ (struct svip_reg_port *)LTQ_PORT_P0_BASE, 20 },
+	{ (struct svip_reg_port *)LTQ_PORT_P1_BASE, 20 },
+	{ (struct svip_reg_port *)LTQ_PORT_P2_BASE, 19 },
+	{ (struct svip_reg_port *)LTQ_PORT_P3_BASE, 20 },
+	{ (struct svip_reg_port *)LTQ_PORT_P4_BASE, 24 }
+};
+
+#define MAX_PORTS		ARRAY_SIZE(ltq_port_base)
+#define PINS_PER_PORT(port)	(ltq_port_base[port].pins)
+
+static inline
+void ltq_port_set_exintcr0(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->exintcr0) | (1 << pin),
+		 ltq_port_base[port].base->exintcr0);
+}
+
+static inline
+void ltq_port_clear_exintcr0(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->exintcr0) & ~(1 << pin),
+		 ltq_port_base[port].base->exintcr0);
+}
+
+static inline
+void ltq_port_set_exintcr1(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->exintcr1) | (1 << pin),
+		 ltq_port_base[port].base->exintcr1);
+}
+
+static inline
+void ltq_port_clear_exintcr1(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->exintcr1) & ~(1 << pin),
+		 ltq_port_base[port].base->exintcr1);
+}
+
+static inline
+void ltq_port_set_irncfg(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->irncfg) | (1 << pin),
+		 ltq_port_base[port].base->irncfg);
+}
+
+static inline
+void ltq_port_clear_irncfg(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->irncfg) & ~(1 << pin),
+		 ltq_port_base[port].base->irncfg);
+}
+
+static inline
+void ltq_port_set_irnen(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(1 << pin, ltq_port_base[port].base->irnenset);
+}
+
+static inline
+void ltq_port_clear_irnen(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(1 << pin, ltq_port_base[port].base->irnenclr);
+}
+
+static inline
+void ltq_port_set_dir_out(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->dir) | (1 << pin),
+		 ltq_port_base[port].base->dir);
+}
+
+static inline
+void ltq_port_set_dir_in(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->dir) & ~(1 << pin),
+		 ltq_port_base[port].base->dir);
+}
+
+static inline
+void ltq_port_set_output(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->out) | (1 << pin),
+		 ltq_port_base[port].base->out);
+}
+
+static inline
+void ltq_port_clear_output(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->out) & ~(1 << pin),
+		 ltq_port_base[port].base->out);
+}
+
+static inline
+int ltq_port_get_input(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return -EINVAL;
+
+	return (port_r32(ltq_port_base[port].base->in) & (1 << pin)) == 0;
+}
+
+static inline
+void ltq_port_set_puen(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->puen) | (1 << pin),
+		 ltq_port_base[port].base->puen);
+}
+
+static inline
+void ltq_port_clear_puen(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->puen) & ~(1 << pin),
+		 ltq_port_base[port].base->puen);
+}
+
+static inline
+void ltq_port_set_altsel0(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->altsel0) | (1 << pin),
+		 ltq_port_base[port].base->altsel0);
+}
+
+static inline
+void ltq_port_clear_altsel0(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->altsel0) & ~(1 << pin),
+		 ltq_port_base[port].base->altsel0);
+}
+
+static inline
+void ltq_port_set_altsel1(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->altsel1) | (1 << pin),
+		 ltq_port_base[port].base->altsel1);
+}
+
+static inline
+void ltq_port_clear_altsel1(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return;
+
+	port_w32(port_r32(ltq_port_base[port].base->altsel1) & ~(1 << pin),
+		 ltq_port_base[port].base->altsel1);
+}
+
+void ltq_gpio_configure(int port, int pin, bool out, bool dirin, bool puen,
+	bool altsel0, bool altsel1)
+{
+	if (dirin)
+		ltq_port_set_dir_in(port, pin);
+	else
+		ltq_port_set_dir_out(port, pin);
+
+	if (puen)
+		ltq_port_set_puen(port, pin);
+	else
+		ltq_port_clear_puen(port, pin);
+
+	if (altsel0)
+		ltq_port_set_altsel0(port, pin);
+	else
+		ltq_port_clear_altsel0(port, pin);
+
+	if (altsel1)
+		ltq_port_set_altsel1(port, pin);
+	else
+		ltq_port_clear_altsel1(port, pin);
+
+	if (out)
+		ltq_port_set_output(port, pin);
+	else
+		ltq_port_clear_output(port, pin);
+}
+
+int ltq_port_get_dir(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return -EINVAL;
+
+	return (port_r32(ltq_port_base[port].base->dir) & (1 << pin)) != 0;
+}
+
+int ltq_port_get_puden(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return -EINVAL;
+
+	return (port_r32(ltq_port_base[port].base->puen) & (1 << pin)) != 0;
+}
+
+int ltq_port_get_altsel0(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return -EINVAL;
+
+	return (port_r32(ltq_port_base[port].base->altsel0) & (1 << pin)) != 0;
+}
+
+int ltq_port_get_altsel1(unsigned int port, unsigned int pin)
+{
+	if (port >= MAX_PORTS || pin >= PINS_PER_PORT(port))
+		return -EINVAL;
+
+	return (port_r32(ltq_port_base[port].base->altsel1) & (1 << pin)) != 0;
+}
+
+struct ltq_gpio_port {
+	struct gpio_chip gpio_chip;
+	unsigned int irq_base;
+	unsigned int chained_irq;
+};
+
+static struct ltq_gpio_port ltq_gpio_port[MAX_PORTS];
+
+static int gpio_exported;
+static int __init gpio_export_setup(char *str)
+{
+	get_option(&str, &gpio_exported);
+	return 1;
+}
+__setup("gpio_exported=", gpio_export_setup);
+
+static inline unsigned int offset2port(unsigned int offset)
+{
+	unsigned int i;
+	unsigned int prev = 0;
+
+	for (i = 0; i < ARRAY_SIZE(ltq_port_base); i++) {
+		if (offset >= prev &&
+		    offset < prev + ltq_port_base[i].pins)
+			return i;
+
+		prev = ltq_port_base[i].pins;
+	}
+
+	return 0;
+}
+
+static inline unsigned int offset2pin(unsigned int offset)
+{
+	unsigned int i;
+	unsigned int prev = 0;
+
+	for (i = 0; i < ARRAY_SIZE(ltq_port_base); i++) {
+		if (offset >= prev &&
+		    offset < prev + ltq_port_base[i].pins)
+			return offset - prev;
+
+		prev = ltq_port_base[i].pins;
+	}
+
+	return 0;
+}
+
+static int ltq_gpio_direction_input(struct gpio_chip *chip, unsigned int offset)
+{
+	ltq_port_set_dir_in(offset2port(offset), offset2pin(offset));
+	return 0;
+}
+
+static int ltq_gpio_direction_output(struct gpio_chip *chip,
+				     unsigned int offset, int value)
+{
+	ltq_port_set_dir_out(offset2port(offset), offset2pin(offset));
+	return 0;
+}
+
+static int ltq_gpio_get(struct gpio_chip *chip, unsigned int offset)
+{
+	return ltq_port_get_input(offset2port(offset), offset2pin(offset));
+}
+
+static void ltq_gpio_set(struct gpio_chip *chip, unsigned int offset, int value)
+{
+	if (value)
+		ltq_port_set_output(offset2port(offset), offset2pin(offset));
+	else
+		ltq_port_clear_output(offset2port(offset), offset2pin(offset));
+}
+
+static int ltq_gpio_request(struct gpio_chip *chip, unsigned offset)
+{
+	return 0;
+}
+
+static void ltq_gpio_free(struct gpio_chip *chip, unsigned offset)
+{
+}
+
+static int ltq_gpio_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct ltq_gpio_port *gpio_port;
+
+	if (pdev->id >= MAX_PORTS)
+		return -ENODEV;
+
+	gpio_port = &ltq_gpio_port[pdev->id];
+	gpio_port->gpio_chip.label = "ltq-gpio";
+
+	gpio_port->gpio_chip.direction_input = ltq_gpio_direction_input;
+	gpio_port->gpio_chip.direction_output = ltq_gpio_direction_output;
+	gpio_port->gpio_chip.get = ltq_gpio_get;
+	gpio_port->gpio_chip.set = ltq_gpio_set;
+	gpio_port->gpio_chip.request = ltq_gpio_request;
+	gpio_port->gpio_chip.free = ltq_gpio_free;
+	gpio_port->gpio_chip.base = 100 * pdev->id;
+	gpio_port->gpio_chip.ngpio = 32;
+	gpio_port->gpio_chip.dev = &pdev->dev;
+	gpio_port->gpio_chip.exported = gpio_exported;
+
+	ret = gpiochip_add(&gpio_port->gpio_chip);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Could not register gpiochip %d, %d\n",
+			pdev->id, ret);
+		goto err;
+	}
+	platform_set_drvdata(pdev, gpio_port);
+
+	return 0;
+
+err:
+	return ret;
+}
+
+static int ltq_gpio_remove(struct platform_device *pdev)
+{
+	struct ltq_gpio_port *gpio_port = platform_get_drvdata(pdev);
+	int ret;
+
+	ret = gpiochip_remove(&gpio_port->gpio_chip);
+
+	return ret;
+}
+
+static struct platform_driver ltq_gpio_driver = {
+	.probe = ltq_gpio_probe,
+	.remove = __devexit_p(ltq_gpio_remove),
+	.driver = {
+		.name = DRV_NAME,
+		.owner = THIS_MODULE,
+	},
+};
+
+int __init ltq_gpio_init(void)
+{
+	int ret = platform_driver_register(&ltq_gpio_driver);
+	if (ret)
+		printk(KERN_INFO DRV_NAME
+		       ": Error registering platform driver!");
+	return ret;
+}
+
+postcore_initcall(ltq_gpio_init);
+
+/**
+ * Convert interrupt number to corresponding port/pin pair
+ * Returns the port/pin pair serving the selected external interrupt;
+ * needed since mapping not linear.
+ *
+ * \param exint     External interrupt number
+ * \param port      Pointer for resulting port
+ * \param pin       Pointer for resutling pin
+ * \return -EINVAL  Invalid exint
+ * \return 0        port/pin updated
+ * \ingroup API
+ */
+static int ltq_exint2port(u32 exint, int *port, int *pin)
+{
+	if ((exint >= 0) && (exint <= 10)) {
+		*port = 0;
+		*pin  = exint + 7;
+	} else if ((exint >= 11) && (exint <= 14)) {
+		*port = 1;
+		*pin  = 18 - (exint - 11) ;
+	} else if (exint == 15) {
+		*port = 1;
+		*pin  = 19;
+	} else if (exint == 16) {
+		*port = 0;
+		*pin  = 19;
+	} else {
+		return -EINVAL;
+	}
+	return 0;
+}
+
+/**
+ * Enable external interrupt.
+ * This function enables an external interrupt and sets the given mode.
+ * valid values for mode are:
+ *   - 0 = Interrupt generation disabled
+ *   - 1 = Interrupt on rising edge
+ *   - 2 = Interrupt on falling edge
+ *   - 3 = Interrupt on rising and falling edge
+ *   - 5 = Interrupt on high level detection
+ *   - 6 = Interrupt on low level detection
+ *
+ * \param   exint - Number of external interrupt
+ * \param   mode  - Trigger mode
+ * \return  0 on success
+ * \ingroup API
+ */
+int ifx_enable_external_int(u32 exint, u32 mode)
+{
+	int port;
+	int pin;
+
+	if ((mode < 0) || (mode > 6))
+		return -EINVAL;
+
+	if (ltq_exint2port(exint, &port, &pin))
+		return -EINVAL;
+
+	ltq_port_clear_exintcr0(port, pin);
+	ltq_port_clear_exintcr1(port, pin);
+	ltq_port_clear_irncfg(port, pin);
+
+	if (mode & 0x1)
+		ltq_port_set_exintcr0(port, pin);
+	if (mode & 0x2)
+		ltq_port_set_exintcr1(port, pin);
+	if (mode & 0x4)
+		ltq_port_set_irncfg(port, pin);
+
+	ltq_port_set_irnen(port, pin);
+	return 0;
+}
+EXPORT_SYMBOL(ifx_enable_external_int);
+
+/**
+ * Disable external interrupt.
+ * This function disables an external interrupt and sets mode to 0x00.
+ *
+ * \param   exint - Number of external interrupt
+ * \return  0 on success
+ * \ingroup API
+ */
+int ifx_disable_external_int(u32 exint)
+{
+	int port;
+	int pin;
+
+	if (ltq_exint2port(exint, &port, &pin))
+		return -EINVAL;
+
+	ltq_port_clear_irnen(port, pin);
+	return 0;
+}
+EXPORT_SYMBOL(ifx_disable_external_int);
--- /dev/null
+++ b/arch/mips/lantiq/svip/mux.c
@@ -0,0 +1,185 @@
+/******************************************************************************
+
+                               Copyright (c) 2012
+                            Lantiq Deutschland GmbH
+
+  For licensing information, see the file 'LICENSE' in the root folder of
+  this software module.
+
+******************************************************************************/
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/proc_fs.h>
+#include <linux/init.h>
+#include <asm/addrspace.h>
+#include <linux/platform_device.h>
+
+#include <lantiq_soc.h>
+#include <svip_mux.h>
+#include <sys1_reg.h>
+#include <sys2_reg.h>
+#include <svip_pms.h>
+
+#define DRV_NAME "ltq_mux"
+
+static void ltq_mux_port_init(const int port,
+			      const struct ltq_mux_pin *pins,
+			      const int pin_max)
+{
+	unsigned int i;
+
+	for (i = 0; i < pin_max; i++)
+		ltq_gpio_configure(port,
+			i,
+			pins[i].out,
+			pins[i].dirin,
+			pins[i].puen,
+			pins[i].altsel0,
+			pins[i].altsel1);
+}
+
+static int ltq_mux_probe(struct platform_device *pdev)
+{
+	struct ltq_mux_settings *mux_settings = dev_get_platdata(&pdev->dev);
+
+	if (mux_settings->mux_p0)
+		ltq_mux_port_init(0,
+				  mux_settings->mux_p0,
+				  LTQ_MUX_P0_PINS);
+
+	if (mux_settings->mux_p1)
+		ltq_mux_port_init(1,
+				  mux_settings->mux_p1,
+				  LTQ_MUX_P1_PINS);
+
+	if (mux_settings->mux_p2)
+		ltq_mux_port_init(2,
+				  mux_settings->mux_p2,
+				  LTQ_MUX_P2_PINS);
+
+	if (mux_settings->mux_p3)
+		ltq_mux_port_init(3,
+				  mux_settings->mux_p3,
+				  LTQ_MUX_P3_PINS);
+
+	if (mux_settings->mux_p4)
+		ltq_mux_port_init(4,
+				  mux_settings->mux_p4,
+				  LTQ_MUX_P4_PINS);
+
+	return 0;
+}
+
+int ltq_mux_read_procmem(char *buf, char **start, off_t offset,
+			 int count, int *eof, void *data)
+{
+	int len = 0;
+	int t = 0, i = 0;
+	u32 port_clk[5] = {
+		SYS1_CLKENR_PORT0,
+		SYS1_CLKENR_PORT1,
+		SYS1_CLKENR_PORT2,
+		SYS1_CLKENR_PORT3,
+		SYS2_CLKENR_PORT4,
+	};
+
+#define PROC_PRINT(fmt, args...) \
+	do { \
+		int c_len = 0; \
+		c_len = snprintf(buf + len, count - len, fmt, ## args); \
+		if (c_len <= 0) \
+			goto out; \
+		if (c_len >= (count - len)) { \
+			len += (count - len); \
+			goto out; \
+		} \
+		len += c_len; \
+		if (offset > 0) { \
+			if (len > offset) { \
+				len -= offset; \
+				memmove(buf, buf + offset, len); \
+				offset = 0; \
+			} else { \
+				offset -= len; \
+				len = 0; \
+			} \
+		} \
+	} while (0)
+
+	PROC_PRINT("\nVINETIC-SVIP Multiplex Settings\n");
+	PROC_PRINT("              3         2         1         0\n");
+	PROC_PRINT("             10987654321098765432109876543210\n");
+	PROC_PRINT("             --------------------------------\n");
+
+	for (i = 0; i < ARRAY_SIZE(port_clk); i++) {
+		if (i < 4) {
+			if (!svip_sys1_clk_is_enabled(port_clk[i]))
+				continue;
+		} else {
+			if (!svip_sys2_clk_is_enabled(port_clk[i]))
+				continue;
+		}
+
+		PROC_PRINT("P%d.%-10s", i, "DIR:");
+
+		for (t = 31; t != -1; t--)
+			PROC_PRINT("%d", ltq_port_get_dir(i, t) == 1 ? 1 : 0);
+		PROC_PRINT("\n");
+
+		PROC_PRINT("P%d.%-10s", i, "PUEN:");
+		for (t = 31; t != -1; t--)
+			PROC_PRINT("%d", ltq_port_get_puden(i, t) == 1 ? 1 : 0);
+		PROC_PRINT("\n");
+
+		PROC_PRINT("P%d.%-10s", i, "ALTSEL0:");
+		for (t = 31; t != -1; t--)
+			PROC_PRINT("%d",
+				   ltq_port_get_altsel0(i, t) == 1 ? 1 : 0);
+		PROC_PRINT("\n");
+
+		PROC_PRINT("P%d.%-10s", i, "ALTSEL1:");
+		for (t = 31; t != -1; t--)
+			PROC_PRINT("%d",
+				   ltq_port_get_altsel1(i, t) == 1 ? 1 : 0);
+		PROC_PRINT("\n\n");
+	}
+
+out:
+	if (len < 0) {
+		len = 0;
+		*eof = 1;
+	} else if (len < count) {
+		*eof = 1;
+	} else {
+		len = count;
+	}
+
+	*start = buf;
+
+	return len;
+}
+
+static struct platform_driver ltq_mux_driver = {
+	.probe = ltq_mux_probe,
+	.driver = {
+		.name = DRV_NAME,
+		.owner = THIS_MODULE,
+	},
+};
+
+int __init ltq_mux_init(void)
+{
+	int ret = platform_driver_register(&ltq_mux_driver);
+	if (ret) {
+		printk(KERN_INFO DRV_NAME
+		       ": Error registering platform driver!");
+		return ret;
+	}
+
+	return create_proc_read_entry("driver/ltq_mux", 0, NULL,
+				      ltq_mux_read_procmem, NULL) == NULL;
+}
+
+module_init(ltq_mux_init);
