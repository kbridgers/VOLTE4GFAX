Index: linux-2.6.32.42/drivers/net/imq.c
===================================================================
--- linux-2.6.32.42.orig/drivers/net/imq.c	2011-09-28 12:31:14.252728728 +0530
+++ linux-2.6.32.42/drivers/net/imq.c	2011-09-28 18:08:13.872739492 +0530
@@ -240,6 +240,16 @@
 	dev->stats.tx_packets++;
 
 	if (entry == NULL) {
+
+		#ifdef CONFIG_BRIDGE_EBT_IMQ
+		if (skb->imq_flags == IMQ_F_EBT) {
+			skb->imq_flags = 0;
+			skb->destructor = NULL;
+			dev_hard_start_xmit(skb,skb->dev,NULL);
+			return 0;
+		}
+		#endif
+
 		/* We don't know what is going on here.. packet is queued for
 		 * imq device, but (probably) not by us.
 		 *
@@ -273,6 +283,74 @@
 	return NETDEV_TX_OK;
 }
 
+static int __ebt_optimized imq_ebt_queue(struct sk_buff *skb, unsigned queue_num)
+{
+	struct net_device *dev;
+	struct Qdisc *q;
+	struct netdev_queue *txq;
+	int    index;
+	int retval = -EINVAL;
+
+	index = skb->imq_flags & IMQ_F_IFMASK;
+	if (unlikely(index > numdevs - 1)) {
+		if (net_ratelimit())
+			printk(KERN_WARNING
+			       "IMQ: invalid device specified, highest is %u\n",
+			       numdevs - 1);
+		retval = -EINVAL;
+		goto out;
+	}
+
+	/* check for imq device by index from cache */
+	dev = imq_devs_cache[index];
+	if (unlikely(!dev)) {
+		char buf[8];
+
+		/* get device by name and cache result */
+		snprintf(buf, sizeof(buf), "imq%d", index);
+		dev = dev_get_by_name(&init_net, buf);
+		if (!dev) {
+			/* not found ?!*/
+			BUG();
+			retval = -ENODEV;
+			goto out;
+		}
+
+		imq_devs_cache[index] = dev;
+		dev_put(dev);
+	}
+
+	if (unlikely(!(dev->flags & IFF_UP))) {
+		skb->imq_flags = 0;
+		retval = -1;
+		goto out;
+	}
+	dev->last_rx = jiffies;
+
+
+	dev->stats.rx_bytes += skb->len;
+	dev->stats.rx_packets++;
+
+	txq = dev_pick_tx(dev, skb);
+
+	q = rcu_dereference(txq->qdisc);
+
+	spin_lock_bh(qdisc_lock(q));
+
+	qdisc_enqueue_root(skb, q); /* might kfree_skb */
+	skb->imq_flags = IMQ_F_EBT;
+
+	spin_unlock_bh(qdisc_lock(q));
+
+	/* schedule qdisc dequeue */
+	__netif_schedule(q);
+
+	retval = 0;
+
+out:
+	return retval;
+}
+
 static int imq_nf_queue(struct nf_queue_entry *entry, unsigned queue_num)
 {
 	struct net_device *dev;
@@ -393,6 +471,9 @@
 static struct nf_queue_handler nfqh = {
 	.name  = "imq",
 	.outfn = imq_nf_queue,
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+	.ebt_imq = imq_ebt_queue,
+#endif
 };
 
 static unsigned int imq_nf_hook(unsigned int hook, struct sk_buff *pskb,
Index: linux-2.6.32.42/include/linux/imq.h
===================================================================
--- linux-2.6.32.42.orig/include/linux/imq.h	2011-09-28 12:31:14.272726731 +0530
+++ linux-2.6.32.42/include/linux/imq.h	2011-09-28 12:31:16.385229718 +0530
@@ -6,6 +6,7 @@
 
 #define IMQ_F_IFMASK	0x0f
 #define IMQ_F_ENQUEUE	0x10
+#define IMQ_F_EBT	0x11
 
 #define IMQ_MAX_DEVS	(IMQ_F_IFMASK + 1)
 
Index: linux-2.6.32.42/include/linux/netfilter_bridge/ebt_imq.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.32.42/include/linux/netfilter_bridge/ebt_imq.h	2011-09-28 12:31:16.385229718 +0530
@@ -0,0 +1,7 @@
+#ifndef __LINUX_BRIDGE_EBT_IMQ_H
+#define __LINUX_BRIDGE_EBT_IMQ_H
+struct ebt_imq_info
+{
+	unsigned int todev;
+};
+#endif
Index: linux-2.6.32.42/include/net/netfilter/nf_queue.h
===================================================================
--- linux-2.6.32.42.orig/include/net/netfilter/nf_queue.h	2011-09-28 12:31:14.272726731 +0530
+++ linux-2.6.32.42/include/net/netfilter/nf_queue.h	2011-09-28 12:31:16.385229718 +0530
@@ -28,6 +28,9 @@
 	int			(*outfn)(struct nf_queue_entry *entry,
 					 unsigned int queuenum);
 	char			*name;
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+	int			(*ebt_imq)(struct sk_buff *skb);
+#endif
 };
 
 extern int nf_register_queue_handler(u_int8_t pf,
Index: linux-2.6.32.42/net/bridge/br_forward.c
===================================================================
--- linux-2.6.32.42.orig/net/bridge/br_forward.c	2011-09-28 12:31:16.375229006 +0530
+++ linux-2.6.32.42/net/bridge/br_forward.c	2011-09-28 18:07:27.746489164 +0530
@@ -16,6 +16,12 @@
 #include <linux/skbuff.h>
 #include <linux/if_vlan.h>
 #include <linux/netfilter_bridge.h>
+
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+#include <linux/netfilter_bridge/ebt_imq.h>
+extern int nf_ebt_queue(struct sk_buff *skb);
+#endif
+
 #include "br_private.h"
 
 #if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE)) && defined(CONFIG_BRIDGE_NETFILTER)
@@ -39,6 +45,9 @@
 
 int __ebt_optimized br_dev_queue_push_xmit(struct sk_buff *skb)
 {
+	#ifdef CONFIG_BRIDGE_EBT_IMQ
+	int retval = -1;
+	#endif
 	/* drop mtu oversized packets except gso */
 	if (packet_length(skb) > skb->dev->mtu && !skb_is_gso(skb))
 		kfree_skb(skb);
@@ -49,7 +58,16 @@
 		else {
 			skb_push(skb, ETH_HLEN);
 
+		#ifdef CONFIG_BRIDGE_EBT_IMQ
+			if (skb->imq_flags & IMQ_F_ENQUEUE) {
+				retval = nf_ebt_queue(skb);
+			}
+			if (retval < 0) {
+				dev_queue_xmit(skb);
+			}
+		#else
 			dev_queue_xmit(skb);
+		#endif
 		}
 	}
 
Index: linux-2.6.32.42/net/bridge/netfilter/Kconfig
===================================================================
--- linux-2.6.32.42.orig/net/bridge/netfilter/Kconfig	2011-09-28 12:31:16.375229006 +0530
+++ linux-2.6.32.42/net/bridge/netfilter/Kconfig	2011-09-28 18:06:36.112739483 +0530
@@ -75,6 +75,14 @@
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config BRIDGE_EBT_IMQ
+	depends on NETFILTER_XT_TARGET_IMQ
+	bool "ebt: IMQ support"
+	help
+	  This option adds IMQ target for bridged target.
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config BRIDGE_EBT_AMONG
 	tristate "ebt: among filter support"
 	help
Index: linux-2.6.32.42/net/netfilter/nf_queue.c
===================================================================
--- linux-2.6.32.42.orig/net/netfilter/nf_queue.c	2011-09-28 12:31:14.272726731 +0530
+++ linux-2.6.32.42/net/netfilter/nf_queue.c	2011-09-28 18:07:40.862739065 +0530
@@ -122,6 +122,19 @@
 }
 EXPORT_SYMBOL_GPL(nf_queue_entry_release_refs);
 
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+int __ebt_optimized nf_ebt_queue(struct sk_buff *skb)
+{
+	int retval = -1;
+	const struct nf_queue_handler *qih = rcu_dereference(queue_imq_handler);
+	if(qih) {
+		retval = qih->ebt_imq(skb);
+	}
+	return retval;
+}
+EXPORT_SYMBOL(nf_ebt_queue);
+#endif
+
 /*
  * Any packet that leaves via this function must come back
  * through nf_reinject().
Index: linux-2.6.32.42/net/netfilter/xt_IMQ.c
===================================================================
--- linux-2.6.32.42.orig/net/netfilter/xt_IMQ.c	2011-09-28 12:31:14.272726731 +0530
+++ linux-2.6.32.42/net/netfilter/xt_IMQ.c	2011-09-28 12:31:16.385229718 +0530
@@ -7,6 +7,10 @@
 #include <linux/netfilter/xt_IMQ.h>
 #include <linux/imq.h>
 
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+#include <linux/netfilter_bridge/ebtables.h>
+#endif
+
 static unsigned int imq_target(struct sk_buff *pskb,
 				const struct xt_target_param *par)
 {
@@ -17,6 +21,17 @@
 	return XT_CONTINUE;
 }
 
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+static unsigned int imq_ebt_target(struct sk_buff *pskb,
+				const struct xt_target_param *par)
+{
+	const struct xt_imq_info *mr = par->targinfo;
+
+	pskb->imq_flags = (mr->todev & IMQ_F_IFMASK) | IMQ_F_ENQUEUE;
+
+	return EBT_CONTINUE;
+}
+#endif
 static bool imq_checkentry(const struct xt_tgchk_param *par)
 {
 	struct xt_imq_info *mr = par->targinfo;
@@ -50,6 +65,17 @@
 		.table		= "mangle",
 		.me             = THIS_MODULE
 	},
+#ifdef CONFIG_BRIDGE_EBT_IMQ
+	{
+		.name           = "IMQ",
+		.revision       = 0,
+		.family		= NFPROTO_BRIDGE,
+		.checkentry     = imq_checkentry,
+		.target         = imq_ebt_target,
+		.targetsize	= sizeof(struct xt_imq_info),
+		.me             = THIS_MODULE
+	},
+#endif
 };
 
 static int __init imq_init(void)
