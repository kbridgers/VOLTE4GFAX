Index: linux-2.6.32.42/drivers/net/usb/usbnet.c
===================================================================
--- linux-2.6.32.42.orig/drivers/net/usb/usbnet.c	2012-04-11 10:31:35.869016727 +0530
+++ linux-2.6.32.42/drivers/net/usb/usbnet.c	2012-04-27 10:32:04.159058224 +0530
@@ -32,6 +32,9 @@
 
 // #define	DEBUG			// error path messages, extra info
 // #define	VERBOSE			// more; success messages
+#define USBNET_PPA_FP
+#define USBNET_NOOFFSET
+#define USBNET_EXTRAOFFSET 32
 
 #include <linux/module.h>
 #include <linux/init.h>
@@ -43,6 +46,12 @@
 #include <linux/mii.h>
 #include <linux/usb.h>
 #include <linux/usb/usbnet.h>
+#ifdef USBNET_PPA_FP
+#include <net/ifx_ppa_api.h>
+#include <net/ifx_ppa_hook.h>
+#include <net/ifx_ppa_api_directpath.h>
+#endif
+
 
 #define DRIVER_VERSION		"22-Aug-2005"
 
@@ -88,6 +97,127 @@
 module_param (msg_level, int, 0);
 MODULE_PARM_DESC (msg_level, "Override default message level");
 
+#ifdef USBNET_PPA_FP
+	int	usbnet_addr_monitor=0;
+	static int ppa_startup_hook = 1;
+	module_param (ppa_startup_hook, int, 0);
+	MODULE_PARM_DESC (ppa_startup_hook, "0: don't hook ppa at startup, other: do hook");
+
+	static int bridge_mode = 0;
+	static int bridge_mode_running = 0;
+	module_param (bridge_mode, int, 0);
+	MODULE_PARM_DESC (bridge_mode, "0: full NAT mode other: single NAT mode");
+
+	static char *bridge_mode_mac_addr;
+	module_param(bridge_mode_mac_addr, charp, S_IRUGO);
+	MODULE_PARM_DESC(bridge_mode_mac_addr, "MAC addr for single NAT mode");
+
+	unsigned char snat_mac[6]={0,0,0,0,0,0},snat_mac_good=0;
+
+	static u8 nibble(unsigned char c)
+	{
+		if (likely(isdigit(c)))
+			return c - '0';
+		c = toupper(c);
+		if (likely(isxdigit(c)))
+			return 10 + c - 'A';
+		return 0;
+	}
+
+
+	void check_snat_mac(const char *str)
+	{
+		if (str) {
+			unsigned	i;
+
+			for (i = 0; i < 6; i++) {
+				unsigned char num;
+
+				if ((*str == '.') || (*str == ':'))
+					str++;
+				num = nibble(*str++) << 4;
+				num |= (nibble(*str++));
+				snat_mac [i] = num;
+			}
+			if (is_valid_ether_addr(snat_mac))
+			{
+				snat_mac_good=1;
+				return ;
+			}
+		}
+		snat_mac_good=0;
+		snat_mac[0]=
+		snat_mac[1]=
+		snat_mac[2]=
+		snat_mac[3]=
+		snat_mac[4]=
+		snat_mac[5]=0;
+		return ;
+	}
+
+	PPA_DIRECTPATH_CB usbnet_ppafp_cb;
+	int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev);
+	int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev);
+	int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len);
+
+	int 		usbnet_ppadp_occupied=-1;
+	int 		usbnet_ppadp_running=0;
+
+	static int  ppafp_enable=-1;
+	module_param (ppafp_enable, int, 1);
+	MODULE_PARM_DESC (ppafp_enable, "Override default ppafp_enable");
+
+	static void register_ppadp(struct net_device *net)
+	{
+		struct usbnet		*dev = netdev_priv(net);
+
+		if(dev->usbnet_ppadp_on && !usbnet_ppadp_running && ppa_hook_directpath_register_dev_fn )
+		{
+			uint32_t status;
+			uint32_t if_id;
+			usbnet_ppafp_cb.stop_tx_fn=usbnet_ppafp_pause_rx;
+			usbnet_ppafp_cb.start_tx_fn=usbnet_ppafp_resume_rx;
+			usbnet_ppafp_cb.rx_fn=usbnet_ppafp_start_xmit;
+#ifdef PPA_F_DIRECTPATH_WAN
+			bridge_mode_running=0;
+			if(   bridge_mode && snat_mac_good)
+			{
+				status=ppa_hook_directpath_register_dev_fn(
+						&if_id,net,
+						&usbnet_ppafp_cb,
+						PPA_F_DIRECTPATH_REGISTER
+						| PPA_F_DIRECTPATH_ETH_IF
+//						| PPA_F_DIRECTPATH_WAN
+					);
+				if(status==IFX_SUCCESS)
+					bridge_mode_running=1;
+			}
+			else
+			{
+			status=ppa_hook_directpath_register_dev_fn(
+					&if_id,net,
+					&usbnet_ppafp_cb,
+					PPA_F_DIRECTPATH_REGISTER
+					| PPA_F_DIRECTPATH_ETH_IF
+					| PPA_F_DIRECTPATH_WAN
+					);
+			}
+#else
+			status=ppa_hook_directpath_register_dev_fn(
+					&if_id,net,
+					&usbnet_ppafp_cb,
+					PPA_F_DIRECTPATH_REGISTER
+					| PPA_F_DIRECTPATH_ETH_IF
+				);
+#endif
+			if(status==IFX_SUCCESS)
+				usbnet_ppadp_running=1;
+		}
+		if(!ppa_hook_directpath_register_dev_fn)
+			usbnet_ppadp_running=0;
+	}
+#endif
+
 /*-------------------------------------------------------------------------*/
 
 /* handles CDC Ethernet and many other network "bulk data" interfaces */
@@ -157,16 +287,6 @@
 }
 EXPORT_SYMBOL_GPL(usbnet_get_endpoints);
 
-static u8 nibble(unsigned char c)
-{
-	if (likely(isdigit(c)))
-		return c - '0';
-	c = toupper(c);
-	if (likely(isxdigit(c)))
-		return 10 + c - 'A';
-	return 0;
-}
-
 int usbnet_get_ethernet_addr(struct usbnet *dev, int iMACAddress)
 {
 	int 		tmp, i;
@@ -231,12 +351,64 @@
  */
 void usbnet_skb_return (struct usbnet *dev, struct sk_buff *skb)
 {
+	#ifdef USBNET_PPA_FP
+		uint32_t	fpstatus;
+	#endif
 	int	status;
 
 	if (test_bit(EVENT_RX_PAUSED, &dev->flags)) {
 		skb_queue_tail(&dev->rxq_pause, skb);
 		return;
 	}
+	#ifdef USBNET_PPA_FP
+
+if(usbnet_addr_monitor)
+{
+	unsigned char *base;
+	base=skb->data;
+	printk(KERN_INFO "usbnet_skb_return() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+}
+
+
+		if(bridge_mode && bridge_mode_running)
+		{
+			unsigned char *base;
+			base=skb->data;
+			//Set SrcMAC=UE
+#if 1
+			*(base+6 + 0)=dev->net->dev_addr [0];
+			*(base+6 + 1)=dev->net->dev_addr [1];
+			*(base+6 + 2)=dev->net->dev_addr [2];
+			*(base+6 + 3)=dev->net->dev_addr [3];
+			*(base+6 + 4)=dev->net->dev_addr [4]+1;
+			*(base+6 + 5)=dev->net->dev_addr [5];
+#endif
+			//Set DstMAC=NAT LAN PC
+			if(*(base+0 + 0)!=0xFF)
+			{
+			*(base+0 + 0)=*(snat_mac +0);
+			*(base+0 + 1)=*(snat_mac +1);
+			*(base+0 + 2)=*(snat_mac +2);
+			*(base+0 + 3)=*(snat_mac +3);
+			*(base+0 + 4)=*(snat_mac +4);
+			*(base+0 + 5)=*(snat_mac +5);
+			}
+
+if(usbnet_addr_monitor)
+	printk(KERN_INFO "     BRGSwap  SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+		}
+
+	#endif
 
 	skb->protocol = eth_type_trans (skb, dev->net);
 	dev->net->stats.rx_packets++;
@@ -246,9 +418,32 @@
 		devdbg (dev, "< rx, len %zu, type 0x%x",
 			skb->len + sizeof (struct ethhdr), skb->protocol);
 	memset (skb->cb, 0, sizeof (struct skb_data));
+
+	#ifdef USBNET_PPA_FP
+		if( dev->usbnet_ppadp_on)
+		{
+			register_ppadp(dev->net);
+			if( usbnet_ppadp_running &&
+			    ppa_hook_directpath_send_fn &&
+			    ppa_hook_get_ifid_for_netif_fn)
+			{
+	 	  		skb_push(skb,ETH_HLEN);
+		    	skb->mac_header = skb->data;
+#if 1
+			    if(skb->len==1470 || skb->len==1472)
+					skb_put(skb, 4);
+#endif
+				fpstatus = ppa_hook_directpath_send_fn(ppa_hook_get_ifid_for_netif_fn(dev->net), (PPA_BUF *)skb, skb->len, 0);
+if(usbnet_addr_monitor) printk(KERN_INFO "     Go PPA status:%d \n",fpstatus);
+				if(fpstatus)devdbg (dev, "ppa_hook_directpath_send_fn status %d", fpstatus);
+				return;
+			}
+		}
+	#endif
 	status = netif_rx (skb);
 	if (status != NET_RX_SUCCESS && netif_msg_rx_err (dev))
 		devdbg (dev, "netif_rx status %d", status);
+if(usbnet_addr_monitor) printk(KERN_INFO "     Go Kernel status:%d \n",status);
 }
 EXPORT_SYMBOL_GPL(usbnet_skb_return);
 
@@ -331,14 +526,32 @@
 	unsigned long		lockflags;
 	size_t			size = dev->rx_urb_size;
 
-	if ((skb = alloc_skb (size + NET_IP_ALIGN, flags)) == NULL) {
+
+	if ((skb = alloc_skb (size
+#if !defined(USBNET_NOOFFSET)
+	           + NET_IP_ALIGN
+#endif
+#if defined(USBNET_EXTRAOFFSET)
+	           + USBNET_EXTRAOFFSET
+#endif
+	     , flags)) == NULL) {
 		if (netif_msg_rx_err (dev))
 			devdbg (dev, "no rx skb");
 		usbnet_defer_kevent (dev, EVENT_RX_MEMORY);
 		usb_free_urb (urb);
 		return;
 	}
-	skb_reserve (skb, NET_IP_ALIGN);
+
+#if !defined(USBNET_NOOFFSET) || defined(USBNET_EXTRAOFFSET)
+	skb_reserve (skb, 0
+	#if !defined(USBNET_NOOFFSET)
+		+ NET_IP_ALIGN
+	#endif
+	#if defined(USBNET_EXTRAOFFSET)
+		+ USBNET_EXTRAOFFSET
+	#endif
+		);
+#endif
 
 	entry = (struct skb_data *) skb->cb;
 	entry->urb = urb;
@@ -531,6 +744,41 @@
 }
 
 /*-------------------------------------------------------------------------*/
+
+#ifdef USBNET_PPA_FP
+	int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev)
+	{
+		struct usbnet		*net = netdev_priv(dev);
+
+		set_bit(EVENT_RX_PAUSED, &net->flags);
+
+		if (netif_msg_rx_status(net))
+			devdbg(net, "paused rx queue enabled");
+		return IFX_SUCCESS;
+	}
+
+	int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev)
+	{
+		struct usbnet		*net = netdev_priv(dev);
+		struct sk_buff *skb;
+		int num = 0;
+
+		clear_bit(EVENT_RX_PAUSED, &net->flags);
+
+		while ((skb = skb_dequeue(&net->rxq_pause)) != NULL) {
+			usbnet_skb_return(net, skb);
+			num++;
+		}
+
+		tasklet_schedule(&net->bh);
+
+		if (netif_msg_rx_status(net))
+			devdbg(net, "paused rx queue disabled, %d skbs requeued", num);
+		return IFX_SUCCESS;
+	}
+#endif
+
+
 void usbnet_pause_rx(struct usbnet *dev)
 {
 	set_bit(EVENT_RX_PAUSED, &dev->flags);
@@ -610,6 +858,144 @@
 
 /*-------------------------------------------------------------------------*/
 
+#ifdef USBNET_PPA_FP
+	static ssize_t show_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "%d\n",usbnet_addr_monitor);
+	}
+
+	static ssize_t store_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		char *endp;
+		unsigned long target;
+
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==1) usbnet_addr_monitor=1;
+		else usbnet_addr_monitor=0;
+		return len;
+	}
+
+	static struct device_attribute addr_monitor_attrs[] = {
+		__ATTR(addr_monitor, S_IRUGO|S_IWUSR, show_addr_monitor, store_addr_monitor),
+	};
+
+
+	static ssize_t show_ppa_fp(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		struct net_device *netdev = to_net_dev(dev);
+		struct usbnet     *udev = netdev_priv(netdev);
+
+		return sprintf(buf, "itf_ppadp_on:%d ppadp_running:%d ppadp_occupied:%d\n",
+			udev->usbnet_ppadp_on,
+			usbnet_ppadp_running,
+			usbnet_ppadp_occupied);
+	}
+
+	static ssize_t store_ppa_fp(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		struct net_device *netdev = to_net_dev(dev);
+		struct usbnet     *udev = netdev_priv(netdev);
+		char *endp;
+		unsigned long target;
+
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==0)
+		{
+			if(!ppa_hook_directpath_register_dev_fn)
+				usbnet_ppadp_running =0;
+			if(udev->usbnet_ppadp_on)
+			{
+				if(usbnet_ppadp_running)
+				{
+						uint32_t if_id;
+					if(ppa_hook_get_ifid_for_netif_fn)
+					{
+						if_id=ppa_hook_get_ifid_for_netif_fn(netdev);
+						if(ppa_hook_directpath_rx_stop_fn)
+							ppa_hook_directpath_rx_stop_fn(if_id,0);
+					}
+					if(ppa_hook_directpath_register_dev_fn)
+						ppa_hook_directpath_register_dev_fn(&if_id,netdev, &usbnet_ppafp_cb, 0);
+					usbnet_ppadp_running =0;
+				}
+				udev->usbnet_ppadp_on=0;
+				usbnet_ppadp_occupied=0;
+			}
+			return len;
+		}
+		else if(target==1)
+		{
+			if(ppafp_enable &&
+			   usbnet_ppadp_occupied==0 &&
+			   udev->usbnet_ppadp_on==0)
+			{
+				udev->usbnet_ppadp_on=1;
+				usbnet_ppadp_occupied=1;
+				register_ppadp(netdev);
+			}
+			return len;
+		}
+		else
+			return -EBADMSG;
+	}
+
+	static struct device_attribute ppa_fp_attrs[] = {
+		__ATTR(ppa_fp, S_IRUGO|S_IWUSR, show_ppa_fp, store_ppa_fp),
+	};
+
+
+	static ssize_t show_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X   %s\n"
+				,snat_mac[0],snat_mac[1],snat_mac[2],snat_mac[3],snat_mac[4],snat_mac[5]
+				,snat_mac_good?"Valid":"Invalid" );
+	}
+
+	static ssize_t store_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		check_snat_mac(buf);
+		if(!snat_mac_good) bridge_mode_running = 0;
+		return len;
+	}
+
+	static ssize_t show_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "bridge_mode:%d running:%d  snat_mac_good:%d\n"
+			,bridge_mode
+			,bridge_mode_running
+			,snat_mac_good);
+	}
+
+	static ssize_t store_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		char *endp;
+		unsigned long target;
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==0)
+		{
+			// TBD
+			bridge_mode=0;
+			bridge_mode_running=0;
+		}
+		else
+			bridge_mode=1;
+		return len;
+	}
+
+	static struct device_attribute bridge_mode_attrs[] = {
+		__ATTR(bridge_mode_mac_addr, S_IRUGO|S_IWUSR, show_bridge_mode_mac_addr, store_bridge_mode_mac_addr),
+		__ATTR(bridge_mode, S_IRUGO|S_IWUSR, show_bridge_mode, store_bridge_mode),
+	};
+#endif
+/*-------------------------------------------------------------------------*/
+
+
 // precondition: never called in_interrupt
 
 int usbnet_stop (struct net_device *net)
@@ -622,6 +1008,27 @@
 	DECLARE_WAITQUEUE (wait, current);
 
 	netif_stop_queue (net);
+	#ifdef USBNET_PPA_FP
+		if(!ppa_hook_directpath_register_dev_fn)
+		{
+			usbnet_ppadp_running =0;
+		}
+		if(dev->usbnet_ppadp_on)
+		{
+				uint32_t if_id;
+			if( ppa_hook_get_ifid_for_netif_fn)
+			{
+				if_id=ppa_hook_get_ifid_for_netif_fn(net);
+				if( ppa_hook_directpath_rx_stop_fn)
+					ppa_hook_directpath_rx_stop_fn(if_id,0);
+			}
+			if(ppa_hook_directpath_register_dev_fn)
+				ppa_hook_directpath_register_dev_fn(&if_id,net, &usbnet_ppafp_cb, 0);
+			usbnet_ppadp_running =0;
+//			usbnet_ppadp_occupied=0;
+		}
+		bridge_mode_running=0;
+	#endif
 
 	if (netif_msg_ifdown (dev))
 		devinfo (dev, "stop stats: rx/tx %ld/%ld, errs %ld/%ld",
@@ -711,6 +1118,16 @@
 		goto done;
 	}
 
+	#ifdef USBNET_PPA_FP
+		if(ppa_startup_hook && usbnet_ppadp_occupied==-1)
+		{
+			dev->usbnet_ppadp_on =1;
+			usbnet_ppadp_occupied=1;
+		}
+		register_ppadp(net);
+	#endif
+
+
 	// insist peer be connected
 	if (info->check_connect && (retval = info->check_connect (dev)) < 0) {
 		if (netif_msg_ifup (dev))
@@ -729,6 +1146,12 @@
 	}
 
 	netif_start_queue (net);
+	#ifdef USBNET_PPA_FP
+		if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+			if(ppa_hook_directpath_rx_restart_fn && ppa_hook_get_ifid_for_netif_fn)
+				ppa_hook_directpath_rx_restart_fn(ppa_hook_get_ifid_for_netif_fn(net),0);
+	#endif
+
 	if (netif_msg_ifup (dev)) {
 		char	*framing;
 
@@ -891,7 +1314,14 @@
 		} else {
 			clear_bit (EVENT_TX_HALT, &dev->flags);
 			if (status != -ESHUTDOWN)
+			{
+				#ifdef USBNET_PPA_FP
+					if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+						if(ppa_hook_directpath_rx_restart_fn && ppa_hook_get_ifid_for_netif_fn)
+							ppa_hook_directpath_rx_restart_fn(ppa_hook_get_ifid_for_netif_fn(dev->net),0);
+				#endif
 				netif_wake_queue (dev->net);
+			}
 		}
 	}
 	if (test_bit (EVENT_RX_HALT, &dev->flags)) {
@@ -978,6 +1408,11 @@
 					devdbg (dev, "tx throttle %d",
 							urb->status);
 			}
+			#ifdef USBNET_PPA_FP
+				if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+					if(ppa_hook_directpath_rx_stop_fn && ppa_hook_get_ifid_for_netif_fn)
+						ppa_hook_directpath_rx_stop_fn(ppa_hook_get_ifid_for_netif_fn(dev->net),0);
+			#endif
 			netif_stop_queue (dev->net);
 			break;
 		default:
@@ -1006,6 +1441,56 @@
 EXPORT_SYMBOL_GPL(usbnet_tx_timeout);
 
 /*-------------------------------------------------------------------------*/
+#ifdef USBNET_PPA_FP
+	int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len)
+	{
+		int pktlen;
+
+if(usbnet_addr_monitor)
+{
+	unsigned char *base;
+	base=skb->data;
+	printk(KERN_INFO "usbnet_ppafp_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+}
+
+		if ( rxif )
+		{
+if(usbnet_addr_monitor) printk(KERN_INFO "     Kicked back\n");
+			if ( netif_running(rxif) )
+			{
+				pktlen = skb->len;
+				skb->dev = rxif;
+				skb->protocol = eth_type_trans(skb, rxif);
+				if ( netif_rx(skb) == NET_RX_DROP )
+					rxif->stats.rx_dropped++;
+				else
+				{
+if(usbnet_addr_monitor) printk(KERN_INFO "     Failed drop\n");
+					rxif->stats.rx_packets++;
+					rxif->stats.rx_bytes += pktlen;
+				}
+				return 0;
+			}
+if(usbnet_addr_monitor) printk(KERN_INFO "     No run\n");
+		}
+		else if ( txif )
+		{
+			skb->dev = txif;
+			dev_queue_xmit(skb);
+			txif->stats.tx_dropped++;
+if(usbnet_addr_monitor) printk(KERN_INFO "     Go Tx\n");
+			return 0;
+		}
+		dev_kfree_skb_any(skb);
+		return 0;
+	}
+#endif
+
 
 netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
 				     struct net_device *net)
@@ -1018,6 +1503,21 @@
 	unsigned long		flags;
 	int retval;
 
+	#ifdef USBNET_PPA_FP
+if(usbnet_addr_monitor)
+{
+	unsigned char *base;
+	base=skb->data;
+	printk(KERN_INFO "usbnet_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+}
+	#endif
+
+
 	// some devices want funky USB-level framing, for
 	// win32 driver (usually) and/or hardware quirks
 	if (info->tx_fixup) {
@@ -1059,8 +1559,18 @@
 
 	spin_lock_irqsave (&dev->txq.lock, flags);
 
+	#ifdef USBNET_PPA_FP
+		if( dev->usbnet_ppadp_on)
+			register_ppadp(dev->net);
+	#endif
+
 	switch ((retval = usb_submit_urb (urb, GFP_ATOMIC))) {
 	case -EPIPE:
+		#ifdef USBNET_PPA_FP
+			if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+				if(ppa_hook_directpath_rx_stop_fn && ppa_hook_get_ifid_for_netif_fn)
+					ppa_hook_directpath_rx_stop_fn(ppa_hook_get_ifid_for_netif_fn(net),0);
+		#endif
 		netif_stop_queue (net);
 		usbnet_defer_kevent (dev, EVENT_TX_HALT);
 		break;
@@ -1072,7 +1582,14 @@
 		net->trans_start = jiffies;
 		__skb_queue_tail (&dev->txq, skb);
 		if (dev->txq.qlen >= TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_FP
+				if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+					if(ppa_hook_directpath_rx_stop_fn && ppa_hook_get_ifid_for_netif_fn)
+						ppa_hook_directpath_rx_stop_fn(ppa_hook_get_ifid_for_netif_fn(net),0);
+			#endif
 			netif_stop_queue (net);
+		}
 	}
 	spin_unlock_irqrestore (&dev->txq.lock, flags);
 
@@ -1150,7 +1667,14 @@
 				tasklet_schedule (&dev->bh);
 		}
 		if (dev->txq.qlen < TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_FP
+				if(dev->usbnet_ppadp_on && usbnet_ppadp_running)
+					if(ppa_hook_directpath_rx_stop_fn && ppa_hook_get_ifid_for_netif_fn)
+						ppa_hook_directpath_rx_restart_fn(ppa_hook_get_ifid_for_netif_fn(dev->net),0);
+			#endif
 			netif_wake_queue (dev->net);
+		}
 	}
 }
 
@@ -1183,6 +1707,29 @@
 			dev->driver_info->description);
 
 	net = dev->net;
+
+	#ifdef USBNET_PPA_FP
+		{
+			int i;
+			for (i = 0; i < ARRAY_SIZE(ppa_fp_attrs); i++)
+				  device_remove_file(&net->dev, &addr_monitor_attrs[i]);
+		}
+		{
+			int i;
+			for (i = 0; i < ARRAY_SIZE(ppa_fp_attrs); i++)
+				  device_remove_file(&net->dev, &ppa_fp_attrs[i]);
+		}
+		usbnet_ppadp_occupied=(ppa_startup_hook)? -1:0;
+		usbnet_ppadp_running=0;
+
+		{
+			int i;
+			for (i = 0; i < ARRAY_SIZE(bridge_mode_attrs); i++)
+				  device_remove_file(&net->dev, &bridge_mode_attrs[i]);
+		}
+		bridge_mode_running=0;
+	#endif
+
 	unregister_netdev (net);
 
 	/* we don't hold rtnl here ... */
@@ -1261,6 +1808,11 @@
 	mutex_init (&dev->phy_mutex);
 
 	dev->net = net;
+
+	#ifdef USBNET_PPA_FP
+		dev->usbnet_ppadp_on = 0;
+	#endif
+
 	strcpy (net->name, "usb%d");
 	memcpy (net->dev_addr, node_id, sizeof node_id);
 
@@ -1335,6 +1887,19 @@
 	// ok, it's ready to go.
 	usb_set_intfdata (udev, dev);
 
+	#ifdef USBNET_PPA_FP
+		{
+			int i;
+			int err;
+			for (i = 0; i < ARRAY_SIZE(ppa_fp_attrs); i++)
+				err = device_create_file(&net->dev,&ppa_fp_attrs[i]);
+			for (i = 0; i < ARRAY_SIZE(bridge_mode_attrs); i++)
+				err = device_create_file(&net->dev, &bridge_mode_attrs[i]);
+			for (i = 0; i < ARRAY_SIZE(addr_monitor_attrs); i++)
+				err = device_create_file(&net->dev, &addr_monitor_attrs[i]);
+		}
+	#endif
+
 	// start as if the link is up
 	netif_device_attach (net);
 
Index: linux-2.6.32.42/include/linux/usb/usbnet.h
===================================================================
--- linux-2.6.32.42.orig/include/linux/usb/usbnet.h	2012-04-11 10:31:53.019041881 +0530
+++ linux-2.6.32.42/include/linux/usb/usbnet.h	2012-04-11 10:32:04.159058224 +0530
@@ -65,6 +65,7 @@
 #		define EVENT_STS_SPLIT	3
 #		define EVENT_LINK_RESET	4
 #		define EVENT_RX_PAUSED	5
+	int usbnet_ppadp_on;
 };
 
 static inline struct usb_driver *driver_of(struct usb_interface *intf)
