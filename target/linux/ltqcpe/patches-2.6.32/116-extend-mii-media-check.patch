diff --exclude=.svn -buEBr linux-2.6.32.32-mips/drivers/net/mii.c linux-2.6.32.32/drivers/net/mii.c
--- linux-2.6.32.32-mips/drivers/net/mii.c	2011-03-08 01:18:15.000000000 +0200
+++ linux-2.6.32.32/drivers/net/mii.c	2011-09-09 00:26:34.000000000 +0300
@@ -475,6 +475,159 @@
 	return rc;
 }
 
+unsigned int mii_check_media_ex(
+    struct mii_if_info *mii,
+    unsigned int ok_to_print,
+    unsigned int init_media,
+    int *has_speed_changed,
+    int *has_gigabit_changed,
+    int *has_pause_changed,
+    void (*link_state_change_callback)(int link_state, void* arg),
+    void *link_state_change_arg)
+{
+    unsigned int old_carrier, new_carrier;
+    int advertise, lpa;
+    unsigned int negotiated_10_100;
+    int advertise2 = 0, lpa2 = 0;
+    unsigned int negotiated_1000;
+    int duplex = 0;
+    int using_10 = 0;
+    int using_100 = 0;
+    int using_1000 = 0;
+    int using_pause = 0;
+    int duplex_changed = 0;
+    int changed_10 = 0;
+    int changed_100 = 0;
+    int changed_1000 = 0;
+    int changed_pause = 0;
+    int supports_gmii = mii->mdio_read(mii->dev, mii->phy_id, MII_BMSR) & BMSR_ESTATEN;
+
+    // Initialise user's locations for returned gigabit and pause changed values
+    // to no-change
+    *has_gigabit_changed = 0;
+    *has_pause_changed = 0;
+
+    /* if forced media, go no further */
+    if (mii->force_media)
+        return 0; /* duplex did not change */
+
+
+    /* check current and old link status */
+    old_carrier = netif_carrier_ok(mii->dev) ? 1 : 0;
+    new_carrier = (unsigned int) mii_link_ok(mii);
+
+    /* if carrier state did not change, this is a "bounce",
+     * just exit as everything is already set correctly
+     */
+    if ((!init_media) && (old_carrier == new_carrier))
+        return 0; /* duplex did not change */
+
+    /* no carrier, nothing much to do */
+    if (!new_carrier) {
+        netif_carrier_off(mii->dev);
+        if (ok_to_print) {
+            printk(KERN_INFO "%s: link down\n", mii->dev->name);
+        }
+        link_state_change_callback(0, link_state_change_arg);
+        return 0; /* duplex did not change */
+    }
+
+    /*
+     * we have carrier, see who's on the other end
+     */
+    netif_carrier_on(mii->dev);
+
+    /* Get our advertise values */
+    if ((!init_media) && (mii->advertising))
+        advertise = mii->advertising;
+    else {
+        advertise = mii->mdio_read(mii->dev, mii->phy_id, MII_ADVERTISE);
+        mii->advertising = advertise;
+    }
+//printk("mii_check_media_ex() MII_ADVERTISE read as 0x%08x\n", advertise);
+    if (supports_gmii) {
+        advertise2 = mii->mdio_read(mii->dev, mii->phy_id, MII_CTRL1000);
+//printk("mii_check_media_ex() MII_CTRL1000 read as 0x%08x\n", advertise2);
+    }
+
+    /* Get link partner advertise values */
+ 
+    lpa = mii->mdio_read(mii->dev, mii->phy_id, MII_LPA);
+//printk("mii_check_media_ex() MII_LPA read as 0x%08x\n", lpa);
+    if (supports_gmii) {
+        lpa2 = mii->mdio_read(mii->dev, mii->phy_id, MII_STAT1000);
+//printk("mii_check_media_ex() MII_STAT1000 read as 0x%08x\n", lpa2);
+    }
+
+//printk("Us pause = %d, async pause = %d\n", advertise & ADVERTISE_PAUSE_CAP, advertise & ADVERTISE_PAUSE_ASYM);
+//printk("Link partner pause = %d, async pause = %d\n", lpa & LPA_PAUSE_CAP, lpa & LPA_PAUSE_ASYM);
+
+    /* Determine negotiated mode/duplex from our and link partner's advertise values */
+    negotiated_10_100 = mii_nway_result(lpa & advertise);
+   
+    negotiated_1000   = mii_nway_result_1000(lpa2, advertise2);
+
+    /* Determine the rate we're operating at */
+    if (negotiated_1000 & (LPA_1000FULL | LPA_1000HALF)) {
+        using_1000 = 1;
+        duplex = (negotiated_1000 & LPA_1000FULL) ? 1 : 0;
+    } else {
+        if (negotiated_10_100 & (LPA_100FULL | LPA_100HALF)) 
+            using_100 = 1;
+        else 
+            using_10 = 1;
+        duplex = (negotiated_10_100 & ADVERTISE_FULL) ? 1 : 0;
+    }
+
+    /* Does link partner advertise that we can send pause frames to it? */
+    using_pause = (lpa & LPA_PAUSE_CAP) ? 1 : 0;
+
+    if (ok_to_print)
+        printk(KERN_INFO "%s: link up, %sMbps, %s-duplex, %s pause, lpa 0x%04X\n",
+               mii->dev->name,
+               using_1000 ? "1000" :
+               using_100 ? "100" : "10",
+               duplex ? "full" : "half",
+               using_pause ? "using" : "not using",
+               lpa);
+
+    link_state_change_callback(1, link_state_change_arg);
+
+    if (mii->full_duplex != duplex) {
+        duplex_changed = 1;
+    }
+    if (mii->using_10 != using_10) {
+        changed_10 = 1;
+        *has_speed_changed = 1;
+    }
+    if (mii->using_100 != using_100) {
+        changed_100 = 1;
+    }
+    if (mii->using_1000 != using_1000) {
+        changed_1000 = 1;
+    }
+    if (mii->using_pause != using_pause) {
+        changed_pause = 1;
+    }
+
+    if (init_media || changed_10 || changed_100 || changed_1000 || changed_pause || duplex_changed) {
+        mii->full_duplex = duplex;
+        mii->using_10   = using_10;
+        mii->using_100   = using_100;
+        mii->using_1000  = using_1000;
+        mii->using_pause = using_pause;
+        if (init_media || changed_1000) {
+            *has_gigabit_changed = 1;
+        }
+        if (init_media || changed_pause) {
+            *has_pause_changed = 1;
+        }
+        return init_media || duplex_changed;
+    }
+
+    return 0; /* duplex did not change */
+}
+
 MODULE_AUTHOR ("Jeff Garzik <jgarzik@pobox.com>");
 MODULE_DESCRIPTION ("MII hardware support library");
 MODULE_LICENSE("GPL");
@@ -485,6 +638,7 @@
 EXPORT_SYMBOL(mii_ethtool_sset);
 EXPORT_SYMBOL(mii_check_link);
 EXPORT_SYMBOL(mii_check_media);
+EXPORT_SYMBOL(mii_check_media_ex);
 EXPORT_SYMBOL(mii_check_gmii_support);
 EXPORT_SYMBOL(generic_mii_ioctl);
 
diff --exclude=.svn -buEBr linux-2.6.32.32-mips/include/linux/mii.h linux-2.6.32.32/include/linux/mii.h
--- linux-2.6.32.32-mips/include/linux/mii.h	2011-03-08 01:18:15.000000000 +0200
+++ linux-2.6.32.32/include/linux/mii.h	2011-09-09 00:26:32.000000000 +0300
@@ -163,6 +163,13 @@
 	unsigned int force_media : 1;	/* is autoneg. disabled? */
 	unsigned int supports_gmii : 1; /* are GMII registers supported? */
 
+	//Yan 
+	unsigned int using_1000 : 1;    /* the PHY is using 1000Mb rate */
+	unsigned int using_100 : 1;     /* the PHY is using 100Mb rate */
+	unsigned int using_10 : 1;     /* the PHY is using 10Mb rate */
+	unsigned int using_pause : 1;	/* the PHY will generate pause frames */
+	//
+	
 	struct net_device *dev;
 	int (*mdio_read) (struct net_device *dev, int phy_id, int location);
 	void (*mdio_write) (struct net_device *dev, int phy_id, int location, int val);
@@ -177,6 +184,14 @@
 extern unsigned int mii_check_media (struct mii_if_info *mii,
 				     unsigned int ok_to_print,
 				     unsigned int init_media);
+extern unsigned int mii_check_media_ex( struct mii_if_info *mii,
+					 unsigned int ok_to_print,
+					 unsigned int init_media,
+					 int *has_speed_changed,
+					 int *has_gigabit_changed,
+					 int *has_pause_changed,
+					 void (*link_state_change_callback)(int link_state, void* arg),
+					 void *link_state_change_arg);
 extern int generic_mii_ioctl(struct mii_if_info *mii_if,
                       	     struct mii_ioctl_data *mii_data, int cmd,
 			     unsigned int *duplex_changed);
@@ -220,6 +235,23 @@
 	return ret;
 }
 
+static inline unsigned int mii_nway_result_1000(unsigned int lpa_1000, unsigned int advertised_1000)
+{
+	int full_negotiated = (lpa_1000 & LPA_1000FULL) &&
+						  (advertised_1000 & ADVERTISE_1000FULL);
+
+	int half_negotiated = (lpa_1000 & LPA_1000HALF) &&
+						  (advertised_1000 & ADVERTISE_1000HALF);
+	
+	if (full_negotiated) {
+		return LPA_1000FULL;
+	} else if (half_negotiated) {
+		return LPA_1000HALF;
+	} else {
+		return 0;
+	}
+}
+
 /**
  * mii_duplex
  * @duplex_lock: Non-zero if duplex is locked at full

