Index: linux/arch/mips/Kconfig
===================================================================
--- linux.orig/arch/mips/Kconfig	2011-02-20 01:41:40.718300000 +0100
+++ linux/arch/mips/Kconfig	2011-02-20 01:41:42.295198000 +0100
@@ -1443,6 +1443,19 @@
 
 menu "Kernel type"
 
+config LTQ 
+	bool "Enable LTQ enhancements"
+	default y
+	help
+	Enables all config options and features added by LTQ.
+
+config LTQ_SYS_OPT
+	bool "LTQ sys optimization"
+	depends on LTQ 
+	help
+	Enbaling this feature improves the networking performance
+	due to LTQ enhancements to IRQ scheduling.
+
 choice
 
 	prompt "Kernel code model"
Index: linux/include/linux/init.h
===================================================================
--- linux.orig/include/linux/init.h	2010-04-02 00:59:14.000000000 +0200
+++ linux/include/linux/init.h	2011-02-21 10:51:25.344211000 +0100
@@ -40,6 +40,11 @@
 
 /* These are for everybody (although not all archs will actually
    discard it in modules) */
+
+#ifdef CONFIG_LTQ_SYS_OPT
+#define __system       __section(system)
+#endif
+
 #define __init		__section(.init.text) __cold notrace
 #define __initdata	__section(.init.data)
 #define __initconst	__section(.init.rodata)
Index: linux/include/linux/irq.h
===================================================================
--- linux.orig/include/linux/irq.h	2010-04-02 00:59:14.000000000 +0200
+++ linux/include/linux/irq.h	2011-02-20 01:41:42.340201000 +0100
@@ -296,7 +296,11 @@
  * Monolithic do_IRQ implementation.
  */
 #ifndef CONFIG_GENERIC_HARDIRQS_NO__DO_IRQ
-extern unsigned int __do_IRQ(unsigned int irq);
+#ifdef CONFIG_LTQ_SYS_OPT
+	extern unsigned int __system __do_IRQ(unsigned int irq);
+#else
+	extern unsigned int __do_IRQ(unsigned int irq);
+#endif
 #endif
 
 /*
@@ -305,7 +309,12 @@
  * irqchip-style controller then we call the ->handle_irq() handler,
  * and it calls __do_IRQ() if it's attached to an irqtype-style controller.
  */
+
+#ifdef CONFIG_LTQ_SYS_OPT
+static inline void __system generic_handle_irq_desc(unsigned int irq, struct irq_desc *desc)
+#else
 static inline void generic_handle_irq_desc(unsigned int irq, struct irq_desc *desc)
+#endif
 {
 #ifdef CONFIG_GENERIC_HARDIRQS_NO__DO_IRQ
 	desc->handle_irq(irq, desc);
@@ -317,7 +326,11 @@
 #endif
 }
 
+#ifdef CONFIG_LTQ_SYS_OPT
+static inline void __system generic_handle_irq(unsigned int irq)
+#else
 static inline void generic_handle_irq(unsigned int irq)
+#endif
 {
 	generic_handle_irq_desc(irq, irq_to_desc(irq));
 }
Index: linux/kernel/irq/handle.c
===================================================================
--- linux.orig/kernel/irq/handle.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/kernel/irq/handle.c	2011-02-20 01:41:42.362193000 +0100
@@ -448,7 +448,12 @@
  * This is the original x86 implementation which is used for every
  * interrupt type.
  */
+
+#ifdef CONFIG_LTQ_SYS_OPT
+unsigned int __system __do_IRQ(unsigned int irq) 
+#else
 unsigned int __do_IRQ(unsigned int irq)
+#endif
 {
 	struct irq_desc *desc = irq_to_desc(irq);
 	struct irqaction *action;
Index: linux/include/linux/udp_redirect.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/include/linux/udp_redirect.h	2011-02-21 10:52:33.513774000 +0100
@@ -0,0 +1,29 @@
+#ifndef _UDP_REDIRECT_H
+#define _UDP_REDIRECT_H
+
+/* udp_redirect.h: Hook to receive packets directly from the network stack.
+ *
+ * Copyright (C) 2011  Lantiq Deutschland GmbH (www.lantiq.com)
+ */
+
+/* ============================= */
+/* Includes                      */
+/* ============================= */
+#ifndef _LINUX_TYPES_H
+#include <linux/types.h>
+#endif
+#include <linux/skbuff.h>
+
+
+/* ============================= */
+/* Definitions                   */
+/* ============================= */
+#define UDP_REDIRECT_MAGIC (void*)0x55445052L
+
+
+/* ============================= */
+/* Global variable declaration   */
+/* ============================= */
+extern int (*udp_do_redirect_fn)(struct sock *sk, struct sk_buff *skb);
+
+#endif
Index: linux/net/Kconfig
===================================================================
--- linux.orig/net/Kconfig	2011-02-20 01:41:40.158357000 +0100
+++ linux/net/Kconfig	2011-02-21 10:51:22.348451000 +0100
@@ -72,6 +72,19 @@
 
 	  Short answer: say Y.
 
+config LTQ_ADDON
+       bool "LTQ Networking enhancements "
+       depends on LTQ && INET
+       help
+         Enables all network related config options and features added by LTQ.
+
+config LTQ_UDP_REDIRECT
+        bool "LTQ Kernel Packet Interface for UDP re-direction"
+        depends on LTQ_ADDON
+        help
+          You can say Y here if you want to use hooks from kernel for
+          UDP re-direction
+
 if INET
 source "net/ipv4/Kconfig"
 source "net/ipv6/Kconfig"
@@ -157,9 +170,18 @@
 	  If you say Y here you can select between all the netfilter modules.
 	  If you say N the more unusual ones will not be shown and the
 	  basic ones needed by most people will default to 'M'.
-
+	
 	  If unsure, say Y.
 
+config LTQ_NETFILTER_PROCFS
+       bool"LTQ netfilter procfs configurability"
+       depends on NETFILTER_ADVANCED && LTQ_ADDON && SYSCTL
+       help
+         If chosen, several hooks will be added to procfs for
+         selecting / deselecting netfilter chains at runtime.
+         It is recommended to be always on.
+
+
 config BRIDGE_NETFILTER
 	bool "Bridged IP/ARP packets filtering"
 	depends on BRIDGE && NETFILTER && INET
Index: linux/net/core/dev.c
===================================================================
--- linux.orig/net/core/dev.c	2011-02-20 01:41:31.247108000 +0100
+++ linux/net/core/dev.c	2011-02-21 10:51:25.399208000 +0100
@@ -133,6 +133,11 @@
 
 #include "net-sysfs.h"
 
+#if defined(CONFIG_LTQ_UDP_REDIRECT) || defined(CONFIG_LTQ_UDP_REDIRECT_MODULE)
+#include <net/udp.h>
+#include <linux/udp_redirect.h>
+#endif
+
 /* Instead of increasing this, you should create a hash table. */
 #define MAX_GRO_SKBS 8
 
Index: linux/net/ipv4/Makefile
===================================================================
--- linux.orig/net/ipv4/Makefile	2011-02-20 01:41:40.006369000 +0100
+++ linux/net/ipv4/Makefile	2011-02-20 01:41:42.452207000 +0100
@@ -13,6 +13,9 @@
 	     fib_frontend.o fib_semantics.o \
 	     inet_fragment.o
 
+ifneq ($(CONFIG_LTQ_UDP_REDIRECT),)
+obj-$(CONFIG_LTQ_UDP_REDIRECT) += udp_redirect_symb.o
+endif
 obj-$(CONFIG_SYSCTL) += sysctl_net_ipv4.o
 obj-$(CONFIG_IP_FIB_HASH) += fib_hash.o
 obj-$(CONFIG_IP_FIB_TRIE) += fib_trie.o
Index: linux/net/ipv4/udp_redirect_symb.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/net/ipv4/udp_redirect_symb.c	2011-02-21 10:50:43.307578000 +0100
@@ -0,0 +1,26 @@
+/* udp_redirect_symb.c: Hook to receive packets directly from the network stack.
+ *
+ * Copyright (C) 2011  Lantiq Deutschland GmbH (www.lantiq.com)
+ */
+
+#if defined(CONFIG_LTQ_UDP_REDIRECT) || defined(CONFIG_LTQ_UDP_REDIRECT_MODULE)
+/* ============================= */
+/* Includes                      */
+/* ============================= */
+#include <linux/module.h>
+#include <linux/udp_redirect.h>
+
+
+/* ============================= */
+/* Global variable definition    */
+/* ============================= */
+int (*udp_do_redirect_fn)(struct sock *sk, struct sk_buff *skb) = NULL;
+
+
+/* ============================= */
+/* Global function definition    */
+/* ============================= */
+
+EXPORT_SYMBOL(udp_do_redirect_fn);
+
+#endif /* CONFIG_LTQ_UDP_REDIRECT* */
Index: linux/include/linux/sysctl.h
===================================================================
--- linux.orig/include/linux/sysctl.h	2010-04-02 00:59:14.000000000 +0200
+++ linux/include/linux/sysctl.h	2011-02-21 10:51:23.454372000 +0100
@@ -434,6 +434,13 @@
 	NET_TCP_ALLOWED_CONG_CONTROL=123,
 	NET_TCP_MAX_SSTHRESH=124,
 	NET_TCP_FRTO_RESPONSE=125,
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+        NET_NETFILTER_PREROUTING_ENABLE=126,
+        NET_NETFILTER_POSTROUTING_ENABLE=127,
+        NET_NETFILTER_INPUT_ENABLE=128,
+        NET_NETFILTER_OUTPUT_ENABLE=129,
+        NET_NETFILTER_FORWARD_ENABLE=130,
+#endif
 };
 
 enum {
@@ -788,6 +795,13 @@
 	NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 	NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 	NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       NET_BRIDGE_NF_PRE_ROUTING_ENABLE=6,
+       NET_BRIDGE_NF_LOCAL_IN_ENABLE=7,
+       NET_BRIDGE_NF_FORWARD_ENABLE=8,
+       NET_BRIDGE_NF_LOCAL_OUT_ENABLE=9,
+       NET_BRIDGE_NF_POST_ROUTING_ENABLE=10,
+#endif
 };
 
 /* proc/sys/net/irda */
Index: linux/net/bridge/br_forward.c
===================================================================
--- linux.orig/net/bridge/br_forward.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/bridge/br_forward.c	2011-02-21 10:51:25.363208000 +0100
@@ -18,6 +18,12 @@
 #include <linux/netfilter_bridge.h>
 #include "br_private.h"
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+extern int brnf_filter_forward_enable;
+extern int brnf_filter_local_out_enable;
+extern int brnf_filter_post_routing_enable;
+#endif
+
 /* Don't forward packets to originating port or forwarding diasabled */
 static inline int should_deliver(const struct net_bridge_port *p,
 				 const struct sk_buff *skb)
@@ -52,6 +58,10 @@
 
 int br_forward_finish(struct sk_buff *skb)
 {
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+       if (!brnf_filter_post_routing_enable)
+               return br_dev_queue_push_xmit(skb);
+#endif
 	return NF_HOOK(PF_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
 		       br_dev_queue_push_xmit);
 
@@ -60,6 +70,10 @@
 static void __br_deliver(const struct net_bridge_port *to, struct sk_buff *skb)
 {
 	skb->dev = to->dev;
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+       if (!brnf_filter_local_out_enable)
+               return br_forward_finish(skb);
+#endif
 	NF_HOOK(PF_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
 			br_forward_finish);
 }
@@ -77,6 +91,10 @@
 	skb->dev = to->dev;
 	skb_forward_csum(skb);
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+       if (!brnf_filter_forward_enable)
+               return br_forward_finish(skb);
+#endif
 	NF_HOOK(PF_BRIDGE, NF_BR_FORWARD, skb, indev, skb->dev,
 			br_forward_finish);
 }
Index: linux/net/bridge/br_input.c
===================================================================
--- linux.orig/net/bridge/br_input.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/bridge/br_input.c	2011-02-21 10:51:25.375210000 +0100
@@ -17,6 +17,12 @@
 #include <linux/netfilter_bridge.h>
 #include "br_private.h"
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+extern int brnf_filter_pre_routing_enable;
+extern int brnf_filter_local_in_enable;
+#endif
+
+
 /* Bridge group multicast address 802.1d (pg 51). */
 const u8 br_group_address[ETH_ALEN] = { 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
 
@@ -30,6 +36,10 @@
 	indev = skb->dev;
 	skb->dev = brdev;
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+       if (!brnf_filter_local_in_enable)
+               return netif_receive_skb(skb);
+#endif
 	NF_HOOK(PF_BRIDGE, NF_BR_LOCAL_IN, skb, indev, NULL,
 		netif_receive_skb);
 }
@@ -159,6 +169,11 @@
 		if (!compare_ether_addr(p->br->dev->dev_addr, dest))
 			skb->pkt_type = PACKET_HOST;
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+               if (!brnf_filter_pre_routing_enable)
+                       br_handle_frame_finish(skb);
+	       else
+#endif
 		NF_HOOK(PF_BRIDGE, NF_BR_PRE_ROUTING, skb, skb->dev, NULL,
 			br_handle_frame_finish);
 		break;
Index: linux/net/bridge/br_netfilter.c
===================================================================
--- linux.orig/net/bridge/br_netfilter.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/bridge/br_netfilter.c	2011-02-20 01:41:42.589213000 +0100
@@ -48,6 +48,15 @@
 #include <linux/sysctl.h>
 #endif
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+int brnf_filter_pre_routing_enable = 1;
+int brnf_filter_local_in_enable = 1;
+int brnf_filter_forward_enable = 1;
+int brnf_filter_local_out_enable = 1;
+int brnf_filter_post_routing_enable = 1;
+#endif
+
+
 #define skb_origaddr(skb)	 (((struct bridge_skb_cb *) \
 				 (skb->nf_bridge->data))->daddr.ipv4)
 #define store_orig_dstaddr(skb)	 (skb_origaddr(skb) = ip_hdr(skb)->daddr)
@@ -1013,6 +1022,43 @@
 		.mode		= 0644,
 		.proc_handler	= brnf_sysctl_call_tables,
 	},
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       {
+               .procname   = "bridge-nf-pre-routing-enable",
+               .data       = &brnf_filter_pre_routing_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   = proc_dointvec,
+       },
+       {
+               .procname   = "bridge-nf-local-in-enable",
+               .data       = &brnf_filter_local_in_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   = proc_dointvec,
+       },
+       {
+               .procname   = "bridge-nf-forward-enable",
+               .data       = &brnf_filter_forward_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   = proc_dointvec,
+       },
+       {
+               .procname   = "bridge-nf-local-out-enable",
+               .data       = &brnf_filter_local_out_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   = proc_dointvec,
+       },
+       {
+               .procname   = "bridge-nf-post-routing-enable",
+               .data       = &brnf_filter_post_routing_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   = proc_dointvec,
+       },
+#endif
 	{ .ctl_name = 0 }
 };
 
Index: linux/net/bridge/br_stp_bpdu.c
===================================================================
--- linux.orig/net/bridge/br_stp_bpdu.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/bridge/br_stp_bpdu.c	2011-02-20 01:41:42.609202000 +0100
@@ -28,6 +28,11 @@
 
 #define LLC_RESERVE sizeof(struct llc_pdu_un)
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) ||     defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+extern int brnf_filter_local_out_enable;
+#endif
+
+
 static void br_send_bpdu(struct net_bridge_port *p,
 			 const unsigned char *data, int length)
 {
@@ -49,6 +54,10 @@
 
 	llc_mac_hdr_init(skb, p->dev->dev_addr, p->br->group_addr);
 
+#if defined(CONFIG_LTQ_NETFILTER_PROCFS) && (defined(CONFIG_BRIDGE_NF_EBTABLES) || defined(CONFIG_BRIDGE_NF_EBTABLES_MODULE))
+       if (!brnf_filter_local_out_enable)
+              return dev_queue_xmit(skb);
+#endif
 	NF_HOOK(PF_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
 		dev_queue_xmit);
 }
Index: linux/net/ipv4/igmp.c
===================================================================
--- linux.orig/net/ipv4/igmp.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/ipv4/igmp.c	2011-02-20 01:41:42.631221000 +0100
@@ -148,6 +148,10 @@
 static int ip_mc_add_src(struct in_device *in_dev, __be32 *pmca, int sfmode,
 			 int sfcount, __be32 *psfsrc, int delta);
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+extern int sysctl_netfilter_output_enable; 
+#endif
+
 static void ip_ma_put(struct ip_mc_list *im)
 {
 	if (atomic_dec_and_test(&im->refcnt)) {
Index: linux/net/ipv4/ip_forward.c
===================================================================
--- linux.orig/net/ipv4/ip_forward.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/ipv4/ip_forward.c	2011-02-20 01:41:42.652219000 +0100
@@ -38,6 +38,10 @@
 #include <net/route.h>
 #include <net/xfrm.h>
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+int sysctl_netfilter_forward_enable = 1; 
+#endif
+
 static int ip_forward_finish(struct sk_buff *skb)
 {
 	struct ip_options * opt	= &(IPCB(skb)->opt);
@@ -111,6 +115,10 @@
 
 	skb->priority = rt_tos2priority(iph->tos);
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       if (!sysctl_netfilter_forward_enable)
+               return ip_forward_finish(skb);
+#endif
 	return NF_HOOK(PF_INET, NF_INET_FORWARD, skb, skb->dev, rt->u.dst.dev,
 		       ip_forward_finish);
 
Index: linux/net/ipv4/ip_input.c
===================================================================
--- linux.orig/net/ipv4/ip_input.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/ipv4/ip_input.c	2011-02-20 01:41:42.680188000 +0100
@@ -144,6 +144,11 @@
 #include <linux/mroute.h>
 #include <linux/netlink.h>
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+int sysctl_netfilter_prerouting_enable = 1;
+int sysctl_netfilter_input_enable = 1;
+#endif
+
 /*
  *	Process Router Attention IP option
  */
@@ -265,6 +270,10 @@
 			return 0;
 	}
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       if (!sysctl_netfilter_input_enable)
+               return ip_local_deliver_finish(skb);
+#endif
 	return NF_HOOK(PF_INET, NF_INET_LOCAL_IN, skb, skb->dev, NULL,
 		       ip_local_deliver_finish);
 }
@@ -443,6 +452,10 @@
 	/* Must drop socket now because of tproxy. */
 	skb_orphan(skb);
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       if (!sysctl_netfilter_prerouting_enable)
+               return ip_rcv_finish(skb);
+#endif
 	return NF_HOOK(PF_INET, NF_INET_PRE_ROUTING, skb, dev, NULL,
 		       ip_rcv_finish);
 
Index: linux/net/ipv4/ip_output.c
===================================================================
--- linux.orig/net/ipv4/ip_output.c	2011-02-20 01:41:41.855193000 +0100
+++ linux/net/ipv4/ip_output.c	2011-02-21 10:51:22.408452000 +0100
@@ -83,6 +83,11 @@
   #include <net/ifx_ppa_api.h>
 #endif
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+int sysctl_netfilter_postrouting_enable = 1;
+int sysctl_netfilter_output_enable = 1;
+#endif
+
 int sysctl_ip_default_ttl __read_mostly = IPDEFTTL;
 
 /* Generate a checksum for an outgoing IP datagram. */
@@ -98,6 +103,11 @@
 
 	iph->tot_len = htons(skb->len);
 	ip_send_check(iph);
+
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       if (!sysctl_netfilter_output_enable)
+               return dst_output(skb);
+#endif
 	return nf_hook(PF_INET, NF_INET_LOCAL_OUT, skb, NULL, skb_dst(skb)->dev,
 		       dst_output);
 }
@@ -250,8 +260,13 @@
 #endif
 	if (skb->len > ip_skb_dst_mtu(skb) && !skb_is_gso(skb))
 		return ip_fragment(skb, ip_finish_output2);
-	else
+	else {
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+               if (!sysctl_netfilter_postrouting_enable)
+                       return ip_finish_output2(skb);
+#endif
 		return ip_finish_output2(skb);
+	}
 }
 
 int ip_mc_output(struct sk_buff *skb)
@@ -287,10 +302,16 @@
 #endif
 		) {
 			struct sk_buff *newskb = skb_clone(skb, GFP_ATOMIC);
-			if (newskb)
-				NF_HOOK(PF_INET, NF_INET_POST_ROUTING, newskb,
+			if (newskb) {
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+			if (!sysctl_netfilter_postrouting_enable)
+				ip_dev_loopback_xmit(newskb);
+			else
+#endif
+			NF_HOOK(PF_INET, NF_INET_POST_ROUTING, newskb,
 					NULL, newskb->dev,
 					ip_dev_loopback_xmit);
+			}
 		}
 
 		/* Multicasts with ttl 0 must not go beyond the host */
@@ -303,9 +324,15 @@
 
 	if (rt->rt_flags&RTCF_BROADCAST) {
 		struct sk_buff *newskb = skb_clone(skb, GFP_ATOMIC);
-		if (newskb)
+		if (newskb) {
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+                        if (!sysctl_netfilter_postrouting_enable)
+                                ip_dev_loopback_xmit(newskb);
+                        else
+#endif
 			NF_HOOK(PF_INET, NF_INET_POST_ROUTING, newskb, NULL,
 				newskb->dev, ip_dev_loopback_xmit);
+		}
 	}
 
 	return NF_HOOK_COND(PF_INET, NF_INET_POST_ROUTING, skb, NULL, skb->dev,
Index: linux/net/ipv4/sysctl_net_ipv4.c
===================================================================
--- linux.orig/net/ipv4/sysctl_net_ipv4.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/ipv4/sysctl_net_ipv4.c	2011-02-20 01:41:42.721167000 +0100
@@ -26,6 +26,14 @@
 static int ip_local_port_range_min[] = { 1, 1 };
 static int ip_local_port_range_max[] = { 65535, 65535 };
 
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+extern int sysctl_netfilter_prerouting_enable;
+extern int sysctl_netfilter_postrouting_enable;
+extern int sysctl_netfilter_input_enable;
+extern int sysctl_netfilter_output_enable;
+extern int sysctl_netfilter_forward_enable;
+#endif
+
 /* Update system visible IP port range */
 static void set_local_port_range(int range[2])
 {
@@ -742,6 +750,48 @@
 		.strategy	= sysctl_intvec,
 		.extra1		= &zero
 	},
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+       {
+               .ctl_name   = NET_NETFILTER_PREROUTING_ENABLE,
+               .procname   = "netfilter_prerouting_enable",
+               .data       = &sysctl_netfilter_prerouting_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   =proc_dointvec,
+       },
+       {
+               .ctl_name   = NET_NETFILTER_POSTROUTING_ENABLE,
+               .procname   = "netfilter_postrouting_enable",
+               .data       = &sysctl_netfilter_postrouting_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   =proc_dointvec,
+       },
+       {
+               .ctl_name   = NET_NETFILTER_INPUT_ENABLE,
+               .procname   = "netfilter_input_enable",
+               .data       = &sysctl_netfilter_input_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   =proc_dointvec,
+       },
+       {
+               .ctl_name   = NET_NETFILTER_OUTPUT_ENABLE,
+               .procname   = "netfilter_output_enable",
+               .data       = &sysctl_netfilter_output_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   =proc_dointvec,
+       },
+       {
+               .ctl_name   = NET_NETFILTER_FORWARD_ENABLE,
+               .procname   = "netfilter_forward_enable",
+               .data       = &sysctl_netfilter_forward_enable,
+               .maxlen     = sizeof(int),
+               .mode       = 0644,
+               .proc_handler   =proc_dointvec,
+       },
+#endif
 	{ .ctl_name = 0 }
 };
 
Index: linux/arch/mips/kernel/vmlinux.lds.S
===================================================================
--- linux.orig/arch/mips/kernel/vmlinux.lds.S	2010-04-02 00:59:14.000000000 +0200
+++ linux/arch/mips/kernel/vmlinux.lds.S	2011-02-21 10:51:25.325209000 +0100
@@ -40,6 +40,9 @@
 #endif
 	. = VMLINUX_LOAD_ADDRESS;
 	/* read-only */
+	system : {
+		*(system)
+	}
 	_text = .;	/* Text and read-only data */
 	.text : {
 		TEXT_TEXT
Index: linux/kernel/sysctl_check.c
===================================================================
--- linux.orig/kernel/sysctl_check.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/kernel/sysctl_check.c	2011-02-20 01:41:42.770109000 +0100
@@ -391,6 +391,13 @@
 	{ NET_TCP_ALLOWED_CONG_CONTROL,		"tcp_allowed_congestion_control" },
 	{ NET_TCP_MAX_SSTHRESH,			"tcp_max_ssthresh" },
 	{ NET_TCP_FRTO_RESPONSE,		"tcp_frto_response" },
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+	{ NET_NETFILTER_PREROUTING_ENABLE,     	"netfilter_prerouting_enable" },
+	{ NET_NETFILTER_POSTROUTING_ENABLE,    	"netfilter_postrouting_enable" },
+	{ NET_NETFILTER_INPUT_ENABLE,          	"netfilter_input_enable" },
+	{ NET_NETFILTER_OUTPUT_ENABLE,        	"netfilter_output_enable" },
+	{ NET_NETFILTER_FORWARD_ENABLE,     	"netfilter_forward_enable" },
+#endif
 	{ 2088 /* NET_IPQ_QMAX */,		"ip_queue_maxlen" },
 	{}
 };
@@ -454,6 +461,13 @@
 	{ NET_BRIDGE_NF_CALL_IP6TABLES,		"bridge-nf-call-ip6tables" },
 	{ NET_BRIDGE_NF_FILTER_VLAN_TAGGED,	"bridge-nf-filter-vlan-tagged" },
 	{ NET_BRIDGE_NF_FILTER_PPPOE_TAGGED,	"bridge-nf-filter-pppoe-tagged" },
+#ifdef CONFIG_LTQ_NETFILTER_PROCFS
+	{ NET_BRIDGE_NF_PRE_ROUTING_ENABLE,     "bridge-nf-pre-routing-enable" },
+	{ NET_BRIDGE_NF_LOCAL_IN_ENABLE,    	"bridge-nf-local-in-enable" },
+	{ NET_BRIDGE_NF_FORWARD_ENABLE,    	"bridge-nf-forward-enable" },
+	{ NET_BRIDGE_NF_LOCAL_OUT_ENABLE,    	"bridge-nf-local-out-enable" },
+	{ NET_BRIDGE_NF_POST_ROUTING_ENABLE,    "bridge-nf-post-routing-enable" },
+#endif
 	{}
 };
 
Index: linux/net/core/sock.c
===================================================================
--- linux.orig/net/core/sock.c	2010-04-02 00:59:14.000000000 +0200
+++ linux/net/core/sock.c	2011-02-20 21:41:23.569822000 +0100
@@ -130,6 +130,10 @@
 #include <net/tcp.h>
 #endif
 
+#if defined(CONFIG_LTQ_UDP_REDIRECT) || defined(CONFIG_LTQ_UDP_REDIRECT_MODULE)
+#include <linux/udp_redirect.h>
+#endif
+
 /*
  * Each address family might have different locking rules, so we have
  * one slock key per address family:
@@ -295,6 +299,15 @@
 		goto out;
 	}
 
+        /* UDPREDIRECT */
+#if defined(CONFIG_LTQ_UDP_REDIRECT) || defined(CONFIG_LTQ_UDP_REDIRECT_MODULE)
+	if(udp_do_redirect_fn && sk->sk_user_data == UDP_REDIRECT_MAGIC) {
+		udp_do_redirect_fn(sk,skb);
+		kfree_skb(skb);
+		return 0;
+	}
+#endif
+
 	skb->dev = NULL;
 	skb_set_owner_r(skb, sk);
 
