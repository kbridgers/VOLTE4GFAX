--- linux/include/linux/atmbr2684.h	2010-04-02 04:29:14.000000000 +0530
+++ linux.ltq_patched/include/linux/atmbr2684.h	2010-11-20 16:58:05.055276428 +0530
@@ -4,6 +4,7 @@
 #include <linux/types.h>
 #include <linux/atm.h>
 #include <linux/if.h>		/* For IFNAMSIZ */
+#include <linux/if_ether.h>    /* ETH_P_* Add by Henry*/
 
 /*
  * Type of media we're bridging (ethernet, token ring, etc)  Currently only
@@ -56,6 +57,7 @@
 	int media;		/* BR2684_MEDIA_*, flags in upper bits */
 	char ifname[IFNAMSIZ];
 	int mtu;
+	int payload;		/* bridged or routed, Add by Henry*/
 };
 
 /*
@@ -85,6 +87,8 @@
 	int fcs_out;		/* BR2684_FCSOUT_* */
 	int fcs_auto;		/* 1: fcs_{in,out} disabled if no FCS rx'ed */
 	int encaps;		/* BR2684_ENCAPS_* */
+	int payload;		/* BR2684_PAYLOAD_*Add by Henry*/
+	int has_addr;		/* 1: include HW addr */
 	int has_vpiid;		/* 1: use vpn_id - Unsupported */
 	__u8 vpn_id[7];
 	int send_padding;	/* unsupported */
--- linux/include/linux/atmdev.h	2010-11-20 16:57:32.175624081 +0530
+++ linux.ltq_patched/include/linux/atmdev.h	2010-11-20 16:58:30.097959572 +0530
@@ -98,13 +98,15 @@
 					/* set backend handler */
 #define ATM_NEWBACKENDIF _IOW('a',ATMIOC_SPECIAL+3,atm_backend_t)
 					/* use backend to make new if */
-#define ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+4,struct atm_iobuf)
+#define ATM_DELBACKENDIF _IOW('a',ATMIOC_SPECIAL+4,atm_backend_t)
+					/* set backend to remove if */
+#define ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+5,struct atm_iobuf)
  					/* add party to p2mp call */
 #ifdef CONFIG_COMPAT
 /* It actually takes struct sockaddr_atmsvc, not struct atm_iobuf */
-#define COMPAT_ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+4,struct compat_atm_iobuf)
+#define COMPAT_ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+5,struct compat_atm_iobuf)
 #endif
-#define ATM_DROPPARTY 	_IOW('a', ATMIOC_SPECIAL+5,int)
+#define ATM_DROPPARTY 	_IOW('a', ATMIOC_SPECIAL+6,int)
 					/* drop party from p2mp call */
 
 #ifdef CONFIG_WAN_VLAN_SUPPORT
--- linux/net/atm/br2684.c	2010-11-20 16:57:32.175624081 +0530
+++ linux.ltq_patched/net/atm/br2684.c	2010-11-20 17:02:22.599614627 +0530
@@ -39,13 +39,16 @@
 	for (i = 0; i < skb->len && i < NUM2PRINT; i++) {
 		sprintf(buf + i * 3, "%2.2x ", 0xff & skb->data[i]);
 	}
-	printk(KERN_DEBUG "br2684: skb: %s\n", buf);
+	printk(KERN_DEBUG "br2684: skb[%p]: %s\n", skb->data, buf);
 }
 #else
 #define skb_debug(skb)	do {} while (0)
 #endif
 
+#define BR2684_LLC_LEN		3
+#define BR2684_SNAP_LEN		3
 #define BR2684_ETHERTYPE_LEN	2
+#define BR2684_PID_LEN		2
 #define BR2684_PAD_LEN		2
 
 #define LLC		0xaa, 0xaa, 0x03
@@ -460,7 +463,13 @@
  */
 static int br2684_mac_addr(struct net_device *dev, void *p)
 {
+#ifdef CONFIG_IFX_ATM
+	int err = 0;
+	struct sockaddr *addr = p;
+	memcpy(dev->dev_addr, addr->sa_data, dev->addr_len);
+#else
 	int err = eth_mac_addr(dev, p);
+#endif
 	if (!err)
 		BRPRIV(dev)->mac_was_set = 1;
 	return err;
@@ -703,6 +712,19 @@
 	ATM_SKB(skb)->vcc = atmvcc;	/* needed ? */
 	pr_debug("received packet's protocol: %x\n", ntohs(skb->protocol));
 	skb_debug(skb);
+/* Adopted from 2.4 BSP */
+	if (!(net_dev->flags & IFF_MULTICAST) && (skb->pkt_type == PACKET_MULTICAST))
+	{ /* drop multicast packets */
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,32)
+		brdev->stats.rx_dropped++;
+	#else
+		struct net_device *dev = skb->dev;
+		dev->stats.rx_dropped++;
+	#endif
+		dev_kfree_skb(skb);
+		return;
+	}
+/*165001*/
 	/* sigh, interface is down? */
 	if (unlikely(!(net_dev->flags & IFF_UP)))
 		goto dropped;
@@ -835,6 +857,41 @@
 	.ndo_change_mtu		= eth_change_mtu
 };
 
+static int br2684_unregvcc(struct atm_vcc *atmvcc, void __user *arg)
+{
+	int err;
+	struct br2684_vcc *brvcc;
+	struct br2684_dev *brdev;
+	struct net_device *net_dev;
+	struct atm_backend_br2684 be;
+
+	if (copy_from_user(&be, arg, sizeof be))
+		return -EFAULT;
+	write_lock_irq(&devs_lock);
+	net_dev = br2684_find_dev(&be.ifspec);
+	if (net_dev == NULL) {
+		printk(KERN_ERR
+			"br2684: tried to unregister to non-existant device\n");
+		err = -ENXIO;
+		goto error;
+	}
+	brdev = BRPRIV(net_dev);
+	while (!list_empty(&brdev->brvccs)) {
+		brvcc = list_entry_brvcc(brdev->brvccs.next);
+		br2684_close_vcc(brvcc);
+	}
+	list_del(&brdev->br2684_devs);
+	write_unlock_irq(&devs_lock);
+	unregister_netdev(net_dev);
+	free_netdev(net_dev);
+	atmvcc->push = NULL;
+	vcc_release_async(atmvcc, -ETIMEDOUT);
+	return 0;
+error:
+	write_unlock_irq(&devs_lock);
+	return err;
+}
+
 static void br2684_setup(struct net_device *netdev)
 {
 	struct br2684_dev *brdev = BRPRIV(netdev);
@@ -903,6 +960,8 @@
 		free_netdev(netdev);
 		return err;
 	}
+	/* Mark br2684 device */
+	netdev->priv_flags |= IFF_BR2684;
 
 	write_lock_irq(&devs_lock);
 	brdev->payload = payload;
@@ -928,6 +987,7 @@
 	switch (cmd) {
 	case ATM_SETBACKEND:
 	case ATM_NEWBACKENDIF:
+	case ATM_DELBACKENDIF:
 		err = get_user(b, (atm_backend_t __user *) argp);
 		if (err)
 			return -EFAULT;
@@ -937,6 +997,8 @@
 			return -EPERM;
 		if (cmd == ATM_SETBACKEND)
 			return br2684_regvcc(atmvcc, argp);
+		else if (cmd == ATM_DELBACKENDIF)
+			return br2684_unregvcc(atmvcc, argp);
 		else
 			return br2684_create(argp);
 #ifdef CONFIG_ATM_BR2684_IPFILTER
--- linux/net/atm/common.c	2010-11-20 16:57:32.165624571 +0530
+++ linux.ltq_patched/net/atm/common.c	2010-11-20 17:05:39.030773831 +0530
@@ -655,6 +655,9 @@
 	/* @@@ Should be merged with adjust_tp */
 	if (!tp->traffic_class || tp->traffic_class == ATM_ANYCLASS) return 0;
 	if (tp->traffic_class != ATM_UBR && !tp->min_pcr && !tp->pcr &&
+#ifdef CONFIG_IFX_ATM
+	    !tp->scr &&
+#endif
 	    !tp->max_pcr) return -EINVAL;
 	if (tp->min_pcr == ATM_MAX_PCR) return -EINVAL;
 	if (tp->min_pcr && tp->max_pcr && tp->max_pcr != ATM_MAX_PCR &&
@@ -776,11 +779,11 @@
 		goto out;
 
 	if ((error = atmpvc_init()) < 0) {
-		printk(KERN_ERR "atmpvc_init() failed with %d\n", error);
+		printk(KERN_WARNING "atmpvc_init() failed with %d\n", error);
 		goto out_unregister_vcc_proto;
 	}
 	if ((error = atmsvc_init()) < 0) {
-		printk(KERN_ERR "atmsvc_init() failed with %d\n", error);
+		printk(KERN_WARNING "atmsvc_init() failed with %d\n", error);
 		goto out_atmpvc_exit;
 	}
 	if ((error = atm_proc_init()) < 0) {
@@ -813,10 +816,11 @@
 	proto_unregister(&vcc_proto);
 }
 
-subsys_initcall(atm_init);
-
+module_init(atm_init);
 module_exit(atm_exit);
 
+subsys_initcall(atm_init);
+
 MODULE_LICENSE("GPL");
 MODULE_ALIAS_NETPROTO(PF_ATMPVC);
 MODULE_ALIAS_NETPROTO(PF_ATMSVC);
--- linux/net/atm/lec.c	2010-04-02 04:29:14.000000000 +0530
+++ linux.ltq_patched/net/atm/lec.c	2010-11-20 17:07:16.446920448 +0530
@@ -822,6 +822,8 @@
 	}
 }
 
+extern void (*ppa_hook_mpoa_setup)(struct atm_vcc *, int, int);
+
 static int lec_vcc_attach(struct atm_vcc *vcc, void __user *arg)
 {
 	struct lec_vcc_priv *vpriv;
@@ -848,6 +850,8 @@
 		      &ioc_data, vcc, vcc->push);
 	vcc->proto_data = dev_lec[ioc_data.dev_num];
 	vcc->push = lec_push;
+	if ( ppa_hook_mpoa_setup )
+		ppa_hook_mpoa_setup(vcc, 0, 0); //  EoA w/o FCS, VC mux
 	return 0;
 }
 
