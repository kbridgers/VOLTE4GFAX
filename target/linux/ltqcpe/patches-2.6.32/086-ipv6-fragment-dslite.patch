Index: linux-2.6.32.42/net/ipv6/ip6_tunnel.c
===================================================================
--- linux-2.6.32.42.orig/net/ipv6/ip6_tunnel.c	2012-02-03 17:59:11.000000000 +0530
+++ linux-2.6.32.42/net/ipv6/ip6_tunnel.c	2012-02-03 18:49:07.052961802 +0530
@@ -857,6 +857,7 @@
 	struct ip6_tnl *t = netdev_priv(dev);
 	struct net_device_stats *stats = &t->dev->stats;
 	struct ipv6hdr *ipv6h = ipv6_hdr(skb);
+	struct iphdr  *ipv4h = ip_hdr(skb);
 	struct ipv6_tel_txoption opt;
 	struct dst_entry *dst;
 	struct net_device *tdev;
@@ -894,7 +895,13 @@
 		mtu = IPV6_MIN_MTU;
 	if (skb_dst(skb))
 		skb_dst(skb)->ops->update_pmtu(skb_dst(skb), mtu);
-	if (skb->len > mtu) {
+	if ((skb->len > mtu) && (ipv4h->frag_off & htons(IP_DF)) ) {
+
+/*	if in the original IPv4 packet header the Don't Fragment  
+ * 	the entry-point node discards the packet and returns an ICMP message
+ * 	The ICMP message has the type = "unreachable", the code = "packet too big", 
+ * 	and the recommended MTU size field set to the size of the tunnel MTU - see sections
+ */
 		*pmtu = mtu;
 		err = -EMSGSIZE;
 		goto tx_err_dst_release;
Index: linux-2.6.32.42/include/net/ip6_route.h
===================================================================
--- linux-2.6.32.42.orig/include/net/ip6_route.h	2011-06-24 03:54:26.000000000 +0530
+++ linux-2.6.32.42/include/net/ip6_route.h	2012-03-08 11:23:57.836879218 +0530
@@ -147,5 +147,13 @@
 	return rt->rt6i_flags & RTF_LOCAL;
 }
 
+static inline int ip6_skb_dst_mtu(struct sk_buff *skb)
+{
+        struct ipv6_pinfo *np = skb->sk ? inet6_sk(skb->sk) : NULL;
+
+        return (np && np->pmtudisc == IPV6_PMTUDISC_PROBE) ?
+               skb_dst(skb)->dev->mtu : dst_mtu(skb_dst(skb));
+}
+
 #endif
 #endif
Index: linux-2.6.32.42/net/ipv4/ip_output.c
===================================================================
--- linux-2.6.32.42.orig/net/ipv4/ip_output.c	2012-03-08 11:09:24.000000000 +0530
+++ linux-2.6.32.42/net/ipv4/ip_output.c	2012-03-08 11:20:34.123879275 +0530
@@ -258,8 +258,14 @@
 		return dst_output(skb);
 	}
 #endif
-	if (skb->len > ip_skb_dst_mtu(skb) && !skb_is_gso(skb))
-		return ip_fragment(skb, ip_finish_output2);
+	if (skb->len > ip_skb_dst_mtu(skb) && !skb_is_gso(skb)){
+		if (skb->dev->type == ARPHRD_TUNNEL6){
+			skb_mark_priority(skb);
+			return ip_finish_output2(skb);
+		}
+		else
+			return ip_fragment(skb, ip_finish_output2);
+	}
 	else {
 		skb_mark_priority(skb);
 #ifdef CONFIG_LTQ_NETFILTER_PROCFS
Index: linux-2.6.32.42/net/ipv6/ip6_output.c
===================================================================
--- linux-2.6.32.42.orig/net/ipv6/ip6_output.c	2012-03-08 11:09:24.000000000 +0530
+++ linux-2.6.32.42/net/ipv6/ip6_output.c	2012-03-08 11:24:58.686879217 +0530
@@ -178,14 +178,6 @@
 		       ip6_output_finish);
 }
 
-static inline int ip6_skb_dst_mtu(struct sk_buff *skb)
-{
-	struct ipv6_pinfo *np = skb->sk ? inet6_sk(skb->sk) : NULL;
-
-	return (np && np->pmtudisc == IPV6_PMTUDISC_PROBE) ?
-	       skb_dst(skb)->dev->mtu : dst_mtu(skb_dst(skb));
-}
-
 int ip6_output(struct sk_buff *skb)
 {
 	struct inet6_dev *idev = ip6_dst_idev(skb_dst(skb));
Index: linux-2.6.32.42/net/ipv6/ip6_tunnel.c
===================================================================
--- linux-2.6.32.42.orig/net/ipv6/ip6_tunnel.c	2012-03-08 11:09:25.000000000 +0530
+++ linux-2.6.32.42/net/ipv6/ip6_tunnel.c	2012-03-08 11:23:28.863879058 +0530
@@ -946,6 +946,10 @@
 	ipv6_addr_copy(&ipv6h->daddr, &fl->fl6_dst);
 	nf_reset(skb);
 	pkt_len = skb->len;
+
+	if (fl->proto == IPPROTO_IPIP && skb->dev->type == ARPHRD_TUNNEL6 && (skb->len > ip6_skb_dst_mtu(skb))) {
+       		skb->local_df = 1 ;
+	}
 	err = ip6_local_out(skb);
 
 	if (net_xmit_eval(err) == 0) {
Index: linux-2.6.32.42/net/ipv6/ip6_tunnel.c
===================================================================
--- linux-2.6.32.42.orig/net/ipv6/ip6_tunnel.c	2012-03-13 15:40:02.000000000 +0530
+++ linux-2.6.32.42/net/ipv6/ip6_tunnel.c	2012-03-21 15:00:27.874943808 +0530
@@ -857,7 +857,6 @@
 	struct ip6_tnl *t = netdev_priv(dev);
 	struct net_device_stats *stats = &t->dev->stats;
 	struct ipv6hdr *ipv6h = ipv6_hdr(skb);
-	struct iphdr  *ipv4h = ip_hdr(skb);
 	struct ipv6_tel_txoption opt;
 	struct dst_entry *dst;
 	struct net_device *tdev;
@@ -895,8 +894,12 @@
 		mtu = IPV6_MIN_MTU;
 	if (skb_dst(skb))
 		skb_dst(skb)->ops->update_pmtu(skb_dst(skb), mtu);
-	if ((skb->len > mtu) && (ipv4h->frag_off & htons(IP_DF)) ) {
-
+	if ((skb->len > mtu)){
+		if ((fl->proto == IPPROTO_IPIP)) {
+			struct iphdr  *ipv4h = ip_hdr(skb);
+			if (!(ipv4h->frag_off & htons(IP_DF)))
+				goto ipv6_frag;
+		}
 /*	if in the original IPv4 packet header the Don't Fragment  
  * 	the entry-point node discards the packet and returns an ICMP message
  * 	The ICMP message has the type = "unreachable", the code = "packet too big", 
@@ -907,6 +910,7 @@
 		goto tx_err_dst_release;
 	}
 
+ipv6_frag:
 	/*
 	 * Okay, now see if we can stuff it in the buffer as-is.
 	 */
