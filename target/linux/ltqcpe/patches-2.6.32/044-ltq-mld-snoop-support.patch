Patch description:
=================
1) Add support for MLD snooping for Bridged interfaces.


diff -Naur linux.orig/include/linux/sysctl.h linux/include/linux/sysctl.h
--- linux.orig/include/linux/sysctl.h	2011-02-14 17:38:40.000000000 +0530
+++ linux/include/linux/sysctl.h	2011-02-14 17:39:23.000000000 +0530
@@ -791,6 +791,7 @@
 #ifdef CONFIG_IFX_IGMP_SNOOPING
 enum {
    NET_BRIDGE_IGMP_SNOOPING = 1,
+   NET_BRIDGE_MLD_SNOOPING = 2,
 };
 #endif
 
diff -Naur linux.orig/net/bridge/br_forward.c linux/net/bridge/br_forward.c
--- linux.orig/net/bridge/br_forward.c	2011-02-14 17:38:40.000000000 +0530
+++ linux/net/bridge/br_forward.c	2011-02-14 17:39:23.000000000 +0530
@@ -150,7 +150,8 @@
 				struct sk_buff *skb2;
 
 #ifdef CONFIG_IFX_IGMP_SNOOPING
-				if ((bridge_igmp_snooping) && (eth_hdr(skb)->h_dest[0] & 0x1) && 
+				if ((bridge_igmp_snooping || bridge_mld_snooping) && 
+				    (eth_hdr(skb)->h_dest[0] & 0x1) && 
 				    (br_selective_flood(prev, skb) == 0))
 						continue;
 #endif
@@ -170,7 +171,8 @@
 
 	if (prev != NULL) {
 #ifdef CONFIG_IFX_IGMP_SNOOPING
-		if ((bridge_igmp_snooping) && (eth_hdr(skb)->h_dest[0] & 0x1) && 
+		if ((bridge_igmp_snooping || bridge_mld_snooping) && 
+		    (eth_hdr(skb)->h_dest[0] & 0x1) && 
 		    (br_selective_flood(prev, skb) == 0))
 			kfree_skb(skb);
 		else
diff -Naur linux.orig/net/bridge/br_ioctl.c linux/net/bridge/br_ioctl.c
--- linux.orig/net/bridge/br_ioctl.c	2011-02-14 17:38:40.000000000 +0530
+++ linux/net/bridge/br_ioctl.c	2011-02-14 17:39:23.000000000 +0530
@@ -103,12 +103,8 @@
 }
 
 #ifdef CONFIG_IFX_IGMP_SNOOPING
-/* Set router port ioctl request */
-struct router_port {
-	u32	if_index; /* interface index */
-	u32	expires; /* expiry time */
-};
 
+/* Set router port ioctl request */
 static int mcast_snoop_set_router_port(struct net_bridge *br, struct ifreq *rq)
 {
 	struct router_port rp;
@@ -128,26 +124,25 @@
 	port = dev->br_port;
    if (port == NULL) {
 		dev_put(dev);
-      return -ENODEV;
+		return -ENODEV;
 	}
 
-	port->router_port = 1;
-	mod_timer(&port->router_timer, jiffies + rp.expires * HZ);
+	if (rp.type == IPV4) {
+		port->igmp_router_port = 1;
+		mod_timer(&port->igmp_router_timer, jiffies + rp.expires * HZ);
+	} else if (rp.type == IPV6) {
+		port->mld_router_port = 1;
+		mod_timer(&port->mld_router_timer, jiffies + rp.expires * HZ);
+	} else {
+		dev_put(dev);
+		return -EINVAL;
+	}
 
 	dev_put(dev);
 	return 0;
 }
 
-/* Multicast group record ioctl request */
-struct br_grp_rec {
-    u32 if_index;   /* interface index */
-    u32 gaddr;          /* Group address */
-    u32 filter_mode;    /* Filter mode */
-    u32 igmp_compat;    /* Compatibility mode */
-    u32 nsrc;       /* number of sources */
-    u32 slist[0];   /* source list */
-};
-
+/* Add / delete multicast entry */
 static int add_del_mg_entry(struct net_bridge *br, struct ifreq *rq, int isadd)
 {
     struct net_device *dev;
@@ -169,12 +164,12 @@
     nsrc = recbuf.nsrc;
 
     /* allocate buffer large enough to accommodate the src list also */
-    buf = kmalloc(sizeof(struct br_grp_rec) + nsrc * sizeof(u32), GFP_KERNEL);
+    buf = kmalloc(sizeof(struct br_grp_rec) + nsrc * sizeof(ipaddr_t), GFP_KERNEL);
     if(buf == NULL)
         return -ENOMEM;
 
     /* Step 2. now copy the entire record */
-    if (copy_from_user(buf, rq->ifr_data, sizeof(struct br_grp_rec) + nsrc * sizeof(u32)))
+    if (copy_from_user(buf, rq->ifr_data, sizeof(struct br_grp_rec) + nsrc * sizeof(ipaddr_t)))
         return -EFAULT;
 
     rec = (struct br_grp_rec *)buf;
@@ -185,15 +180,15 @@
 
     port = dev->br_port;
     if (port == NULL) {
-		  dev_put(dev);
-        kfree(buf);
-        return -ENODEV;
+		dev_put(dev);
+		kfree(buf);
+		return -ENODEV;
     }
 
     if(isadd)
-        ret = br_mg_add_entry(port, rec->gaddr, rec->filter_mode, rec->igmp_compat, rec->nsrc, rec->slist);
+        ret = br_mg_add_entry(port, &rec->gaddr, rec->filter_mode, rec->compat, rec->nsrc, rec->slist);
     else
-        ret = br_mg_del_record(port, rec->gaddr);    // TODO: add function
+        ret = br_mg_del_record(port, &rec->gaddr);
 
     dev_put(dev);
     kfree(buf);
diff -Naur linux.orig/net/bridge/br_mcast_snooping.c linux/net/bridge/br_mcast_snooping.c
--- linux.orig/net/bridge/br_mcast_snooping.c	2011-02-14 17:38:40.000000000 +0530
+++ linux/net/bridge/br_mcast_snooping.c	2011-02-14 17:39:23.000000000 +0530
@@ -15,6 +15,7 @@
 #include <linux/if_vlan.h>
 #include <linux/netfilter_bridge.h>
 #include <linux/in.h>
+#include <net/ipv6.h>
 #include <linux/ip.h>
 #include <linux/igmp.h>
 #include <linux/jhash.h>
@@ -25,6 +26,7 @@
 #include "br_private.h"
 
 int bridge_igmp_snooping = 0;
+int bridge_mld_snooping = 0;
 
 #ifdef CONFIG_SYSCTL
 static struct ctl_table_header *br_mcast_sysctl_header;
@@ -53,6 +55,16 @@
 		.mode		= 0644,
 		.proc_handler	= &br_mcast_sysctl_call_tables,
 	},
+	{
+#if 0
+		.ctl_name	= NET_BRIDGE_MLD_SNOOPING,
+#endif
+		.procname	= "bridge-mld-snooping",
+		.data		= &bridge_mld_snooping,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &br_mcast_sysctl_call_tables,
+	},
 	{ .ctl_name = 0 }
 };
 
@@ -81,36 +93,127 @@
 #endif
 }
 
-static void router_timer_handler(unsigned long data)
+static void igmp_router_timer_handler(unsigned long data)
+{
+	struct net_bridge_port *port = (struct net_bridge_port *)data;
+
+	port->igmp_router_port = 0;
+}
+
+static void mld_router_timer_handler(unsigned long data)
 {
 	struct net_bridge_port *port = (struct net_bridge_port *)data;
 
-	port->router_port = 0;
+	port->mld_router_port = 0;
 }
 
 void br_mcast_port_init(struct net_bridge_port *port)
 {
 	/* init mghash secret */
 	get_random_bytes(&port->mghash_secret, sizeof(port->mghash_secret));
+	get_random_bytes(&port->mghash_secret6, sizeof(port->mghash_secret6));
 
 	/* init router port timer */
-	port->router_timer.function = router_timer_handler;
-	port->router_timer.data = (unsigned int)port;
-	init_timer(&port->router_timer);
+	port->igmp_router_timer.function = igmp_router_timer_handler;
+	port->igmp_router_timer.data = (unsigned int)port;
+	init_timer(&port->igmp_router_timer);
+
+	port->mld_router_timer.function = mld_router_timer_handler;
+	port->mld_router_timer.data = (unsigned int)port;
+	init_timer(&port->mld_router_timer);
+}
+
+static void init_ipaddr(ipaddr_t *addr, ptype_t type, void *addrp)
+{
+    if (addr == NULL)
+        return;
+
+    if (type == IPV4) {
+        addr->type = IPV4;
+        if (addrp)
+            addr->addr.ip4.s_addr = *((unsigned int *)addrp);
+        else
+            addr->addr.ip4.s_addr = 0;
+    }
+    else if (type == IPV6) {
+        struct in6_addr *in6 = (struct in6_addr *)addrp;
+        addr->type = IPV6;
+        if (in6) {
+			addr->addr.ip6.s6_addr32[0] = in6->s6_addr32[0];
+			addr->addr.ip6.s6_addr32[1] = in6->s6_addr32[1];
+			addr->addr.ip6.s6_addr32[2] = in6->s6_addr32[2];
+			addr->addr.ip6.s6_addr32[3] = in6->s6_addr32[3];
+        } else {
+			addr->addr.ip6.s6_addr32[0] = 0;
+			addr->addr.ip6.s6_addr32[1] = 0;
+			addr->addr.ip6.s6_addr32[2] = 0;
+			addr->addr.ip6.s6_addr32[3] = 0;
+		}
+	}
+}
+
+static int is_same_ipaddr(ipaddr_t *addr1, ipaddr_t *addr2)
+{
+    if (addr1 == NULL || addr2 == NULL)
+        return false;
+
+    if (addr1->type == IPV4 && addr2->type == IPV4) {
+        return addr1->addr.ip4.s_addr == addr2->addr.ip4.s_addr;
+    }
+    else if (addr1->type == IPV6 && addr2->type == IPV6) {
+        return addr1->addr.ip6.s6_addr32[0] == addr2->addr.ip6.s6_addr32[0] &&
+		       addr1->addr.ip6.s6_addr32[1] == addr2->addr.ip6.s6_addr32[1] &&
+			   addr1->addr.ip6.s6_addr32[2] == addr2->addr.ip6.s6_addr32[2] &&
+			   addr1->addr.ip6.s6_addr32[3] == addr2->addr.ip6.s6_addr32[3];
+    }
+
+    return 0;
+}
+
+static void copy_ipaddr(ipaddr_t *to, ipaddr_t *from)
+{
+    if (to == NULL || from == NULL)
+        return;
+
+    memcpy(to, from, sizeof(ipaddr_t));
+}
+
+static int IS_ADDR_UNSPECIFIED(ipaddr_t *addr)
+{
+    if (addr->type == IPV4)
+        return addr->addr.ip4.s_addr == 0;
+    else if (addr->type == IPV6)
+        return (addr->addr.ip6.s6_addr32[0] == 0) && 
+		       (addr->addr.ip6.s6_addr32[1] == 0) && 
+		       (addr->addr.ip6.s6_addr32[2] == 0) && 
+		       (addr->addr.ip6.s6_addr32[3] == 0);
+
+    return 0;
 }
 
-static inline int br_gaddr_hash(struct net_bridge_port *port, __be32 gaddr)
+static inline u32 br_gaddr_hash(struct net_bridge_port *port, ipaddr_t *gaddr)
 {
-	return jhash_1word(port->mghash_secret, (u32)gaddr) & (BR_HASH_SIZE - 1);
+	u32 hash;
+
+	if (gaddr->type == IPV4) {
+		u32 initval = gaddr->addr.ip4.s_addr;
+		hash = jhash_1word(initval, port->mghash_secret) & (BR_HASH_SIZE - 1);
+	} else if (gaddr->type == IPV6) {
+		u32 *k = (u32 *)&gaddr->addr.ip6.s6_addr32[0];
+		hash = jhash2(k, 4, port->mghash_secret6) & (BR_HASH_SIZE - 1);
+	}
+
+	return hash;
 }
 
-static inline struct net_bridge_mg_entry *_br_mg_get_entry(struct hlist_head *head, const __be32 gaddr)
+static inline struct net_bridge_mg_entry *_br_mg_get_entry(struct hlist_head *head, 
+                                                           ipaddr_t *gaddr)
 {
 	struct net_bridge_mg_entry *entry;
 	struct hlist_node *h;
 
 	hlist_for_each_entry_rcu(entry, h, head, hlist) {
-		if(entry->gaddr == gaddr)
+		if(is_same_ipaddr(&entry->gaddr, gaddr))
 			return entry;
 	}
 
@@ -118,10 +221,10 @@
 }
 
 /* Search multicast group table for a group */
-struct net_bridge_mg_entry *br_mg_get_entry(struct net_bridge_port *port, __be32 gaddr)
+struct net_bridge_mg_entry *br_mg_get_entry(struct net_bridge_port *port, ipaddr_t *gaddr)
 {
 	struct hlist_head *head;
-	int hash;
+	unsigned int hash;
 
 	hash = br_gaddr_hash(port, gaddr);
 	head = &port->mghash[hash];
@@ -143,24 +246,27 @@
 	call_rcu(&entry->rcu, _br_mg_free_entry);
 }
 
-static int br_mg_update_entry(struct net_bridge_port *port, struct net_bridge_mg_entry *old, struct hlist_head *head, 
-				__be32 gaddr, u8 filter, u8 igmp_compat, u32 saddr_cnt, __be32 *saddr)
+static int br_mg_update_entry(struct net_bridge_port *port, struct net_bridge_mg_entry *old, 
+                              struct hlist_head *head, ipaddr_t *gaddr, u8 filter, 
+                              u8 compat, u32 saddr_cnt, ipaddr_t *saddr)
 {
 	struct net_bridge_mg_entry *new;
 	int i;
 
 	/* prepare a new temporary group entry */
-	new = kzalloc(sizeof(*new) + saddr_cnt * sizeof(*saddr), GFP_ATOMIC);
+	new = kzalloc(sizeof(struct net_bridge_mg_entry) + saddr_cnt * sizeof(ipaddr_t), 
+	              GFP_ATOMIC);
+
 	if(unlikely(!new))
 		return -1;
 
-	new->gaddr = gaddr;
+	copy_ipaddr(&new->gaddr, gaddr);
 	new->port = port;
 	new->filter_mode = filter;
-	new->igmp_compat_mode = igmp_compat;
+	new->compat_mode = compat;
 	new->saddr_cnt = saddr_cnt;
 	for(i = 0; i < saddr_cnt; i++)
-		new->saddr[i] = saddr[i];
+		copy_ipaddr(&new->saddr[i], &saddr[i]);
 
 	/* delete old entry */
 	br_mg_delete_entry(old);
@@ -188,18 +294,18 @@
 }
 
 /*Delete a group from multicast group table*/
-int br_mg_del_record(struct net_bridge_port *port, __be32 gaddr)
+int br_mg_del_record(struct net_bridge_port *port, ipaddr_t *gaddr)
 {
 	struct net_bridge_mg_entry *entry;
 	struct hlist_head *head;
-	int hash;
+	unsigned int hash;
 
 	spin_lock(&port->mghash_lock);
 
 	hash = br_gaddr_hash(port, gaddr);
 	head = &port->mghash[hash];
 
-	if (gaddr){
+	if (!IS_ADDR_UNSPECIFIED(gaddr)) {
 		entry = _br_mg_get_entry(head, gaddr);
 		if (entry) br_mg_delete_entry(entry);
 	} else {
@@ -211,16 +317,13 @@
 	return 0;
 }
 
-
-
-
 /* Add a group to multicast group table */
 int br_mg_add_entry(struct net_bridge_port *port, 
-					__be32 gaddr, u8 filter, u8 igmp_compat, u32 saddr_cnt, __be32 *saddr)
+					ipaddr_t *gaddr, u8 filter, u8 compat, u32 saddr_cnt, ipaddr_t *saddr)
 {
 	struct net_bridge_mg_entry *entry;
 	struct hlist_head *head;
-	int hash;
+	unsigned int hash;
 	int i;
 
 	spin_lock(&port->mghash_lock);
@@ -231,26 +334,25 @@
 	entry = _br_mg_get_entry(head, gaddr);
 	if(!entry) {
 		/* Create new mg entry */
-		entry = kzalloc(sizeof(*entry) + saddr_cnt * sizeof(*saddr), GFP_ATOMIC);
+		entry = kzalloc(sizeof(*entry) + saddr_cnt * sizeof(ipaddr_t), GFP_ATOMIC);
 		if(unlikely(!entry)) {
 			spin_unlock(&port->mghash_lock);
 			return -1;
 		}
 
 		entry->port = port;
-		entry->gaddr = gaddr;
+		copy_ipaddr(&entry->gaddr, gaddr);
 		entry->filter_mode = filter;
-		entry->igmp_compat_mode = igmp_compat;
+		entry->compat_mode = compat;
 		entry->saddr_cnt = saddr_cnt;
 		for(i = 0; i < saddr_cnt; i++)
-			entry->saddr[i] = saddr[i];
+			copy_ipaddr(&entry->saddr[i], &saddr[i]);
 
 		hlist_add_head_rcu(&entry->hlist, head);
-
 	}
 	else {
 		/* Update existing entry */
-		br_mg_update_entry(port, entry, head, gaddr, filter, igmp_compat, saddr_cnt, saddr);
+		br_mg_update_entry(port, entry, head, gaddr, filter, compat, saddr_cnt, saddr);
 	}
 
 	spin_unlock(&port->mghash_lock);
@@ -258,14 +360,11 @@
 	return 0;
 }
 
-/* Handle IGMP query */
-static int br_forward_igmp_query(struct net_bridge_port *port, __be32 gaddr, __be32 saddr, int ver)
+/* Handle IGMP / MLD query */
+static int br_forward_query(struct net_bridge_port *port, ipaddr_t *gaddr, int ver)
 {
 	struct net_bridge_mg_entry *entry;
-	u8 igmp_compat_mode;
-
-	if(!IN_MULTICAST(ntohl(gaddr)))  // XXX: ntohl
-		return 1;
+	u8 compat_mode;
 
 	/* Handle Group specific query */
 	if(NULL == (entry = br_mg_get_entry(port, gaddr))) {
@@ -274,26 +373,20 @@
 	}
 
 	rcu_read_lock();	// XXX: needed ???
-	igmp_compat_mode = entry->igmp_compat_mode;
+	compat_mode = entry->compat_mode;
 	rcu_read_unlock();
-	if (igmp_compat_mode == ver)
+	if (compat_mode == ver)
 		return 1;
 	else
 		return 0;
-
-
 }
 
 /* Handle multicast data */
-static int br_snoop_multicast_data(struct net_bridge_port *port, __be32 gaddr, __be32 saddr)
+static int br_snoop_multicast_data(struct net_bridge_port *port, ipaddr_t *gaddr, 
+                                   ipaddr_t *saddr)
 {
 	struct net_bridge_mg_entry *entry;
-	int i;
-	int found = 0;
-	int filter_mode = 1;
-
-	if(!IN_MULTICAST(ntohl(gaddr)))	// check if redundant ??
-		return 1;
+	int i, found = 0, filter_mode = 1, ret = 1;
 
 	if(NULL == (entry = br_mg_get_entry(port, gaddr))) {
 		/* no matching group found */
@@ -304,7 +397,7 @@
 	filter_mode = entry->filter_mode;
 
 	for (i = 0; i < entry->saddr_cnt; i++) {
-		if(entry->saddr[i] == saddr) {
+		if(is_same_ipaddr(&entry->saddr[i], saddr)) {
 			found = 1;
 			break;
 		}
@@ -312,38 +405,119 @@
 	rcu_read_unlock();
 
 	if(found) {
-		return filter_mode == 1 ? 1 : 0;
+		ret = filter_mode == 1 ? 1 : 0;
 	}
 	else {
-		return filter_mode == 0 ? 1 : 0;
+		ret = filter_mode == 0 ? 1 : 0;
 	}
+
+	return ret;
 }
 
-int br_selective_flood(struct net_bridge_port *p, struct sk_buff *skb)
+struct mld2_query {
+    __u8 type;
+    __u8 code;
+    __sum16 csum;
+    __be16 mrc;
+    __be16 resv1;
+    struct in6_addr mca;
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+    __u8 qrv:3,
+         suppress:1,
+         resv2:4;
+#elif defined(__BIG_ENDIAN_BITFIELD)
+    __u8 resv2:4,
+         suppress:1,
+         qrv:3;
+#else
+#error "Please fix <asm/byteorder.h>"
+#endif
+    __u8 qqic;
+    __be16 nsrcs;
+    struct in6_addr srcs[0];
+};
+
+#define IN6_IS_ADDR_MULTICAST(a) (((__const uint8_t *) (a))[0] == 0xff)
+
+static int br_selective_flood6(struct net_bridge_port *p, struct sk_buff *skb)
+{
+	struct ipv6hdr *iph;
+	ipaddr_t daddr, gaddr, saddr;
+	int mldlen;
+	int ver = 3;
+
+	iph = (struct ip6hdr *)skb_network_header(skb);
+
+	/* Also not interested if IP dest address is not a multicast address */
+	if(!IN6_IS_ADDR_MULTICAST(&iph->daddr))
+		return 1;
+
+	init_ipaddr(&daddr, IPV6, &iph->daddr);
+	init_ipaddr(&saddr, IPV6, &iph->saddr);
+
+	if(iph->nexthdr == IPPROTO_HOPOPTS) {
+		struct ipv6_opt_hdr *opt = (struct ipv6_opt_hdr *)((void *)iph + sizeof(struct ipv6hdr));
+
+		if (opt->nexthdr == IPPROTO_ICMPV6) {
+			struct mld2_query *query = NULL;
+			struct icmp6hdr *icmp6h = (struct icmp6hdr *) ((void *)opt + ipv6_optlen(opt));
+
+			switch(icmp6h->icmp6_type) {
+				case ICMPV6_MGM_QUERY:
+					if (p->mld_router_port) {
+						return 0;
+					}
+					query = (struct mld2_query *)icmp6h;
+					mldlen = ntohs(iph->payload_len) - ipv6_optlen(opt);
+					if (mldlen == 24) {
+						ver = MLDV1;
+					} else if (mldlen >= 28) {
+						ver = MLDV2;
+					} else
+						return 1; /* Do not handle malformed MLD query packet */
+					init_ipaddr(&gaddr, IPV6, &query->mca);
+					return br_forward_query(p, &gaddr, ver);
+				case ICMPV6_MGM_REPORT:
+				case ICMPV6_MGM_REDUCTION:
+				case ICMPV6_MLD2_REPORT:
+					if (p->mld_router_port) {
+						return 1;
+					} else
+						return 0;	/* Do not flood MLD reports if not router port */
+				default:
+					break;
+			}
+		}
+	}
+
+	return br_snoop_multicast_data(p, &daddr, &saddr);
+}
+
+static int br_selective_flood4(struct net_bridge_port *p, struct sk_buff *skb)
 {
 	struct iphdr *iph;
 	struct igmphdr *igmph;
 	struct igmpv3_query *igmph3;
+	ipaddr_t daddr, gaddr, saddr;
 	int ret = 1;
 	int igmplen;
 	int ver = 3;
 
-	/* Do not mess with non-IP packets */
-	if(skb->protocol != htons(ETH_P_IP))
-		return 1;
-
 	iph = (struct iphdr *)skb_network_header(skb);
 
 	/* Also not interested if IP dest address is not a multicast address */
 	if(!IN_MULTICAST(ntohl(iph->daddr)))
 		return 1;
 
+	init_ipaddr(&daddr, IPV4, &iph->daddr);
+	init_ipaddr(&saddr, IPV4, &iph->saddr);
+
 	if(iph->protocol == IPPROTO_IGMP) {
-		igmph = (struct igmphdr *) (skb->data + 4 * (int)iph->ihl);
+		igmph = (struct igmphdr *) ((void *)iph + 4 * (int)iph->ihl);
 
 		switch(igmph->type) {
 		case IGMP_HOST_MEMBERSHIP_QUERY:
-			if (p->router_port) 
+			if (p->igmp_router_port) 
 				return 0;
 			igmph3 = (struct igmpv3_query *)igmph;
 			igmplen = ntohs((int)iph->tot_len) - 4 * (int)iph->ihl; 
@@ -352,12 +526,13 @@
 			}
 			else if(igmplen > 8 && igmplen < 12)
 				return 1;	/* Do not handle malformed IGMP query packet */
-			return br_forward_igmp_query(p, ntohl(igmph->group), ntohl(iph->saddr), ver);
+			init_ipaddr(&gaddr, IPV4, &igmph->group);
+			return br_forward_query(p, &gaddr, ver);
 		case IGMP_HOST_MEMBERSHIP_REPORT:
 		case IGMPV2_HOST_MEMBERSHIP_REPORT:
 		case IGMPV3_HOST_MEMBERSHIP_REPORT:
 		case IGMP_HOST_LEAVE_MESSAGE:
-			if (p->router_port)
+			if (p->igmp_router_port)
 				return 1;
 			else
 				return 0;	/* Do not flood IGMP reports */
@@ -373,5 +548,21 @@
 		(ntohl(iph->daddr) & 0xffffff00U) == 0xef000000U)
 		return 1;
 
-	return br_snoop_multicast_data(p, iph->daddr, iph->saddr);
+	return br_snoop_multicast_data(p, &daddr, &saddr);
+}
+
+int br_selective_flood(struct net_bridge_port *p, struct sk_buff *skb)
+{
+	if (skb->protocol == htons(ETH_P_IP)) {
+		if (bridge_igmp_snooping)
+			return br_selective_flood4(p, skb);
+		else
+			return 1;
+	} else if (skb->protocol == htons(ETH_P_IPV6)) {
+		if (bridge_mld_snooping)
+			return br_selective_flood6(p, skb);
+		else
+			return 1;
+	} else
+		return 1;
 }
diff -Naur linux.orig/net/bridge/br_private.h linux/net/bridge/br_private.h
--- linux.orig/net/bridge/br_private.h	2011-02-14 17:38:40.000000000 +0530
+++ linux/net/bridge/br_private.h	2011-02-14 17:39:23.000000000 +0530
@@ -58,17 +58,62 @@
 };
 
 #ifdef CONFIG_IFX_IGMP_SNOOPING
+
+typedef enum {
+	IPV4 = 0,
+	IPV6,
+} ptype_t;
+
+struct ipaddr {
+	ptype_t type;
+	union {
+		struct in_addr ip4;
+		struct in6_addr ip6;
+	} addr;
+};
+
+typedef struct ipaddr ipaddr_t;
+
+enum igmp_ver {
+    IGMPV1 = 1,
+    IGMPV2,
+    IGMPV3,
+};
+
+enum mld_ver {
+    MLDV1 = 1,
+    MLDV2,
+};
+
+/* Set router port ioctl request */
+struct router_port {
+	ptype_t type;
+    u32 if_index; /* interface index */
+    u32 expires; /* expiry time */
+};
+
+/* Multicast group record ioctl request */
+struct br_grp_rec {
+    u32 if_index;   /* interface index */
+    ipaddr_t gaddr;          /* Group address */
+    u32 filter_mode;    /* Filter mode */
+    u32 compat;    /* Compatibility mode */
+    u32 nsrc;       /* number of sources */
+    ipaddr_t slist[0];   /* source list */
+};
+
 struct net_bridge_mg_entry
 {
-	struct hlist_node       hlist;
-	__be32					gaddr;          	/* Group ipaddr */
-	u8						filter_mode;        /* 0 = EX, 1 = IN */
-	u8						igmp_compat_mode;   /* 1 = v1, 2 = v2, 3 = v3 */
-	struct net_bridge_port	*port;
-	struct rcu_head			rcu;
-	u32						saddr_cnt;
-	__be32					saddr[0];       	/* Array of src ipaddr */
+    struct hlist_node		hlist;
+    ipaddr_t				gaddr;              /* Group ipaddr */
+    u8						filter_mode;        /* 0 = EX, 1 = IN */
+    u8						compat_mode;   /* 1 = v1, 2 = v2, 3 = v3 */
+    struct net_bridge_port	*port;
+    struct rcu_head			rcu;
+    u32						saddr_cnt;
+    ipaddr_t				saddr[0];           /* Array of src ipaddr */
 };
+
 #endif /* CONFIG_IFX_IGMP_SNOOPING */
 
 struct net_bridge_port
@@ -99,11 +144,14 @@
 	unsigned long 			flags;
 #define BR_HAIRPIN_MODE		0x00000001
 #ifdef CONFIG_IFX_IGMP_SNOOPING
-	u32                     mghash_secret;
+	u32						mghash_secret;
+	u32						mghash_secret6;
 	spinlock_t				mghash_lock;
 	struct hlist_head		mghash[BR_HASH_SIZE];
-	u8						router_port;
-	struct timer_list		router_timer;
+	u8						igmp_router_port;
+	struct timer_list		igmp_router_timer;
+	u8						mld_router_port;
+	struct timer_list		mld_router_timer;
 #endif /* CONFIG_IFX_IGMP_SNOOPING */
 };
 
@@ -275,13 +323,13 @@
 
 #ifdef CONFIG_IFX_IGMP_SNOOPING
 /* br_mcast_snooping.c */
-
 extern void br_mcast_port_init(struct net_bridge_port *port);
-extern int br_mg_del_record(struct net_bridge_port *port, __be32 gaddr);
-extern int br_mg_add_entry(struct net_bridge_port *port, __be32 gaddr, u8 filter, u8 igmp_compat, u32 saddr_cnt, __be32 *saddr);
+extern int br_mg_del_record(struct net_bridge_port *port, ipaddr_t *gaddr);
+extern int br_mg_add_entry(struct net_bridge_port *port, ipaddr_t *gaddr, u8 filter, u8 compat, u32 saddr_cnt, ipaddr_t *saddr);
 extern int br_selective_flood(struct net_bridge_port *p, struct sk_buff *skb);
 
 extern int bridge_igmp_snooping;
+extern int bridge_mld_snooping;
 extern void br_mcast_snoop_init(void);
 extern void br_mcast_snoop_deinit(void);
 #endif
