Index: linux-2.6.32.42/include/linux/netfilter/nf_conntrack_rtsp.h
===================================================================
--- linux-2.6.32.42.orig/include/linux/netfilter/nf_conntrack_rtsp.h	2012-05-23 13:33:39.000000000 +0530
+++ linux-2.6.32.42/include/linux/netfilter/nf_conntrack_rtsp.h	2012-05-23 14:51:00.728925182 +0530
@@ -66,7 +66,9 @@
     u_int16_t nat_rtp_port;  /* Translated loport for RTP */
     u_int16_t nat_rtcp_port; /* Translated hiport for RTCP if applicable */
     /* ] End changes */
-    u_int32_t reply_source; /* Store source information from the REPLY message*/
+    union nf_inet_addr reply_source; /* Store source information from the REPLY message*/
+    u_int16_t l3num;
+	
 };
 
 /* This structure exists only once per master */
Index: linux-2.6.32.42/net/netfilter/nf_conntrack_rtsp.c
===================================================================
--- linux-2.6.32.42.orig/net/netfilter/nf_conntrack_rtsp.c	2012-05-23 13:33:39.000000000 +0530
+++ linux-2.6.32.42/net/netfilter/nf_conntrack_rtsp.c	2012-05-23 16:56:37.230925462 +0530
@@ -26,6 +26,7 @@
 #include <linux/ip.h>
 #include <net/checksum.h>
 #include <net/tcp.h>
+#include <net/ipv6.h>
 
 //#include <linux/netfilter_ipv4/lockhelp.h>
 #include <net/netfilter/nf_conntrack_helper.h>
@@ -301,7 +302,7 @@
 {
 	int     rc = 0;
 	uint    off = 0;
-	char    szextaddr1[15+1];
+	char    szextaddr1[43+1];
 
 	if (tranlen < 10 || !iseol(ptran[tranlen-1]) ||
 			nf_strncasecmp(ptran, "Transport:", 10) != 0)
@@ -387,13 +388,14 @@
 			 * and the client is sending packets elsewhere, the expectation
 			 * will quietly time out.
 			 */
-			// DEBUGP("tran1111='%.*s'\n", (int)tranlen, ptran);
+			DEBUGP("tran1111='%.*s'\n", (int)tranlen, ptran);
 
 			if (strncmp(ptran+off, "source=", 7) == 0)
 			{
 				//off +=7;
 				 u_int32_t   addr32;
 				 uint len32;
+				 union nf_inet_addr tmp_ip6addr = {};
 
 				 DEBUGP("tran=222'%.*s', %d, %d, %d, %d\n", (int)tranlen, ptran, ptran+off+7, nextparamoff, nextfieldoff, tranlen);
 
@@ -411,15 +413,24 @@
 			             NIPQUAD(prtspexp->reply_source), szextaddr1, nextparamoff, nextfieldoff, off);
 			*/
 
-				memset(szextaddr1,'\0',16);
+				memset(szextaddr1,'\0', 44);
+
 			if (nextfieldoff == nextparamoff)
 				strncpy(szextaddr1, ptran+off+7, ((nextfieldoff - (off + 7)-2)));
 			else
 				strncpy(szextaddr1, ptran+off+7, ((nextfieldoff - (off + 7)-1)));
 
-				prtspexp->reply_source = in_aton(szextaddr1);	
-				DEBUGP("SOURCE1  %u.%u.%u.%u, %s , %u ,%u, %u \n",
-			             NIPQUAD(prtspexp->reply_source), szextaddr1, nextparamoff, nextfieldoff, off);
+				if (prtspexp->l3num == PF_INET6) {
+					/* convert string to IPv6 addr */
+					in6_pton( ( const char *)&szextaddr1 , -1 /* len */, (u8 *)&(tmp_ip6addr.in6) , '\0', NULL);
+					ipv6_addr_copy(&prtspexp->reply_source.in6, &tmp_ip6addr.in6);
+				
+				}
+				else {
+					prtspexp->reply_source.ip = in_aton(szextaddr1);	
+				DEBUGP("SOURCE IPv4  %u.%u.%u.%u, %s , %u ,%u, %u \n",
+			             NIPQUAD(prtspexp->reply_source.ip), szextaddr1, nextparamoff, nextfieldoff, off);
+				}
 
 			}
 
@@ -529,8 +540,8 @@
 		struct nf_conn* ct, enum ip_conntrack_info ctinfo)
 {
 	int dir = CTINFO2DIR(ctinfo);   /* = IP_CT_DIR_ORIGINAL */
-      struct iphdr* iph = ip_hdr(skb); //(struct iphdr*)(*pskb)->nh.iph;
-      struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
+      //struct iphdr* iph = ip_hdr(skb); //(struct iphdr*)(*pskb)->nh.iph;
+      //struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
 
 	struct nf_ct_rtsp_expect expinfo;
 	uint    dataoff = 0;
@@ -589,6 +600,9 @@
 
 		memset(&expinfo, 0, sizeof(expinfo));
 
+		expinfo.l3num = nf_ct_l3num(ct) ;
+		memset (&expinfo.reply_source.in6, 0 , sizeof(struct in6_addr));
+
 		off = 0;
 		while (nf_mime_nextline(pdata+hdrsoff, hdrslen, &off,
 					&lineoff, &linelen))
@@ -616,23 +630,36 @@
 			continue;   /* no udp transports found */
 		}
 
-                if (expinfo.reply_source == 0)
+	if (expinfo.l3num == PF_INET6)
+	{
+                if ((expinfo.reply_source.in6.s6_addr32[0] == 0) && (expinfo.reply_source.in6.s6_addr32[1] == 0) && (expinfo.reply_source.in6.s6_addr32[2] == 0) && (expinfo.reply_source.in6.s6_addr32[3] == 0))
                 {
                         printk("no reply_source found\n");
                         continue;   /* no udp transports found */
                 }
 
-	memset(replyaddr,'\0', 16);
-	memset(destaddr,'\0', 16);
-	sprintf(replyaddr, "%u.%u.%u.%u", NIPQUAD(expinfo.reply_source));
-	sprintf(destaddr, "%u.%u.%u.%u", NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip));
+		DEBUGP("Source check same  IPv6 %pI6 == %pI6\n ", expinfo.reply_source.ip6, ct->tuplehash[dir].tuple.src.u3.ip6);		
+		/*check the IPv6 addr and if same then continue .. */
+		if (ipv6_addr_cmp(&expinfo.reply_source.in6, &ct->tuplehash[dir].tuple.src.u3.in6) == 0)
+			continue;
+	}
+	else {
+                if (expinfo.reply_source.ip == 0)
+                {
+                        printk("no reply_source found\n");
+                        continue;   /* no udp transports found */
+                }
+
+		memset(replyaddr,'\0', 16);
+		memset(destaddr,'\0', 16);
+		sprintf(replyaddr, "%u.%u.%u.%u", NIPQUAD(expinfo.reply_source.ip));
+		sprintf(destaddr, "%u.%u.%u.%u", NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip));
 			
-	
 		if (strncmp(replyaddr, destaddr, 16) == 0) {
 		DEBUGP("replyaddr = %s , destaddr = %s %d , %d \n",replyaddr, destaddr , sizeof(replyaddr), sizeof(destaddr));
 			continue;
 		}
-	
+	}	
 		DEBUGP("udp transport found, ports=(%d,%hu,%hu) \n",
 				(int)expinfo.pbtype,
 				expinfo.loport,
@@ -659,18 +686,32 @@
 		expinfo.len = hdrslen; // added
         	exp->master = ct ;
 
-		if (expinfo.reply_source == 0) {
-			 exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
-			 DEBUGP("expinfo.reply_source is NULL \n");
-		}
-		else
-			exp->tuple.src.u3.ip = expinfo.reply_source;
+		if (expinfo.l3num == PF_INET6)
+		{
 
+                	if ((expinfo.reply_source.in6.s6_addr32[0] == 0) && (expinfo.reply_source.in6.s6_addr32[1] == 0) && (expinfo.reply_source.in6.s6_addr32[2] == 0) && (expinfo.reply_source.in6.s6_addr32[3] == 0) ) 
+			{
+			 	exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+			 	DEBUGP("expinfo.reply_source is NULL \n");
+			}
+			else {
+				ipv6_addr_copy(&exp->tuple.src.u3.in6, &expinfo.reply_source.in6);
+			}
+		}
+		else {	
+			if (expinfo.reply_source.ip == 0) {
+			 	exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+			 	DEBUGP("expinfo.reply_source is NULL \n");
+			}
+			else {
+				exp->tuple.src.u3.ip = expinfo.reply_source.ip;
+			}
+		}
 		//exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
 	   
 	    exp->tuple.src.u.tcp.port = 0;
 		
-	    exp->tuple.src.l3num = PF_INET ;
+	  //  exp->tuple.src.l3num = PF_INET ;
 		
 		exp->tuple.dst.u3 = ct->tuplehash[dir].tuple.dst.u3;
 
@@ -735,16 +776,34 @@
 
 			//exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
 
-                if (expinfo.reply_source == 0)
-                        exp1->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
-                else
-                        exp1->tuple.src.u3.ip = expinfo.reply_source;
 
+		if (expinfo.l3num == PF_INET6)
+		{
+                	if ((expinfo.reply_source.in6.s6_addr32[0] == 0) && (expinfo.reply_source.in6.s6_addr32[1] == 0) && (expinfo.reply_source.in6.s6_addr32[2] == 0) && (expinfo.reply_source.in6.s6_addr32[3] == 0) ) 
+			{
+                        	exp1->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+			 	DEBUGP("expinfo.reply_source is NULL \n");
+			}
+			else {
+				ipv6_addr_copy(&exp1->tuple.src.u3.in6, &expinfo.reply_source.in6);
+			}
+		}
+		else {	
+			if (expinfo.reply_source.ip == 0) {
+                        	exp1->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+			 	DEBUGP("expinfo.reply_source is NULL \n");
+			}
+			else {
+                        	exp1->tuple.src.u3.ip = expinfo.reply_source.ip;
+			}
+				
+				exp1->mask.src.u3.ip  = 0xffffffff; //orginal
+		}
 
-			exp1->mask.src.u3.ip  = 0xffffffff; //orginal
+                
 			exp1->tuple.src.u.tcp.port = 0;
 			exp1->mask.src.u.udp.port  = 0 ;
-			exp1->tuple.src.l3num = PF_INET ;
+			//exp1->tuple.src.l3num = PF_INET ;
 			//exp1->mask.src.l3num = 0xffff;
 			exp1->tuple.dst.u3 = ct->tuplehash[dir].tuple.dst.u3;
 			//exp1->mask.dst.u3.ip  = 0xffffffff;
@@ -757,8 +816,11 @@
 			exp1->flags = 0;
 			exp1->expectfn = expected;
 			ct1 = exp->master;
-			newip1 = ct1->tuplehash[dir].tuple.dst.u3.ip;
-			exp1->tuple.dst.u3.ip = newip1;
+			if (expinfo.l3num == PF_INET6)
+				ipv6_addr_copy(&exp1->tuple.dst.u3.in6, &ct1->tuplehash[dir].tuple.dst.u3.in6);
+			else
+				exp1->tuple.dst.u3.ip = ct1->tuplehash[dir].tuple.dst.u3.ip;
+
 			exp1->saved_proto.udp.port = exp1->tuple.dst.u.udp.port;
 			exp1->dir = dir;
 
@@ -794,9 +856,10 @@
 	//uint    tcplen = pktlen - iph->ihl * 4;
 	//char*   pdata = (char*)tcph + tcph->doff * 4;
 	//uint    datalen = tcplen - tcph->doff * 4
-      struct iphdr* iph = ip_hdr(skb); //(struct iphdr*)(*pskb)->nh.iph;
-      struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
+      //struct iphdr* iph = ip_hdr(skb); //(struct iphdr*)(*pskb)->nh.iph;
+//      struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
 
+	//struct tcphdr* th, _tcph;
 	struct nf_ct_rtsp_expect expinfo;
 	uint    dataoff = 0;
         char *pdata = rb_ptr;
@@ -848,6 +911,9 @@
 		memset(&expinfo, 0, sizeof(expinfo));
 
 		off = 0;
+		expinfo.l3num = nf_ct_l3num(ct) ;
+		memset (&expinfo.reply_source.in6, 0 , sizeof(struct in6_addr));
+		
 		while (nf_mime_nextline(pdata+hdrsoff, hdrslen, &off,
 					&lineoff, &linelen))
 		{
@@ -861,13 +927,14 @@
 				break;
 			}
 			 DEBUGP("hdr: len=%u, %.*s \n", (hdrslen), (int)(hdrslen), pdata+hdrsoff);
+
 			if (nf_strncasecmp(pdata+hdrsoff+lineoff, "Transport:", 10) == 0)
 			{
 				rtsp_parse_transport(pdata+hdrsoff+lineoff, linelen,
 						&expinfo);
 			}
 		}
-
+		
 		if (expinfo.loport == 0)
 		{
 			printk("no udp transports found\n");
@@ -900,10 +967,26 @@
 		expinfo.len = hdrslen; // added
         	exp->master = ct ;
 
-		if (expinfo.reply_source == 0)
-			exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
-		else
-			exp->tuple.src.u3.ip = expinfo.reply_source;
+                if (expinfo.l3num == PF_INET6)
+                {
+                        if ((expinfo.reply_source.in6.s6_addr32[0] == 0) && (expinfo.reply_source.in6.s6_addr32[1] == 0) && (expinfo.reply_source.in6.s6_addr32[2] == 0) && (expinfo.reply_source.in6.s6_addr32[3] == 0) )
+			{
+                                DEBUGP("expinfo.reply_source is NULL \n");
+				exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                        }
+                        else {
+                                ipv6_addr_copy(&exp->tuple.src.u3.in6, &expinfo.reply_source.in6);
+                        }
+                }
+                else {
+                        if (expinfo.reply_source.ip == 0) {
+				exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                                DEBUGP("expinfo.reply_source is NULL \n");
+                        }
+                        else {
+                                exp->tuple.src.u3.ip = expinfo.reply_source.ip;
+                        }
+                }
 
 		exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
 	   //	exp->mask.src.u3.ip  = 0xffffffff; //orginal
@@ -919,7 +1002,7 @@
 	    exp->tuple.src.u.tcp.port = 0;
 //		exp->mask.src.u.udp.port  = 0 ; 
 		
-	    exp->tuple.src.l3num = PF_INET ;
+	    //exp->tuple.src.l3num = PF_INET ;
 		//exp->mask.src.u.all = 0xffff;
 		
 		exp->tuple.dst.u3 = ct->tuplehash[dir].tuple.src.u3;
@@ -953,12 +1036,17 @@
 		expinfo.rtcp_dir = IP_CT_DIR_ORIGINAL;
 #endif
 
+	if (expinfo.l3num == PF_INET) {
 		DEBUGP("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u\n",
 				NIPQUAD(exp->tuple.src.u3.ip),
 				ntohs(exp->tuple.src.u.udp.port),
 				NIPQUAD(exp->tuple.dst.u3.ip),
 				ntohs(exp->tuple.dst.u.udp.port),expinfo.loport);
-                 
+            }else {
+			DEBUGP("Expect related IPv6 %pI6  : %u == %pI6 : %u\n ", exp->tuple.src.u3.ip6, exp->tuple.src.u.udp.port, exp->tuple.dst.u3.ip6, exp->tuple.dst.u.udp.port );
+			//ipv6_to_str(exp);
+	}
+
 #if 0 // IFX_TEST
    if(nf_conntrack_expect_related(exp) != 0)
    {
@@ -978,22 +1066,23 @@
 		//printk("Changing pskb --->skb 3 \n");
 
 		DEBUGP("whole HDR 22222 before nat : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
-                 if(nf_nat_rtsp)
-                 {
                  
+		if(nf_nat_rtsp && ct->status & IPS_NAT_MASK)
+                 {
                      /* pass the request off to the nat helper */
-                ret = nf_nat_rtsp(&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp, proto_nat_off);
-               // nf_conntrack_expect_related(exp); 
-		DEBUGP("whole HDR 333333 after NAT  : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
+                	ret = nf_nat_rtsp(&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp, proto_nat_off);
+			DEBUGP("whole HDR 333333 after NAT  : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
                 }
-                else if (nf_ct_expect_related(exp) != 0) {
-                printk("ip_conntrack_expect_related failed\n");
-                //ip_conntrack_expect_free(exp);
-               // ret  = NF_DROP;
+                else {
+
+		DEBUGP("No NAT for protocol = %d \n", expinfo.l3num);
+		if (nf_ct_expect_related(exp) != 0) {
+                	printk("ip_conntrack_expect_related failed\n");
 		}
-		// UNLOCK_BH(&ip_rtsp_lock);
-//test:
-                                                                                                                                                    
+		/* strip the transport field*/	
+			//ipv6_rtsp_trans_rem (&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp, proto_nat_off);
+		}
+
 //// For RTCP port
 			exp1 = nf_ct_expect_alloc(ct);
 			if (!exp1) { 
@@ -1008,17 +1097,32 @@
 					 IPPROTO_UDP, NULL, &(expinfo.loport));
 
 			//exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                if (expinfo.l3num == PF_INET6)
+                {
+                        if ((expinfo.reply_source.in6.s6_addr32[0] == 0) && (expinfo.reply_source.in6.s6_addr32[1] == 0) && (expinfo.reply_source.in6.s6_addr32[2] == 0) && (expinfo.reply_source.in6.s6_addr32[3] == 0) )
+			{
+                        	exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                                DEBUGP("expinfo.reply_source is NULL \n");
+                        }
+                        else {
+				ipv6_addr_copy(&exp1->tuple.src.u3.in6, &expinfo.reply_source.in6);
+                        }
+                }
+                else {
+                        if (expinfo.reply_source.ip == 0) {
+                        	exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                                DEBUGP("expinfo.reply_source is NULL \n");
+                        }
+                        else {
+                        	exp1->tuple.src.u3.ip = expinfo.reply_source.ip;
+                        }
+				
+				exp1->mask.src.u3.ip  = 0xffffffff; //orginal
+                }
 
-                if (expinfo.reply_source == 0)
-                        exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
-                else
-                        exp1->tuple.src.u3.ip = expinfo.reply_source;
-
-
-			exp1->mask.src.u3.ip  = 0xffffffff; //orginal
 			exp1->tuple.src.u.tcp.port = 0;
 			exp1->mask.src.u.udp.port  = 0 ;
-			exp1->tuple.src.l3num = PF_INET ;
+			//exp1->tuple.src.l3num = PF_INET ;
 			//exp1->mask.src.l3num = 0xffff;
 			exp1->tuple.dst.u3 = ct->tuplehash[dir].tuple.src.u3;
 			//exp1->mask.dst.u3.ip  = 0xffffffff;
@@ -1031,16 +1135,23 @@
 			exp1->flags = 0;
 			exp1->expectfn = expected;
 			ct1 = exp->master;
-			newip1 = ct1->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3.ip;
-			exp1->tuple.dst.u3.ip = newip1;
+			if (expinfo.l3num == PF_INET6)
+				ipv6_addr_copy(&exp1->tuple.dst.u3.in6, &ct1->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3.in6);
+			else
+				exp1->tuple.dst.u3.ip = ct1->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3.ip;
+
 			exp1->saved_proto.udp.port = exp1->tuple.dst.u.udp.port;
 			exp1->dir = !dir;
 
+	if (expinfo.l3num == PF_INET) {
 		DEBUGP("expect_related_RTCP %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u\n",
-				NIPQUAD(exp->tuple.src.u3.ip),
-				ntohs(exp->tuple.src.u.udp.port),
-				NIPQUAD(exp->tuple.dst.u3.ip),
-				ntohs(exp->tuple.dst.u.udp.port),expinfo.loport);
+				NIPQUAD(exp1->tuple.src.u3.ip),
+				ntohs(exp1->tuple.src.u.udp.port),
+				NIPQUAD(exp1->tuple.dst.u3.ip),
+				ntohs(exp1->tuple.dst.u.udp.port),expinfo.loport);
+	} else {
+			DEBUGP("Expect related RTCP IPv6 %pI6  : %u == %pI6 : %u\n ", exp1->tuple.src.u3.ip6, exp1->tuple.src.u.udp.port, exp1->tuple.dst.u3.ip6, exp1->tuple.dst.u.udp.port );
+	}
 	
 		if (nf_ct_expect_related(exp1) != 0) {
 			nf_ct_expect_insert_rtcp(exp1);
@@ -1243,14 +1354,16 @@
 	proto_nat_off = protoff;
         th = skb_header_pointer(skb, protoff,
                             sizeof(_tcph), &_tcph);
-      if (!th)
+      if (!th) {
              return NF_ACCEPT;
-
+	}
     /* No data ? */
 	dataoff = protoff + th->doff*4;
 	datalen = skb->len - dataoff;
-	if (dataoff >= skb->len)
+	
+	if (dataoff >= skb->len) {
             return NF_ACCEPT;
+	}
 
     	//spin_lock_bh(&rtsp_buffer_lock);
     	rb_ptr = skb_header_pointer(skb, dataoff,
@@ -1277,15 +1390,12 @@
 	switch (CTINFO2DIR(ctinfo))
 	{
 		case IP_CT_DIR_ORIGINAL:
-			
-			//help_out(iph, pktlen, ct, ctinfo);
+			DEBUGP("Calling help_out ********* \n");
                         ret = help_out(skb, rb_ptr, datalen, ct, ctinfo);
 			break;
 		case IP_CT_DIR_REPLY:
 			DEBUGP("Calling help_in ********* \n");
 			ret = help_in(skb, rb_ptr, datalen, ct, ctinfo);
-			 //ret = help_in(pskb, datalen, ct, ctinfo);
-			 //return NF_ACCEPT;
 			break;
 		default:
 			/* oops */
@@ -1296,8 +1406,9 @@
 }
 
 #ifndef IFX_RTSP_NAT_ALG
-static struct nf_conntrack_helper rtsp_helpers[MAX_PORTS];
-static char rtsp_names[MAX_PORTS][10];
+static struct nf_conntrack_helper rtsp_helpers[MAX_PORTS][2];
+static char rtsp_names[MAX_PORTS][10][sizeof("rtsp-65535")];
+//static char rtsp_names[MAX_PORTS][10];
 static struct nf_conntrack_expect_policy rtsp_expect_policy;
 #endif
 
@@ -1306,11 +1417,18 @@
 fini(void)
 {
 #ifndef IFX_RTSP_NAT_ALG
-	int i;
+	int i, j;
 	for (i = 0; i < num_ports; i++)
 	{
-		DEBUGP("unregistering port %d\n", ports[i]);
-		nf_conntrack_helper_unregister(&rtsp_helpers[i]);
+		for (j = 0; j < 2; j++) {
+			if (rtsp_helpers[i][j].me == NULL)
+				continue;
+
+                        DEBUGP("nf_ct_rtsp: unregistering helper for pf: %d "
+                                 "port: %d\n",
+                                 rtsp_helpers[i][j].tuple.src.l3num, ports[i]);
+			nf_conntrack_helper_unregister(&rtsp_helpers[i][j]);
+		}
 	}
 
 #else
@@ -1354,23 +1472,21 @@
 	int  ret;
 
 #ifndef IFX_RTSP_NAT_ALG
-
-	struct nf_conntrack_helper *hlpr;
 	char *tmpname;
-	int i = 0;
+	int i = 0 , j = -1;
 
 #endif
 
-	printk("ip_conntrack_rtsp v" IP_NF_RTSP_VERSION " loading\n");
+	printk("nf_conntrack_rtsp v" IP_NF_RTSP_VERSION " loading\n");
 
 	if (max_outstanding < 1)
 	{
-		printk("ip_conntrack_rtsp: max_outstanding must be a positive integer\n");
+		printk("nf_conntrack_rtsp: max_outstanding must be a positive integer\n");
 		return -EBUSY;
 	}
 	if (setup_timeout < 0)
 	{
-		printk("ip_conntrack_rtsp: setup_timeout must be a positive integer\n");
+		printk("nf_conntrack_rtsp: setup_timeout must be a positive integer\n");
 		return -EBUSY;
 	}
 #ifndef IFX_RTSP_NAT_ALG
@@ -1386,43 +1502,41 @@
 
 	for (i = 0; (i < MAX_PORTS) && ports[i]; i++)
 	{
-		hlpr = &rtsp_helpers[i];
-		memset(hlpr, 0, sizeof(struct nf_conntrack_helper));
-    		 hlpr->tuple.src.l3num = PF_INET;
-                //hlpr->mask.src.l3num = 0xFFFF;
-		hlpr->tuple.src.u.tcp.port = htons(ports[i]);
-		hlpr->tuple.dst.protonum = IPPROTO_TCP;
-		//hlpr->mask.src.u.tcp.port = 0xFFFF;
-		//hlpr->mask.dst.protonum = 0xFF;
-//		hlpr->max_expected = max_outstanding;
-//		hlpr->timeout = setup_timeout;
-		//hlpr->flags = IP_CT_HELPER_F_REUSE_EXPECT;
-		hlpr->expect_policy = &rtsp_expect_policy;
-		hlpr->me = THIS_MODULE;
-		hlpr->help = help;
+    		rtsp_helpers[i][0].tuple.src.l3num = PF_INET;
+    		rtsp_helpers[i][1].tuple.src.l3num = PF_INET6;
+		for (j = 0; j < 2; j++) {	
+			rtsp_helpers[i][j].tuple.src.u.tcp.port = htons(ports[i]);
+			rtsp_helpers[i][j].tuple.dst.protonum = IPPROTO_TCP;
+			rtsp_helpers[i][j].expect_policy = &rtsp_expect_policy;
+			rtsp_helpers[i][j].me = THIS_MODULE;
+			rtsp_helpers[i][j].help = help;
 
-		tmpname = &rtsp_names[i][0];
-		if (ports[i] == RTSP_PORT)
-		{
-			sprintf(tmpname, "rtsp");
-		}
-		else
-		{
-			sprintf(tmpname, "rtsp-%d", i);
-		}
-		hlpr->name = tmpname;
+			tmpname = &rtsp_names[i][j][0];
+			if (ports[i] == RTSP_PORT)
+			{
+				sprintf(tmpname, "rtsp");
+			}	
+			else
+			{
+				sprintf(tmpname, "rtsp-%d", i);
+			}
+				rtsp_helpers[i][j].name = tmpname;
 
-		DEBUGP("port #%d: %d\n", i, ports[i]);
+			DEBUGP("nf_ct_rtsp: registering helper for pf: %d "
+                                 "port: %d\n",
+                                 rtsp_helpers[i][j].tuple.src.l3num, ports[i]);
 
-		ret = nf_conntrack_helper_register(hlpr);
+			ret = nf_conntrack_helper_register(&rtsp_helpers[i][j]);
 
-		if (ret)
-		{
-			printk("nf_conntrack_rtsp: ERROR registering port %d\n", ports[i]);
-			fini();
-			return -EBUSY;
-		}
-		num_ports++;
+			if (ret)
+			{
+				printk("nf_conntrack_rtsp: ERROR registering for pf %d  port %d\n", 
+				rtsp_helpers[i][j].tuple.src.l3num, ports[i]);
+				fini();
+				return -EBUSY;
+			}
+			num_ports++;
+	    	}
 	}
 #else
 #warning IFX_RTSP_NAT_ALG
