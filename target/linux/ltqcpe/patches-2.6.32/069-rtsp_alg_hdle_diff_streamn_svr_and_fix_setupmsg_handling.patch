Index: linux-2.6.32.32/include/linux/netfilter/nf_conntrack_rtsp.h
===================================================================
--- linux-2.6.32.32.orig/include/linux/netfilter/nf_conntrack_rtsp.h
+++ linux-2.6.32.32/include/linux/netfilter/nf_conntrack_rtsp.h
@@ -66,6 +66,7 @@ struct nf_ct_rtsp_expect
     u_int16_t nat_rtp_port;  /* Translated loport for RTP */
     u_int16_t nat_rtcp_port; /* Translated hiport for RTCP if applicable */
     /* ] End changes */
+    u_int32_t reply_source; /* Store source information from the REPLY message*/
 };
 
 /* This structure exists only once per master */
@@ -81,7 +82,7 @@ extern unsigned int (*nf_nat_rtsp_hook)(
                                  enum ip_conntrack_info ctinfo,
 				 unsigned int matchoff, unsigned int matchlen,
                                  struct nf_ct_rtsp_expect *expinfo,
-                                 struct nf_conntrack_expect *exp);
+                                 struct nf_conntrack_expect *exp, unsigned int protoff);
 
 
 extern void (*nf_nat_rtsp_hook_expectfn)(struct nf_conn *ct, struct nf_conntrack_expect *exp);
Index: linux-2.6.32.32/net/ipv4/netfilter/nf_nat_rtsp.c
===================================================================
--- linux-2.6.32.32.orig/net/ipv4/netfilter/nf_nat_rtsp.c
+++ linux-2.6.32.32/net/ipv4/netfilter/nf_nat_rtsp.c
@@ -43,6 +43,7 @@
 #include <linux/netfilter/nf_conntrack_rtsp.h>
 #include <net/netfilter/nf_conntrack_helper.h>
 #include <net/netfilter/nf_conntrack_expect.h>
+#include <net/netfilter/nf_conntrack_ecache.h>
 
 //#include <linux/netfilter_ipv4/ip_conntrack.h>
 
@@ -114,7 +115,10 @@ static int       num_ports = 0;
 
 #endif*/
 
-
+char *rb_ptr1;
+unsigned int dataoff1, datalen1;
+static char rtsp_buffer1[65536];
+char *pdata1;
 
 static char *    stunaddr = NULL;
 static char *    destaction = NULL;
@@ -261,17 +265,25 @@ rtsp_mangle_tran(struct nf_conn *ct, enu
  //       ct = exp->master; //added
 	//struct sk_buff* skb_test;
       //    struct nf_conntrack_expect *exp1;
-int dir = CTINFO2DIR(ctinfo); 
+	int dir = CTINFO2DIR(ctinfo); 
 
 	char    szextaddr[15+1];
 	uint    extaddrlen;
 	int     is_stun;
-       
+     
+	int off_adj = 0 ;
+	struct nf_conn_nat *nat; //= nfct_nat(ct);
+	struct nf_nat_seq *this_way;
+
       DEBUGP(" INSIDE MANGLE  TRANS \n");
  
          ct = exp->master; //added
 	get_skb_tcpdata(*pskb, &ptcp, &tcplen);
 	ptran = ptcp+tranoff;
+	
+	nat = nfct_nat(ct);
+
+	 //DEBUGP("whole HDR INSIDE rtsp_mangle_tran 1111111 : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
 
 	if (tranoff+tranlen > tcplen || tcplen-tranoff < tranlen ||
 			tranlen < 10 || !iseol(ptran[tranlen-1]) ||
@@ -283,7 +295,10 @@ int dir = CTINFO2DIR(ctinfo); 
 	off += 10;
 	SKIP_WSPACE(ptcp+tranoff, tranlen, off);
 
+	DEBUGP("T1 tran='%.*s'\n", (int)tranlen, ptran);
+	 DEBUGP("T1 hdr: len=%u, %.*s \n", tranlen, (int)tranlen, ptcp+tranoff);
 
+	 DEBUGP("whole HDR INSIDE rtsp_mangle_tran 222222 : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
 #if 0
 
        exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
@@ -334,6 +349,7 @@ int dir = CTINFO2DIR(ctinfo); 
 
 exp->expectfn = nf_nat_follow_master;
 
+DEBUGP("whole HDR INSIDE rtsp_mangle_tran 333333 : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
 
 DEBUGP("expect_NAT %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",
              NIPQUAD(exp->tuple.src.u3.ip),
@@ -538,6 +554,8 @@ exp->dir = !dir;
 	} else 
 		DEBUGP("This is NOT RTCP request to port %d\n",prtspexp->loport);
 #endif
+	 DEBUGP("T2 hdr: len=%u, %.*s \n", tranlen, (int)tranlen, ptcp+tranoff);
+	 DEBUGP("whole HDR INSIDE rtsp_mangle_tran 444444 : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
 //	skb_test = *pskb;
 	/* Transport: tran;field;field=val,tran;field;field=val,... */
 	while (off < tranlen)
@@ -575,12 +593,18 @@ exp->dir = !dir;
 				if (dstact == DSTACT_STRIP || (dstact == DSTACT_AUTO && !is_stun))
 				{
 					diff = nextfieldoff-off;
+	DEBUGP("whole HDR INSIDE rtsp_mangle_tran 444444.3333 : len=%u, %.*s , off = %ld , diff= %ld, nextfieldoff = %ld, pfieldend=%ld, nextparamoff= %ld, tranlen =%ld , %ld , %ld,  %ld, %ld \n", (datalen1), (int)(datalen1), pdata1, off, diff, nextfieldoff , pfieldend, nextparamoff, tranlen, ((pdata1+datalen1) - ptran), datalen1 - ( (pdata1+datalen1) - ptran), tranoff, ((ptran-ptcp)+off) );
+			/* issue : corrupts the packet*/
+					 uint off_mangle = (ptran-ptcp)+off; //(datalen1 - ( (pdata1+datalen1) - ptran));
+					 off_adj -= diff ;
+					
 					if (!nf_nat_mangle_tcp_packet(*pskb, ct, ctinfo,
-								off, diff, NULL, 0))
+								(off_mangle), diff, NULL, 0))
 					{
 						/* mangle failed, all we can do is bail */
 						return 0;
 					}
+	DEBUGP("whole HDR INSIDE rtsp_mangle_tran 444444.444444 : len=%u, %.*s %d \n", (datalen1), (int)(datalen1), pdata1,off_adj);
 					get_skb_tcpdata(*pskb, &ptcp, &tcplen);
 					ptran = ptcp+tranoff;
 					tranlen -= diff;
@@ -653,6 +677,7 @@ exp->dir = !dir;
 						nf_ct_unexpect_related(exp);
 						return 0;
 					}
+		DEBUGP("whole HDR INSIDE rtsp_mangle_tran 88888 : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
 					get_skb_tcpdata(*pskb, &ptcp, &tcplen);
 					ptran = ptcp+tranoff;
 					tranlen -= diff;
@@ -667,6 +692,19 @@ exp->dir = !dir;
 		off = nextparamoff;
 	}
 
+	this_way = &nat->seq[dir];
+	if (this_way->offset_after != off_adj) {
+		printk ("inside ----------------- corpos %d %d \n", off_adj, this_way->offset_after);
+		this_way->offset_after = off_adj;
+		
+		nf_conntrack_event_cache(IPCT_NATSEQADJ, ct);
+
+        	  //nf_conntrack_tcp_update(*pskb, (*pskb)->nh.iph->ihl*4,  ct, CTINFO2DIR(ctinfo));
+	
+		 //nf_proto_csum_replace2(&tcph->check, *pskb,  htons(oldlen), htons(datalen), 1);
+	}	
+
+ DEBUGP("whole HDR INSIDE rtsp_mangle_tran 100000 : len=%u, %.*s , %d , %d \n", (datalen1), (int)(datalen1), pdata1, off_adj,this_way->offset_after);
         DEBUGP(" outside MANGLE  TRANS \n");
 	return 1;
 }
@@ -875,16 +913,17 @@ help_out(struct sk_buff **pskb, enum ip_
     off = hdrsoff;
 
 
-  DEBUGP("\n help-OUT %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u\n",
+  DEBUGP("\n help-OUT %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u, %u , %u\n",
                   NIPQUAD(exp->tuple.src.u3.ip),
                  ntohs(exp->tuple.src.u.udp.port),
                  NIPQUAD(exp->tuple.dst.u3.ip),
-             ntohs(exp->tuple.dst.u.udp.port),prtspexp->loport);
+             ntohs(exp->tuple.dst.u.udp.port),prtspexp->loport, hdrslen, matchlen);
 
 
 
  DEBUGP(" INSIDE 2 nat help_out  \n");
-
+ DEBUGP("whole HDR 22222.11111 before nat : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
+ DEBUGP("whole HDR 22222.11111 before nat : len=%u, %.*s \n", (tcplen), (int)(tcplen), ptcp);
     while (nf_mime_nextline(ptcp, hdrsoff+hdrslen, &off, &lineoff, &linelen))
     {
         if (linelen == 0)
@@ -898,15 +937,19 @@ help_out(struct sk_buff **pskb, enum ip_
         }
 
        DEBUGP(" INSIDE 3 nat help_out  \n");
-        DEBUGP("hdr: len=%u, %.*s \n", linelen, (int)linelen, ptcp+lineoff);
+	 DEBUGP("whole HDR 22222.222222 before nat : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
+	DEBUGP("hdr: len=%u, %.*s \n", linelen, (int)linelen, ptcp+lineoff);
 
         if (nf_strncasecmp(ptcp+lineoff, "Transport:", 10) == 0)
         {
             uint oldtcplen = tcplen;
+	 DEBUGP("whole HDR 22222.******************** before nat : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
             if (!rtsp_mangle_tran(ct, ctinfo, exp, prtspexp, pskb, lineoff, linelen))
             {
                 break;
             }
+	    DEBUGP(" after mangle hdr: len=%u, %.*s \n", linelen, (int)linelen, ptcp+lineoff);
+	 DEBUGP("whole HDR 22222.******************** before nat : len=%u, %.*s \n", (datalen1), (int)(datalen1), pdata1);
             get_skb_tcpdata(*pskb, &ptcp, &tcplen);
             hdrslen -= (oldtcplen-tcplen);
 	    off -= (oldtcplen-tcplen);
@@ -1022,13 +1065,37 @@ nf_nat_rtsp(struct sk_buff **pskb,
      enum ip_conntrack_info ctinfo,
     unsigned int matchoff, unsigned int matchlen,
      struct nf_ct_rtsp_expect *ct_rtsp_info,
-     struct nf_conntrack_expect *exp)
+     struct nf_conntrack_expect *exp, unsigned int protoff_nat)
 {
 //    struct iphdr*  iph  = (struct iphdr*)(*pskb)->nh.iph;
    // struct tcphdr* tcph = (struct tcphdr*)((char*)iph + iph->ihl * 4);
    // uint datalen;
     int dir = CTINFO2DIR(ctinfo);
     int rc = NF_ACCEPT;
+   /***********************************************/
+	 //char *rb_ptr;
+	 struct tcphdr _tcph, *th;
+	 //unsigned int dataoff, datalen;
+	
+     DEBUGP(" INSIDE nf_nat_rtsp 1  \n"); 
+	 th = skb_header_pointer(*pskb, protoff_nat, sizeof(_tcph), &_tcph);
+	if (!th)
+		return NF_ACCEPT;
+	dataoff1 = protoff_nat + th->doff*4;
+	datalen1 = (*pskb)->len - dataoff1;
+	if (dataoff1 >= (*pskb)->len)
+		return NF_ACCEPT;
+ 
+     DEBUGP(" INSIDE nf_nat_rtsp 2 \n"); 
+	// get_skb_tcpdata(*pskb, &dataoff1, &datalen1);
+	
+	rb_ptr1 = skb_header_pointer(*pskb, dataoff1, (*pskb)->len - dataoff1, rtsp_buffer1);
+
+	BUG_ON(rb_ptr1 == NULL);
+
+	pdata1 = rb_ptr1;
+
+   /***********************************************/
     exp_driver_info = ct_rtsp_info;
      DEBUGP(" INSIDE nf_nat_rtsp  \n"); 
     switch (dir)
Index: linux-2.6.32.32/net/netfilter/nf_conntrack_rtsp.c
===================================================================
--- linux-2.6.32.32.orig/net/netfilter/nf_conntrack_rtsp.c
+++ linux-2.6.32.32/net/netfilter/nf_conntrack_rtsp.c
@@ -141,11 +141,12 @@ struct module* nf_conntrack_rtsp = THIS_
 #ifndef IFX_RTSP_NAT_ALG
 static char rtsp_buffer[65536];
 //static DEFINE_SPINLOCK(rtsp_buffer_lock);
+unsigned int proto_nat_off ;
 unsigned int (*nf_nat_rtsp_hook)(struct sk_buff **pskb,
                                  enum ip_conntrack_info ctinfo,
 				 unsigned int matchoff, unsigned int matchlen,
                                  struct nf_ct_rtsp_expect *expinfo,
-                                 struct nf_conntrack_expect *exp);
+                                 struct nf_conntrack_expect *exp, unsigned int protoff);
 
 void (*nf_nat_rtsp_hook_expectfn)(struct nf_conn *ct, struct nf_conntrack_expect *exp);
 
@@ -300,7 +301,7 @@ rtsp_parse_transport(char* ptran, uint t
 {
 	int     rc = 0;
 	uint    off = 0;
-
+	char    szextaddr1[15+1];
 
 	if (tranlen < 10 || !iseol(ptran[tranlen-1]) ||
 			nf_strncasecmp(ptran, "Transport:", 10) != 0)
@@ -386,6 +387,41 @@ rtsp_parse_transport(char* ptran, uint t
 			 * and the client is sending packets elsewhere, the expectation
 			 * will quietly time out.
 			 */
+			// DEBUGP("tran1111='%.*s'\n", (int)tranlen, ptran);
+
+			if (strncmp(ptran+off, "source=", 7) == 0)
+			{
+				//off +=7;
+				 u_int32_t   addr32;
+				 uint len32;
+
+				 DEBUGP("tran=222'%.*s', %d, %d, %d, %d\n", (int)tranlen, ptran, ptran+off+7, nextparamoff, nextfieldoff, tranlen);
+
+				 //len32 = nf_strtou32(ptran+off+7, &addr32);
+
+				 //DEBUGP("tran=222'%.*s', %d, %d, %d, %d\n", (int)tranlen, ptran, ptran+off+7, nextparamoff, nextfieldoff, tranlen, len32);
+
+				//DEBUGP("SOURCE1  %u.%u.%u.%u, %s , %u ,%u, %u \n",
+			        //     NIPQUAD(prtspexp->reply_source), szextaddr1, nextparamoff, nextfieldoff, off);
+			/*	
+				memset(szextaddr1,'\0',16);
+				strncpy(szextaddr1, ptran+off+7, ((nextfieldoff - (off + 7)-2)));
+				prtspexp->reply_source = in_aton(szextaddr1);
+				DEBUGP("SOURCE1  %u.%u.%u.%u, %s , %u ,%u, %u \n",
+			             NIPQUAD(prtspexp->reply_source), szextaddr1, nextparamoff, nextfieldoff, off);
+			*/
+
+				memset(szextaddr1,'\0',16);
+			if (nextfieldoff == nextparamoff)
+				strncpy(szextaddr1, ptran+off+7, ((nextfieldoff - (off + 7)-2)));
+			else
+				strncpy(szextaddr1, ptran+off+7, ((nextfieldoff - (off + 7)-1)));
+
+				prtspexp->reply_source = in_aton(szextaddr1);	
+				DEBUGP("SOURCE1  %u.%u.%u.%u, %s , %u ,%u, %u \n",
+			             NIPQUAD(prtspexp->reply_source), szextaddr1, nextparamoff, nextfieldoff, off);
+
+			}
 
 			off = nextfieldoff;
 		}
@@ -485,6 +521,266 @@ static void expected(struct nf_conn *ct,
 }                                                                                                                                                    
   
 
+/*** conntrack functions ***/
+
+/* inbound packet: server->client */
+int
+help_in(struct sk_buff *skb,unsigned char *rb_ptr,unsigned int datalen,
+		struct nf_conn* ct, enum ip_conntrack_info ctinfo)
+{
+	int dir = CTINFO2DIR(ctinfo);   /* = IP_CT_DIR_ORIGINAL */
+      struct iphdr* iph = ip_hdr(skb); //(struct iphdr*)(*pskb)->nh.iph;
+      struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
+
+	struct nf_ct_rtsp_expect expinfo;
+	uint    dataoff = 0;
+        char *pdata = rb_ptr;
+	struct nf_conntrack_expect *exp, *exp1;
+         int ret = NF_ACCEPT;
+//	typeof(nf_nat_rtsp_hook) nf_nat_rtsp;
+
+	struct sk_buff *pskb;
+         struct nf_conn *ct1;                                                                                                             
+         u_int32_t   newip1;
+	char    replyaddr[15+1];
+	char    destaddr[15+1];
+
+   DEBUGP("dir %u\n", dir);
+
+
+#ifdef CONFIG_IFX_ALG_QOS //  Suresh
+
+
+	ct->ifx_alg_qos_mark = IFX_ALG_APP_RTSP;
+	DEBUGP ("\nRTSP_ALG: help_out marked ct->ifx_alg_qos_mark to : %x ***\n",
+							                                ct->ifx_alg_qos_mark );
+#endif
+	 //nf_nat_seq_adjust (pskb, ct, ctinfo);
+	
+	while (dataoff < datalen)
+	{
+		uint    cmdoff = dataoff;
+		uint    hdrsoff = 0;
+		uint    hdrslen = 0;
+		uint    cseqoff = 0;
+		uint    cseqlen = 0;
+		uint    lineoff = 0;
+		uint    linelen = 0;
+		uint    off;
+
+		if (!rtsp_parse_message(pdata, datalen, &dataoff,
+					&hdrsoff, &hdrslen,
+					&cseqoff, &cseqlen))
+		{
+			DEBUGP("[%s]:[%d]\n", __FUNCTION__, __LINE__);
+			break;      /* not a valid message */
+		}
+		
+		/* DEBUGP(" rb_ptr = ||%s|| \n", rb_ptr); */
+
+		if (strncmp(pdata+cmdoff, "RTSP/", 5) != 0)
+		{
+			DEBUGP("[%s]:[%d]\n", __FUNCTION__, __LINE__);
+			continue;   /* not a SETUP message */
+		}
+
+		DEBUGP("found a Reply message\n");
+
+
+		memset(&expinfo, 0, sizeof(expinfo));
+
+		off = 0;
+		while (nf_mime_nextline(pdata+hdrsoff, hdrslen, &off,
+					&lineoff, &linelen))
+		{
+			if (linelen == 0)
+			{
+				break;
+			}
+			if (off > hdrsoff+hdrslen)
+			{
+				//INFOP("!! overrun !!");
+				break;
+			}
+
+			if (nf_strncasecmp(pdata+hdrsoff+lineoff, "Transport:", 10) == 0)
+			{
+				rtsp_parse_transport(pdata+hdrsoff+lineoff, linelen,
+						&expinfo);
+			}
+		}
+
+		if (expinfo.loport == 0)
+		{
+			printk("no udp transports found\n");
+			continue;   /* no udp transports found */
+		}
+
+                if (expinfo.reply_source == 0)
+                {
+                        printk("no reply_source found\n");
+                        continue;   /* no udp transports found */
+                }
+
+	memset(replyaddr,'\0', 16);
+	memset(destaddr,'\0', 16);
+	sprintf(replyaddr, "%u.%u.%u.%u", NIPQUAD(expinfo.reply_source));
+	sprintf(destaddr, "%u.%u.%u.%u", NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip));
+			
+	
+		if (strncmp(replyaddr, destaddr, 16) == 0) {
+		DEBUGP("replyaddr = %s , destaddr = %s %d , %d \n",replyaddr, destaddr , sizeof(replyaddr), sizeof(destaddr));
+			continue;
+		}
+	
+		DEBUGP("udp transport found, ports=(%d,%hu,%hu) \n",
+				(int)expinfo.pbtype,
+				expinfo.loport,
+				expinfo.hiport);
+
+
+		exp = nf_ct_expect_alloc(ct);
+		        if (!exp) {
+                		ret = NF_DROP;
+		                goto out;
+			         }
+
+
+		//LOCK_BH(&ip_rtsp_lock);
+		spin_lock_bh(&ip_rtsp_lock);
+	
+		nf_ct_expect_init(exp, NF_CT_EXPECT_CLASS_DEFAULT,
+				ct->tuplehash[dir].tuple.src.l3num,
+				&ct->tuplehash[dir].tuple.src.u3,
+				&ct->tuplehash[dir].tuple.dst.u3,
+				IPPROTO_UDP, NULL, &(expinfo.loport));
+
+		 //exp->id = ntohl(tcph->seq) + hdrsoff; /* mark all the headers */ //added
+		expinfo.len = hdrslen; // added
+        	exp->master = ct ;
+
+		if (expinfo.reply_source == 0) {
+			 exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+			 DEBUGP("expinfo.reply_source is NULL \n");
+		}
+		else
+			exp->tuple.src.u3.ip = expinfo.reply_source;
+
+		//exp->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+	   
+	    exp->tuple.src.u.tcp.port = 0;
+		
+	    exp->tuple.src.l3num = PF_INET ;
+		
+		exp->tuple.dst.u3 = ct->tuplehash[dir].tuple.dst.u3;
+
+		if (expinfo.pbtype == pb_range) {
+		//	printk("Changing expectation mask to handle multiple ports\n");
+		//	exp->mask.src.u.udp.port  = 0xfffe;  // commented for
+		//	testing : desai
+		}
+
+		exp->tuple.dst.protonum = IPPROTO_UDP;
+        
+		exp->helper = NULL;
+		exp->flags = 0;
+		exp->expectfn = expected; //NULL; //testing : desai
+
+        expinfo.hiport = expinfo.loport + 1 ;
+		
+		//Nirav
+#ifdef CONFIG_IFX_ALG_QOS
+		exp->expectfn =  rtsp_expect;
+		//exp.help.exp_rtsp_info.rtcp_dir = IP_CT_DIR_ORIGINAL; //check out 
+		//exp->helper = &transport_helper;
+
+		exp->master->rtcp_expect_registered = 2 ;
+		expinfo.rtcp_dir = IP_CT_DIR_ORIGINAL;
+#endif
+
+		DEBUGP("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u\n",
+				NIPQUAD(exp->tuple.src.u3.ip),
+				ntohs(exp->tuple.src.u.udp.port),
+				NIPQUAD(exp->tuple.dst.u3.ip),
+				ntohs(exp->tuple.dst.u.udp.port),expinfo.loport);
+                 
+				 
+//		nf_nat_rtsp = rcu_dereference(nf_nat_rtsp_hook);
+
+//		pskb = (struct sk_buff *)skb;
+
+             //    if(nf_nat_rtsp)
+               //  {
+                     /* pass the request off to the nat helper */
+                //	ret = nf_nat_rtsp(&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp);
+
+              //  }
+                if (nf_ct_expect_related(exp) != 0) {
+                	printk("ip_conntrack_expect_related failed\n");
+			nf_ct_expect_insert_rtcp(exp);
+		}
+		// UNLOCK_BH(&ip_rtsp_lock);
+//// For RTCP port
+			exp1 = nf_ct_expect_alloc(ct);
+			if (!exp1) { 
+				ret = NF_DROP;
+				goto out;
+			}
+			expinfo.loport += 1;
+			nf_ct_expect_init(exp1, NF_CT_EXPECT_CLASS_DEFAULT,
+					 ct->tuplehash[dir].tuple.src.l3num,
+					 &ct->tuplehash[dir].tuple.src.u3,
+					 &ct->tuplehash[dir].tuple.dst.u3,
+					 IPPROTO_UDP, NULL, &(expinfo.loport));
+
+			//exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+
+                if (expinfo.reply_source == 0)
+                        exp1->tuple.src.u3 = ct->tuplehash[dir].tuple.src.u3;
+                else
+                        exp1->tuple.src.u3.ip = expinfo.reply_source;
+
+
+			exp1->mask.src.u3.ip  = 0xffffffff; //orginal
+			exp1->tuple.src.u.tcp.port = 0;
+			exp1->mask.src.u.udp.port  = 0 ;
+			exp1->tuple.src.l3num = PF_INET ;
+			//exp1->mask.src.l3num = 0xffff;
+			exp1->tuple.dst.u3 = ct->tuplehash[dir].tuple.dst.u3;
+			//exp1->mask.dst.u3.ip  = 0xffffffff;
+			exp1->tuple.dst.u.udp.port = htons(expinfo.loport);
+			//exp1->mask.dst.u.udp.port  = 0xffff;
+			exp1->tuple.dst.protonum = IPPROTO_UDP;
+			//exp1->mask.dst.protonum  = 0xff;
+			expinfo.pbtype = pb_single;
+			exp1->helper = NULL;
+			exp1->flags = 0;
+			exp1->expectfn = expected;
+			ct1 = exp->master;
+			newip1 = ct1->tuplehash[dir].tuple.dst.u3.ip;
+			exp1->tuple.dst.u3.ip = newip1;
+			exp1->saved_proto.udp.port = exp1->tuple.dst.u.udp.port;
+			exp1->dir = dir;
+
+		DEBUGP("expect_related_RTCP %u.%u.%u.%u:%u-%u.%u.%u.%u:%u    %u\n",
+				NIPQUAD(exp1->tuple.src.u3.ip),
+				ntohs(exp1->tuple.src.u.udp.port),
+				NIPQUAD(exp1->tuple.dst.u3.ip),
+				ntohs(exp1->tuple.dst.u.udp.port),expinfo.loport);
+	
+		if (nf_ct_expect_related(exp1) != 0) {
+			nf_ct_expect_insert_rtcp(exp1);
+		}
+
+		spin_unlock_bh(&ip_rtsp_lock);
+		
+		nf_ct_expect_put(exp);
+		goto out;
+	}
+ 
+out:
+          return ret;
+}
 
 /*** conntrack functions ***/
 
@@ -547,6 +843,7 @@ help_out(struct sk_buff *skb,unsigned ch
 			continue;   /* not a SETUP message */
 		}
 		DEBUGP("found a setup message\n");
+		DEBUGP("whole HDR : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
 
 		memset(&expinfo, 0, sizeof(expinfo));
 
@@ -563,7 +860,7 @@ help_out(struct sk_buff *skb,unsigned ch
 				//INFOP("!! overrun !!");
 				break;
 			}
-
+			 DEBUGP("hdr: len=%u, %.*s \n", (hdrslen), (int)(hdrslen), pdata+hdrsoff);
 			if (nf_strncasecmp(pdata+hdrsoff+lineoff, "Transport:", 10) == 0)
 			{
 				rtsp_parse_transport(pdata+hdrsoff+lineoff, linelen,
@@ -603,6 +900,11 @@ help_out(struct sk_buff *skb,unsigned ch
 		expinfo.len = hdrslen; // added
         	exp->master = ct ;
 
+		if (expinfo.reply_source == 0)
+			exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+		else
+			exp->tuple.src.u3.ip = expinfo.reply_source;
+
 		exp->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
 	   //	exp->mask.src.u3.ip  = 0xffffffff; //orginal
 	  
@@ -675,13 +977,14 @@ help_out(struct sk_buff *skb,unsigned ch
 
 		//printk("Changing pskb --->skb 3 \n");
 
+		DEBUGP("whole HDR 22222 before nat : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
                  if(nf_nat_rtsp)
                  {
                  
                      /* pass the request off to the nat helper */
-                ret = nf_nat_rtsp(&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp);
+                ret = nf_nat_rtsp(&pskb, ctinfo, hdrsoff, hdrslen, &expinfo, exp, proto_nat_off);
                // nf_conntrack_expect_related(exp); 
-
+		DEBUGP("whole HDR 333333 after NAT  : len=%u, %.*s \n", (datalen), (int)(datalen), pdata);
                 }
                 else if (nf_ct_expect_related(exp) != 0) {
                 printk("ip_conntrack_expect_related failed\n");
@@ -704,7 +1007,14 @@ help_out(struct sk_buff *skb,unsigned ch
 					 &ct->tuplehash[!dir].tuple.dst.u3,
 					 IPPROTO_UDP, NULL, &(expinfo.loport));
 
-			exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+			//exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+
+                if (expinfo.reply_source == 0)
+                        exp1->tuple.src.u3 = ct->tuplehash[!dir].tuple.src.u3;
+                else
+                        exp1->tuple.src.u3.ip = expinfo.reply_source;
+
+
 			exp1->mask.src.u3.ip  = 0xffffffff; //orginal
 			exp1->tuple.src.u.tcp.port = 0;
 			exp1->mask.src.u.udp.port  = 0 ;
@@ -897,18 +1207,19 @@ out:
 }
 
 /* inbound packet: server->client */
-static inline int
-help_in(struct sk_buff *skb , size_t pktlen,
-		struct nf_conn* ct, enum ip_conntrack_info ctinfo)
-{
+//static inline int
+//help_in(struct sk_buff *skb , size_t pktlen,
+//		struct nf_conn* ct, enum ip_conntrack_info ctinfo)
+//{
 
 // ct->ifx_alg_qos_mark = IFX_ALG_APP_RTSP | IFX_ALG_PROTO_RTP ; //for test
 
   //DEBUGP ("\nRTSP_ALG: help_out marked ct->ifx_alg_qos_mark to : %x ***\n",
    //                                                           ct->ifx_alg_qos_mark );
 
-	return NF_ACCEPT;
-}
+//	return NF_ACCEPT;
+//}
+
 
 static int
 help(struct sk_buff *skb,unsigned int protoff,
@@ -929,7 +1240,7 @@ help(struct sk_buff *skb,unsigned int pr
 		return NF_ACCEPT;
 	} 
 
-
+	proto_nat_off = protoff;
         th = skb_header_pointer(skb, protoff,
                             sizeof(_tcph), &_tcph);
       if (!th)
@@ -972,8 +1283,9 @@ help(struct sk_buff *skb,unsigned int pr
 			break;
 		case IP_CT_DIR_REPLY:
 			DEBUGP("Calling help_in ********* \n");
+			ret = help_in(skb, rb_ptr, datalen, ct, ctinfo);
 			 //ret = help_in(pskb, datalen, ct, ctinfo);
-			 return NF_ACCEPT;
+			 //return NF_ACCEPT;
 			break;
 		default:
 			/* oops */
